// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct fscrypt_add_key_arg {
 *     struct fscrypt_key_specifier key_spec;
 *     __u32 raw_size;
 *     __u32 key_id;
 *     __u32 __reserved[8];
 *     __u8 raw[];
 * }
 * }
 */
public class fscrypt_add_key_arg {

    fscrypt_add_key_arg() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        fscrypt_key_specifier.layout().withName("key_spec"),
        liburingtest.C_INT.withName("raw_size"),
        liburingtest.C_INT.withName("key_id"),
        MemoryLayout.sequenceLayout(8, liburingtest.C_INT).withName("__reserved"),
        MemoryLayout.sequenceLayout(0, liburingtest.C_CHAR).withName("raw")
    ).withName("fscrypt_add_key_arg");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout key_spec$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("key_spec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct fscrypt_key_specifier key_spec
     * }
     */
    public static final GroupLayout key_spec$layout() {
        return key_spec$LAYOUT;
    }

    private static final long key_spec$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct fscrypt_key_specifier key_spec
     * }
     */
    public static final long key_spec$offset() {
        return key_spec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct fscrypt_key_specifier key_spec
     * }
     */
    public static MemorySegment key_spec(MemorySegment struct) {
        return struct.asSlice(key_spec$OFFSET, key_spec$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct fscrypt_key_specifier key_spec
     * }
     */
    public static void key_spec(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, key_spec$OFFSET, key_spec$LAYOUT.byteSize());
    }

    private static final OfInt raw_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("raw_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 raw_size
     * }
     */
    public static final OfInt raw_size$layout() {
        return raw_size$LAYOUT;
    }

    private static final long raw_size$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 raw_size
     * }
     */
    public static final long raw_size$offset() {
        return raw_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 raw_size
     * }
     */
    public static int raw_size(MemorySegment struct) {
        return struct.get(raw_size$LAYOUT, raw_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 raw_size
     * }
     */
    public static void raw_size(MemorySegment struct, int fieldValue) {
        struct.set(raw_size$LAYOUT, raw_size$OFFSET, fieldValue);
    }

    private static final OfInt key_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("key_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 key_id
     * }
     */
    public static final OfInt key_id$layout() {
        return key_id$LAYOUT;
    }

    private static final long key_id$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 key_id
     * }
     */
    public static final long key_id$offset() {
        return key_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 key_id
     * }
     */
    public static int key_id(MemorySegment struct) {
        return struct.get(key_id$LAYOUT, key_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 key_id
     * }
     */
    public static void key_id(MemorySegment struct, int fieldValue) {
        struct.set(key_id$LAYOUT, key_id$OFFSET, fieldValue);
    }

    private static final SequenceLayout __reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 __reserved[8]
     * }
     */
    public static final SequenceLayout __reserved$layout() {
        return __reserved$LAYOUT;
    }

    private static final long __reserved$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 __reserved[8]
     * }
     */
    public static final long __reserved$offset() {
        return __reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 __reserved[8]
     * }
     */
    public static MemorySegment __reserved(MemorySegment struct) {
        return struct.asSlice(__reserved$OFFSET, __reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 __reserved[8]
     * }
     */
    public static void __reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __reserved$OFFSET, __reserved$LAYOUT.byteSize());
    }

    private static long[] __reserved$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u32 __reserved[8]
     * }
     */
    public static long[] __reserved$dimensions() {
        return __reserved$DIMS;
    }
    private static final VarHandle __reserved$ELEM_HANDLE = __reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u32 __reserved[8]
     * }
     */
    public static int __reserved(MemorySegment struct, long index0) {
        return (int)__reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u32 __reserved[8]
     * }
     */
    public static void __reserved(MemorySegment struct, long index0, int fieldValue) {
        __reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout raw$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("raw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 raw[]
     * }
     */
    public static final SequenceLayout raw$layout() {
        return raw$LAYOUT;
    }

    private static final long raw$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 raw[]
     * }
     */
    public static final long raw$offset() {
        return raw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 raw[]
     * }
     */
    public static MemorySegment raw(MemorySegment struct) {
        return struct.asSlice(raw$OFFSET, raw$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 raw[]
     * }
     */
    public static void raw(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, raw$OFFSET, raw$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

