// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct fscrypt_key {
 *     __u32 mode;
 *     __u8 raw[64];
 *     __u32 size;
 * }
 * }
 */
public class fscrypt_key {

    fscrypt_key() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_INT.withName("mode"),
        MemoryLayout.sequenceLayout(64, liburingtest.C_CHAR).withName("raw"),
        liburingtest.C_INT.withName("size")
    ).withName("fscrypt_key");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 mode
     * }
     */
    public static final OfInt mode$layout() {
        return mode$LAYOUT;
    }

    private static final long mode$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 mode
     * }
     */
    public static final long mode$offset() {
        return mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 mode
     * }
     */
    public static int mode(MemorySegment struct) {
        return struct.get(mode$LAYOUT, mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 mode
     * }
     */
    public static void mode(MemorySegment struct, int fieldValue) {
        struct.set(mode$LAYOUT, mode$OFFSET, fieldValue);
    }

    private static final SequenceLayout raw$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("raw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 raw[64]
     * }
     */
    public static final SequenceLayout raw$layout() {
        return raw$LAYOUT;
    }

    private static final long raw$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 raw[64]
     * }
     */
    public static final long raw$offset() {
        return raw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 raw[64]
     * }
     */
    public static MemorySegment raw(MemorySegment struct) {
        return struct.asSlice(raw$OFFSET, raw$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 raw[64]
     * }
     */
    public static void raw(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, raw$OFFSET, raw$LAYOUT.byteSize());
    }

    private static long[] raw$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u8 raw[64]
     * }
     */
    public static long[] raw$dimensions() {
        return raw$DIMS;
    }
    private static final VarHandle raw$ELEM_HANDLE = raw$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u8 raw[64]
     * }
     */
    public static byte raw(MemorySegment struct, long index0) {
        return (byte)raw$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u8 raw[64]
     * }
     */
    public static void raw(MemorySegment struct, long index0, byte fieldValue) {
        raw$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 size
     * }
     */
    public static final OfInt size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 size
     * }
     */
    public static int size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 size
     * }
     */
    public static void size(MemorySegment struct, int fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

