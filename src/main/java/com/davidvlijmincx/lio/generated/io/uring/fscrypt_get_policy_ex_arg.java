// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfByte;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang=c :
 * struct fscrypt_get_policy_ex_arg {
 *     __u64 policy_size;
 *     union {
 *         __u8 version;
 *         struct fscrypt_policy_v1 v1;
 *         struct fscrypt_policy_v2 v2;
 *     } policy;
 * }
 * }
 */
public class fscrypt_get_policy_ex_arg {

    fscrypt_get_policy_ex_arg() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_LONG_LONG.withName("policy_size"),
        policy.layout().withName("policy")
    ).withName("fscrypt_get_policy_ex_arg");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong policy_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("policy_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 policy_size
     * }
     */
    public static final OfLong policy_size$layout() {
        return policy_size$LAYOUT;
    }

    private static final long policy_size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 policy_size
     * }
     */
    public static final long policy_size$offset() {
        return policy_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 policy_size
     * }
     */
    public static long policy_size(MemorySegment struct) {
        return struct.get(policy_size$LAYOUT, policy_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 policy_size
     * }
     */
    public static void policy_size(MemorySegment struct, long fieldValue) {
        struct.set(policy_size$LAYOUT, policy_size$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     __u8 version;
     *     struct fscrypt_policy_v1 v1;
     *     struct fscrypt_policy_v2 v2;
     * }
     * }
     */
    public static class policy {

        policy() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            liburingtest.C_CHAR.withName("version"),
            fscrypt_policy_v1.layout().withName("v1"),
            fscrypt_policy_v2.layout().withName("v2")
        ).withName("$anon$82:2");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfByte version$LAYOUT = (OfByte)$LAYOUT.select(groupElement("version"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * __u8 version
         * }
         */
        public static final OfByte version$layout() {
            return version$LAYOUT;
        }

        private static final long version$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * __u8 version
         * }
         */
        public static final long version$offset() {
            return version$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * __u8 version
         * }
         */
        public static byte version(MemorySegment union) {
            return union.get(version$LAYOUT, version$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * __u8 version
         * }
         */
        public static void version(MemorySegment union, byte fieldValue) {
            union.set(version$LAYOUT, version$OFFSET, fieldValue);
        }

        private static final GroupLayout v1$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("v1"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct fscrypt_policy_v1 v1
         * }
         */
        public static final GroupLayout v1$layout() {
            return v1$LAYOUT;
        }

        private static final long v1$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct fscrypt_policy_v1 v1
         * }
         */
        public static final long v1$offset() {
            return v1$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct fscrypt_policy_v1 v1
         * }
         */
        public static MemorySegment v1(MemorySegment union) {
            return union.asSlice(v1$OFFSET, v1$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct fscrypt_policy_v1 v1
         * }
         */
        public static void v1(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, v1$OFFSET, v1$LAYOUT.byteSize());
        }

        private static final GroupLayout v2$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("v2"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct fscrypt_policy_v2 v2
         * }
         */
        public static final GroupLayout v2$layout() {
            return v2$LAYOUT;
        }

        private static final long v2$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct fscrypt_policy_v2 v2
         * }
         */
        public static final long v2$offset() {
            return v2$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct fscrypt_policy_v2 v2
         * }
         */
        public static MemorySegment v2(MemorySegment union) {
            return union.asSlice(v2$OFFSET, v2$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct fscrypt_policy_v2 v2
         * }
         */
        public static void v2(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, v2$OFFSET, v2$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout policy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("policy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     __u8 version;
     *     struct fscrypt_policy_v1 v1;
     *     struct fscrypt_policy_v2 v2;
     * } policy
     * }
     */
    public static final GroupLayout policy$layout() {
        return policy$LAYOUT;
    }

    private static final long policy$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     __u8 version;
     *     struct fscrypt_policy_v1 v1;
     *     struct fscrypt_policy_v2 v2;
     * } policy
     * }
     */
    public static final long policy$offset() {
        return policy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     __u8 version;
     *     struct fscrypt_policy_v1 v1;
     *     struct fscrypt_policy_v2 v2;
     * } policy
     * }
     */
    public static MemorySegment policy(MemorySegment struct) {
        return struct.asSlice(policy$OFFSET, policy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     __u8 version;
     *     struct fscrypt_policy_v1 v1;
     *     struct fscrypt_policy_v2 v2;
     * } policy
     * }
     */
    public static void policy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, policy$OFFSET, policy$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

