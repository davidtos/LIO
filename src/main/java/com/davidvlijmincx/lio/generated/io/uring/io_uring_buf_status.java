// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct io_uring_buf_status {
 *     __u32 buf_group;
 *     __u32 head;
 *     __u32 resv[8];
 * }
 * }
 */
public class io_uring_buf_status {

    io_uring_buf_status() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_INT.withName("buf_group"),
        liburingtest.C_INT.withName("head"),
        MemoryLayout.sequenceLayout(8, liburingtest.C_INT).withName("resv")
    ).withName("io_uring_buf_status");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt buf_group$LAYOUT = (OfInt)$LAYOUT.select(groupElement("buf_group"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 buf_group
     * }
     */
    public static final OfInt buf_group$layout() {
        return buf_group$LAYOUT;
    }

    private static final long buf_group$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 buf_group
     * }
     */
    public static final long buf_group$offset() {
        return buf_group$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 buf_group
     * }
     */
    public static int buf_group(MemorySegment struct) {
        return struct.get(buf_group$LAYOUT, buf_group$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 buf_group
     * }
     */
    public static void buf_group(MemorySegment struct, int fieldValue) {
        struct.set(buf_group$LAYOUT, buf_group$OFFSET, fieldValue);
    }

    private static final OfInt head$LAYOUT = (OfInt)$LAYOUT.select(groupElement("head"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 head
     * }
     */
    public static final OfInt head$layout() {
        return head$LAYOUT;
    }

    private static final long head$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 head
     * }
     */
    public static final long head$offset() {
        return head$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 head
     * }
     */
    public static int head(MemorySegment struct) {
        return struct.get(head$LAYOUT, head$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 head
     * }
     */
    public static void head(MemorySegment struct, int fieldValue) {
        struct.set(head$LAYOUT, head$OFFSET, fieldValue);
    }

    private static final SequenceLayout resv$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("resv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 resv[8]
     * }
     */
    public static final SequenceLayout resv$layout() {
        return resv$LAYOUT;
    }

    private static final long resv$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 resv[8]
     * }
     */
    public static final long resv$offset() {
        return resv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 resv[8]
     * }
     */
    public static MemorySegment resv(MemorySegment struct) {
        return struct.asSlice(resv$OFFSET, resv$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 resv[8]
     * }
     */
    public static void resv(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, resv$OFFSET, resv$LAYOUT.byteSize());
    }

    private static long[] resv$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u32 resv[8]
     * }
     */
    public static long[] resv$dimensions() {
        return resv$DIMS;
    }
    private static final VarHandle resv$ELEM_HANDLE = resv$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u32 resv[8]
     * }
     */
    public static int resv(MemorySegment struct, long index0) {
        return (int)resv$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u32 resv[8]
     * }
     */
    public static void resv(MemorySegment struct, long index0, int fieldValue) {
        resv$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

