// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;

/**
 * {@snippet lang=c :
 * struct _xstate {
 *     struct _fpstate fpstate;
 *     struct _xsave_hdr xstate_hdr;
 *     struct _ymmh_state ymmh;
 * }
 * }
 */
public class _xstate {

    _xstate() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _fpstate.layout().withName("fpstate"),
        _xsave_hdr.layout().withName("xstate_hdr"),
        _ymmh_state.layout().withName("ymmh")
    ).withName("_xstate");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout fpstate$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("fpstate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _fpstate fpstate
     * }
     */
    public static final GroupLayout fpstate$layout() {
        return fpstate$LAYOUT;
    }

    private static final long fpstate$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _fpstate fpstate
     * }
     */
    public static final long fpstate$offset() {
        return fpstate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _fpstate fpstate
     * }
     */
    public static MemorySegment fpstate(MemorySegment struct) {
        return struct.asSlice(fpstate$OFFSET, fpstate$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _fpstate fpstate
     * }
     */
    public static void fpstate(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fpstate$OFFSET, fpstate$LAYOUT.byteSize());
    }

    private static final GroupLayout xstate_hdr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("xstate_hdr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _xsave_hdr xstate_hdr
     * }
     */
    public static final GroupLayout xstate_hdr$layout() {
        return xstate_hdr$LAYOUT;
    }

    private static final long xstate_hdr$OFFSET = 512;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _xsave_hdr xstate_hdr
     * }
     */
    public static final long xstate_hdr$offset() {
        return xstate_hdr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _xsave_hdr xstate_hdr
     * }
     */
    public static MemorySegment xstate_hdr(MemorySegment struct) {
        return struct.asSlice(xstate_hdr$OFFSET, xstate_hdr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _xsave_hdr xstate_hdr
     * }
     */
    public static void xstate_hdr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, xstate_hdr$OFFSET, xstate_hdr$LAYOUT.byteSize());
    }

    private static final GroupLayout ymmh$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ymmh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _ymmh_state ymmh
     * }
     */
    public static final GroupLayout ymmh$layout() {
        return ymmh$LAYOUT;
    }

    private static final long ymmh$OFFSET = 576;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _ymmh_state ymmh
     * }
     */
    public static final long ymmh$offset() {
        return ymmh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _ymmh_state ymmh
     * }
     */
    public static MemorySegment ymmh(MemorySegment struct) {
        return struct.asSlice(ymmh$OFFSET, ymmh$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _ymmh_state ymmh
     * }
     */
    public static void ymmh(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ymmh$OFFSET, ymmh$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

