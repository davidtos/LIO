// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.*;

/**
 * {@snippet lang=c :
 * struct io_uring_buf_ring {
 *     union {
 *         struct {
 *             __u64 resv1;
 *             __u32 resv2;
 *             __u16 resv3;
 *             __u16 tail;
 *         };
 *         struct io_uring_buf bufs[0];
 *     };
 * }
 * }
 */
public class io_uring_buf_ring {

    io_uring_buf_ring() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                liburingtest.C_LONG_LONG.withName("resv1"),
                liburingtest.C_INT.withName("resv2"),
                liburingtest.C_SHORT.withName("resv3"),
                liburingtest.C_SHORT.withName("tail")
            ).withName("$anon$699:3"),
            MemoryLayout.sequenceLayout(0, io_uring_buf.layout()).withName("bufs")
        ).withName("$anon$694:2")
    ).withName("io_uring_buf_ring");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong resv1$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$694:2"), groupElement("$anon$699:3"), groupElement("resv1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 resv1
     * }
     */
    public static final OfLong resv1$layout() {
        return resv1$LAYOUT;
    }

    private static final long resv1$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 resv1
     * }
     */
    public static final long resv1$offset() {
        return resv1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 resv1
     * }
     */
    public static long resv1(MemorySegment struct) {
        return struct.get(resv1$LAYOUT, resv1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 resv1
     * }
     */
    public static void resv1(MemorySegment struct, long fieldValue) {
        struct.set(resv1$LAYOUT, resv1$OFFSET, fieldValue);
    }

    private static final OfInt resv2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$694:2"), groupElement("$anon$699:3"), groupElement("resv2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 resv2
     * }
     */
    public static final OfInt resv2$layout() {
        return resv2$LAYOUT;
    }

    private static final long resv2$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 resv2
     * }
     */
    public static final long resv2$offset() {
        return resv2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 resv2
     * }
     */
    public static int resv2(MemorySegment struct) {
        return struct.get(resv2$LAYOUT, resv2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 resv2
     * }
     */
    public static void resv2(MemorySegment struct, int fieldValue) {
        struct.set(resv2$LAYOUT, resv2$OFFSET, fieldValue);
    }

    private static final OfShort resv3$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$694:2"), groupElement("$anon$699:3"), groupElement("resv3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u16 resv3
     * }
     */
    public static final OfShort resv3$layout() {
        return resv3$LAYOUT;
    }

    private static final long resv3$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u16 resv3
     * }
     */
    public static final long resv3$offset() {
        return resv3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 resv3
     * }
     */
    public static short resv3(MemorySegment struct) {
        return struct.get(resv3$LAYOUT, resv3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 resv3
     * }
     */
    public static void resv3(MemorySegment struct, short fieldValue) {
        struct.set(resv3$LAYOUT, resv3$OFFSET, fieldValue);
    }

    private static final OfShort tail$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$694:2"), groupElement("$anon$699:3"), groupElement("tail"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u16 tail
     * }
     */
    public static final OfShort tail$layout() {
        return tail$LAYOUT;
    }

    private static final long tail$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u16 tail
     * }
     */
    public static final long tail$offset() {
        return tail$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 tail
     * }
     */
    public static short tail(MemorySegment struct) {
        return struct.get(tail$LAYOUT, tail$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 tail
     * }
     */
    public static void tail(MemorySegment struct, short fieldValue) {
        struct.set(tail$LAYOUT, tail$OFFSET, fieldValue);
    }

    private static final SequenceLayout bufs$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("$anon$694:2"), groupElement("bufs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct io_uring_buf bufs[0]
     * }
     */
    public static final SequenceLayout bufs$layout() {
        return bufs$LAYOUT;
    }

    private static final long bufs$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct io_uring_buf bufs[0]
     * }
     */
    public static final long bufs$offset() {
        return bufs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct io_uring_buf bufs[0]
     * }
     */
    public static MemorySegment bufs(MemorySegment struct) {
        return struct.asSlice(bufs$OFFSET, bufs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct io_uring_buf bufs[0]
     * }
     */
    public static void bufs(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bufs$OFFSET, bufs$LAYOUT.byteSize());
    }

    private static long[] bufs$DIMS = { 0 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * struct io_uring_buf bufs[0]
     * }
     */
    public static long[] bufs$dimensions() {
        return bufs$DIMS;
    }
    private static final MethodHandle bufs$ELEM_HANDLE = bufs$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * struct io_uring_buf bufs[0]
     * }
     */
    public static MemorySegment bufs(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)bufs$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * struct io_uring_buf bufs[0]
     * }
     */
    public static void bufs(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, bufs(struct, index0), 0L, io_uring_buf.layout().byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

