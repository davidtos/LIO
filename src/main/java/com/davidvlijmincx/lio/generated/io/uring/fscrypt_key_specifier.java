// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct fscrypt_key_specifier {
 *     __u32 type;
 *     __u32 __reserved;
 *     union {
 *         __u8 __reserved[32];
 *         __u8 descriptor[8];
 *         __u8 identifier[16];
 *     } u;
 * }
 * }
 */
public class fscrypt_key_specifier {

    fscrypt_key_specifier() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_INT.withName("type"),
        liburingtest.C_INT.withName("__reserved"),
        u.layout().withName("u")
    ).withName("fscrypt_key_specifier");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt __reserved$LAYOUT = (OfInt)$LAYOUT.select(groupElement("__reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 __reserved
     * }
     */
    public static final OfInt __reserved$layout() {
        return __reserved$LAYOUT;
    }

    private static final long __reserved$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 __reserved
     * }
     */
    public static final long __reserved$offset() {
        return __reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 __reserved
     * }
     */
    public static int __reserved(MemorySegment struct) {
        return struct.get(__reserved$LAYOUT, __reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 __reserved
     * }
     */
    public static void __reserved(MemorySegment struct, int fieldValue) {
        struct.set(__reserved$LAYOUT, __reserved$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     __u8 __reserved[32];
     *     __u8 descriptor[8];
     *     __u8 identifier[16];
     * }
     * }
     */
    public static class u {

        u() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.sequenceLayout(32, liburingtest.C_CHAR).withName("__reserved"),
            MemoryLayout.sequenceLayout(8, liburingtest.C_CHAR).withName("descriptor"),
            MemoryLayout.sequenceLayout(16, liburingtest.C_CHAR).withName("identifier")
        ).withName("$anon$109:2");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final SequenceLayout __reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__reserved"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * __u8 __reserved[32]
         * }
         */
        public static final SequenceLayout __reserved$layout() {
            return __reserved$LAYOUT;
        }

        private static final long __reserved$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * __u8 __reserved[32]
         * }
         */
        public static final long __reserved$offset() {
            return __reserved$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * __u8 __reserved[32]
         * }
         */
        public static MemorySegment __reserved(MemorySegment union) {
            return union.asSlice(__reserved$OFFSET, __reserved$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * __u8 __reserved[32]
         * }
         */
        public static void __reserved(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, __reserved$OFFSET, __reserved$LAYOUT.byteSize());
        }

        private static long[] __reserved$DIMS = { 32 };

        /**
         * Dimensions for array field:
         * {@snippet lang=c :
         * __u8 __reserved[32]
         * }
         */
        public static long[] __reserved$dimensions() {
            return __reserved$DIMS;
        }
        private static final VarHandle __reserved$ELEM_HANDLE = __reserved$LAYOUT.varHandle(sequenceElement());

        /**
         * Indexed getter for field:
         * {@snippet lang=c :
         * __u8 __reserved[32]
         * }
         */
        public static byte __reserved(MemorySegment union, long index0) {
            return (byte)__reserved$ELEM_HANDLE.get(union, 0L, index0);
        }

        /**
         * Indexed setter for field:
         * {@snippet lang=c :
         * __u8 __reserved[32]
         * }
         */
        public static void __reserved(MemorySegment union, long index0, byte fieldValue) {
            __reserved$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
        }

        private static final SequenceLayout descriptor$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("descriptor"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * __u8 descriptor[8]
         * }
         */
        public static final SequenceLayout descriptor$layout() {
            return descriptor$LAYOUT;
        }

        private static final long descriptor$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * __u8 descriptor[8]
         * }
         */
        public static final long descriptor$offset() {
            return descriptor$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * __u8 descriptor[8]
         * }
         */
        public static MemorySegment descriptor(MemorySegment union) {
            return union.asSlice(descriptor$OFFSET, descriptor$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * __u8 descriptor[8]
         * }
         */
        public static void descriptor(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, descriptor$OFFSET, descriptor$LAYOUT.byteSize());
        }

        private static long[] descriptor$DIMS = { 8 };

        /**
         * Dimensions for array field:
         * {@snippet lang=c :
         * __u8 descriptor[8]
         * }
         */
        public static long[] descriptor$dimensions() {
            return descriptor$DIMS;
        }
        private static final VarHandle descriptor$ELEM_HANDLE = descriptor$LAYOUT.varHandle(sequenceElement());

        /**
         * Indexed getter for field:
         * {@snippet lang=c :
         * __u8 descriptor[8]
         * }
         */
        public static byte descriptor(MemorySegment union, long index0) {
            return (byte)descriptor$ELEM_HANDLE.get(union, 0L, index0);
        }

        /**
         * Indexed setter for field:
         * {@snippet lang=c :
         * __u8 descriptor[8]
         * }
         */
        public static void descriptor(MemorySegment union, long index0, byte fieldValue) {
            descriptor$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
        }

        private static final SequenceLayout identifier$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("identifier"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * __u8 identifier[16]
         * }
         */
        public static final SequenceLayout identifier$layout() {
            return identifier$LAYOUT;
        }

        private static final long identifier$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * __u8 identifier[16]
         * }
         */
        public static final long identifier$offset() {
            return identifier$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * __u8 identifier[16]
         * }
         */
        public static MemorySegment identifier(MemorySegment union) {
            return union.asSlice(identifier$OFFSET, identifier$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * __u8 identifier[16]
         * }
         */
        public static void identifier(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, identifier$OFFSET, identifier$LAYOUT.byteSize());
        }

        private static long[] identifier$DIMS = { 16 };

        /**
         * Dimensions for array field:
         * {@snippet lang=c :
         * __u8 identifier[16]
         * }
         */
        public static long[] identifier$dimensions() {
            return identifier$DIMS;
        }
        private static final VarHandle identifier$ELEM_HANDLE = identifier$LAYOUT.varHandle(sequenceElement());

        /**
         * Indexed getter for field:
         * {@snippet lang=c :
         * __u8 identifier[16]
         * }
         */
        public static byte identifier(MemorySegment union, long index0) {
            return (byte)identifier$ELEM_HANDLE.get(union, 0L, index0);
        }

        /**
         * Indexed setter for field:
         * {@snippet lang=c :
         * __u8 identifier[16]
         * }
         */
        public static void identifier(MemorySegment union, long index0, byte fieldValue) {
            identifier$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout u$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("u"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     __u8 __reserved[32];
     *     __u8 descriptor[8];
     *     __u8 identifier[16];
     * } u
     * }
     */
    public static final GroupLayout u$layout() {
        return u$LAYOUT;
    }

    private static final long u$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     __u8 __reserved[32];
     *     __u8 descriptor[8];
     *     __u8 identifier[16];
     * } u
     * }
     */
    public static final long u$offset() {
        return u$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     __u8 __reserved[32];
     *     __u8 descriptor[8];
     *     __u8 identifier[16];
     * } u
     * }
     */
    public static MemorySegment u(MemorySegment struct) {
        return struct.asSlice(u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     __u8 __reserved[32];
     *     __u8 descriptor[8];
     *     __u8 identifier[16];
     * } u
     * }
     */
    public static void u(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

