// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang=c :
 * struct pm_scan_arg {
 *     __u64 size;
 *     __u64 flags;
 *     __u64 start;
 *     __u64 end;
 *     __u64 walk_end;
 *     __u64 vec;
 *     __u64 vec_len;
 *     __u64 max_pages;
 *     __u64 category_inverted;
 *     __u64 category_mask;
 *     __u64 category_anyof_mask;
 *     __u64 return_mask;
 * }
 * }
 */
public class pm_scan_arg {

    pm_scan_arg() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_LONG_LONG.withName("size"),
        liburingtest.C_LONG_LONG.withName("flags"),
        liburingtest.C_LONG_LONG.withName("start"),
        liburingtest.C_LONG_LONG.withName("end"),
        liburingtest.C_LONG_LONG.withName("walk_end"),
        liburingtest.C_LONG_LONG.withName("vec"),
        liburingtest.C_LONG_LONG.withName("vec_len"),
        liburingtest.C_LONG_LONG.withName("max_pages"),
        liburingtest.C_LONG_LONG.withName("category_inverted"),
        liburingtest.C_LONG_LONG.withName("category_mask"),
        liburingtest.C_LONG_LONG.withName("category_anyof_mask"),
        liburingtest.C_LONG_LONG.withName("return_mask")
    ).withName("pm_scan_arg");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 size
     * }
     */
    public static final OfLong size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 size
     * }
     */
    public static long size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 size
     * }
     */
    public static void size(MemorySegment struct, long fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final OfLong flags$LAYOUT = (OfLong)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 flags
     * }
     */
    public static final OfLong flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 flags
     * }
     */
    public static long flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 flags
     * }
     */
    public static void flags(MemorySegment struct, long fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfLong start$LAYOUT = (OfLong)$LAYOUT.select(groupElement("start"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 start
     * }
     */
    public static final OfLong start$layout() {
        return start$LAYOUT;
    }

    private static final long start$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 start
     * }
     */
    public static final long start$offset() {
        return start$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 start
     * }
     */
    public static long start(MemorySegment struct) {
        return struct.get(start$LAYOUT, start$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 start
     * }
     */
    public static void start(MemorySegment struct, long fieldValue) {
        struct.set(start$LAYOUT, start$OFFSET, fieldValue);
    }

    private static final OfLong end$LAYOUT = (OfLong)$LAYOUT.select(groupElement("end"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 end
     * }
     */
    public static final OfLong end$layout() {
        return end$LAYOUT;
    }

    private static final long end$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 end
     * }
     */
    public static final long end$offset() {
        return end$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 end
     * }
     */
    public static long end(MemorySegment struct) {
        return struct.get(end$LAYOUT, end$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 end
     * }
     */
    public static void end(MemorySegment struct, long fieldValue) {
        struct.set(end$LAYOUT, end$OFFSET, fieldValue);
    }

    private static final OfLong walk_end$LAYOUT = (OfLong)$LAYOUT.select(groupElement("walk_end"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 walk_end
     * }
     */
    public static final OfLong walk_end$layout() {
        return walk_end$LAYOUT;
    }

    private static final long walk_end$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 walk_end
     * }
     */
    public static final long walk_end$offset() {
        return walk_end$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 walk_end
     * }
     */
    public static long walk_end(MemorySegment struct) {
        return struct.get(walk_end$LAYOUT, walk_end$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 walk_end
     * }
     */
    public static void walk_end(MemorySegment struct, long fieldValue) {
        struct.set(walk_end$LAYOUT, walk_end$OFFSET, fieldValue);
    }

    private static final OfLong vec$LAYOUT = (OfLong)$LAYOUT.select(groupElement("vec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 vec
     * }
     */
    public static final OfLong vec$layout() {
        return vec$LAYOUT;
    }

    private static final long vec$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 vec
     * }
     */
    public static final long vec$offset() {
        return vec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 vec
     * }
     */
    public static long vec(MemorySegment struct) {
        return struct.get(vec$LAYOUT, vec$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 vec
     * }
     */
    public static void vec(MemorySegment struct, long fieldValue) {
        struct.set(vec$LAYOUT, vec$OFFSET, fieldValue);
    }

    private static final OfLong vec_len$LAYOUT = (OfLong)$LAYOUT.select(groupElement("vec_len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 vec_len
     * }
     */
    public static final OfLong vec_len$layout() {
        return vec_len$LAYOUT;
    }

    private static final long vec_len$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 vec_len
     * }
     */
    public static final long vec_len$offset() {
        return vec_len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 vec_len
     * }
     */
    public static long vec_len(MemorySegment struct) {
        return struct.get(vec_len$LAYOUT, vec_len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 vec_len
     * }
     */
    public static void vec_len(MemorySegment struct, long fieldValue) {
        struct.set(vec_len$LAYOUT, vec_len$OFFSET, fieldValue);
    }

    private static final OfLong max_pages$LAYOUT = (OfLong)$LAYOUT.select(groupElement("max_pages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 max_pages
     * }
     */
    public static final OfLong max_pages$layout() {
        return max_pages$LAYOUT;
    }

    private static final long max_pages$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 max_pages
     * }
     */
    public static final long max_pages$offset() {
        return max_pages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 max_pages
     * }
     */
    public static long max_pages(MemorySegment struct) {
        return struct.get(max_pages$LAYOUT, max_pages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 max_pages
     * }
     */
    public static void max_pages(MemorySegment struct, long fieldValue) {
        struct.set(max_pages$LAYOUT, max_pages$OFFSET, fieldValue);
    }

    private static final OfLong category_inverted$LAYOUT = (OfLong)$LAYOUT.select(groupElement("category_inverted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 category_inverted
     * }
     */
    public static final OfLong category_inverted$layout() {
        return category_inverted$LAYOUT;
    }

    private static final long category_inverted$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 category_inverted
     * }
     */
    public static final long category_inverted$offset() {
        return category_inverted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 category_inverted
     * }
     */
    public static long category_inverted(MemorySegment struct) {
        return struct.get(category_inverted$LAYOUT, category_inverted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 category_inverted
     * }
     */
    public static void category_inverted(MemorySegment struct, long fieldValue) {
        struct.set(category_inverted$LAYOUT, category_inverted$OFFSET, fieldValue);
    }

    private static final OfLong category_mask$LAYOUT = (OfLong)$LAYOUT.select(groupElement("category_mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 category_mask
     * }
     */
    public static final OfLong category_mask$layout() {
        return category_mask$LAYOUT;
    }

    private static final long category_mask$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 category_mask
     * }
     */
    public static final long category_mask$offset() {
        return category_mask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 category_mask
     * }
     */
    public static long category_mask(MemorySegment struct) {
        return struct.get(category_mask$LAYOUT, category_mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 category_mask
     * }
     */
    public static void category_mask(MemorySegment struct, long fieldValue) {
        struct.set(category_mask$LAYOUT, category_mask$OFFSET, fieldValue);
    }

    private static final OfLong category_anyof_mask$LAYOUT = (OfLong)$LAYOUT.select(groupElement("category_anyof_mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 category_anyof_mask
     * }
     */
    public static final OfLong category_anyof_mask$layout() {
        return category_anyof_mask$LAYOUT;
    }

    private static final long category_anyof_mask$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 category_anyof_mask
     * }
     */
    public static final long category_anyof_mask$offset() {
        return category_anyof_mask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 category_anyof_mask
     * }
     */
    public static long category_anyof_mask(MemorySegment struct) {
        return struct.get(category_anyof_mask$LAYOUT, category_anyof_mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 category_anyof_mask
     * }
     */
    public static void category_anyof_mask(MemorySegment struct, long fieldValue) {
        struct.set(category_anyof_mask$LAYOUT, category_anyof_mask$OFFSET, fieldValue);
    }

    private static final OfLong return_mask$LAYOUT = (OfLong)$LAYOUT.select(groupElement("return_mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 return_mask
     * }
     */
    public static final OfLong return_mask$layout() {
        return return_mask$LAYOUT;
    }

    private static final long return_mask$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 return_mask
     * }
     */
    public static final long return_mask$offset() {
        return return_mask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 return_mask
     * }
     */
    public static long return_mask(MemorySegment struct) {
        return struct.get(return_mask$LAYOUT, return_mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 return_mask
     * }
     */
    public static void return_mask(MemorySegment struct, long fieldValue) {
        struct.set(return_mask$LAYOUT, return_mask$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

