// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.*;

/**
 * {@snippet lang=c :
 * struct io_uring_probe_op {
 *     __u8 op;
 *     __u8 resv;
 *     __u16 flags;
 *     __u32 resv2;
 * }
 * }
 */
public class io_uring_probe_op {

    io_uring_probe_op() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_CHAR.withName("op"),
        liburingtest.C_CHAR.withName("resv"),
        liburingtest.C_SHORT.withName("flags"),
        liburingtest.C_INT.withName("resv2")
    ).withName("io_uring_probe_op");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte op$LAYOUT = (OfByte)$LAYOUT.select(groupElement("op"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 op
     * }
     */
    public static final OfByte op$layout() {
        return op$LAYOUT;
    }

    private static final long op$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 op
     * }
     */
    public static final long op$offset() {
        return op$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 op
     * }
     */
    public static byte op(MemorySegment struct) {
        return struct.get(op$LAYOUT, op$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 op
     * }
     */
    public static void op(MemorySegment struct, byte fieldValue) {
        struct.set(op$LAYOUT, op$OFFSET, fieldValue);
    }

    private static final OfByte resv$LAYOUT = (OfByte)$LAYOUT.select(groupElement("resv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 resv
     * }
     */
    public static final OfByte resv$layout() {
        return resv$LAYOUT;
    }

    private static final long resv$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 resv
     * }
     */
    public static final long resv$offset() {
        return resv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 resv
     * }
     */
    public static byte resv(MemorySegment struct) {
        return struct.get(resv$LAYOUT, resv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 resv
     * }
     */
    public static void resv(MemorySegment struct, byte fieldValue) {
        struct.set(resv$LAYOUT, resv$OFFSET, fieldValue);
    }

    private static final OfShort flags$LAYOUT = (OfShort)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u16 flags
     * }
     */
    public static final OfShort flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u16 flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 flags
     * }
     */
    public static short flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 flags
     * }
     */
    public static void flags(MemorySegment struct, short fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt resv2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("resv2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 resv2
     * }
     */
    public static final OfInt resv2$layout() {
        return resv2$LAYOUT;
    }

    private static final long resv2$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 resv2
     * }
     */
    public static final long resv2$offset() {
        return resv2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 resv2
     * }
     */
    public static int resv2(MemorySegment struct) {
        return struct.get(resv2$LAYOUT, resv2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 resv2
     * }
     */
    public static void resv2(MemorySegment struct, int fieldValue) {
        struct.set(resv2$LAYOUT, resv2$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

