// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;

/**
 * {@snippet lang=c :
 * struct {
 *     gregset_t gregs;
 *     fpregset_t fpregs;
 *     unsigned long long __reserved1[8];
 * }
 * }
 */
public class mcontext_t {

    mcontext_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(23, liburingtest.C_LONG_LONG).withName("gregs"),
        liburingtest.C_POINTER.withName("fpregs"),
        MemoryLayout.sequenceLayout(8, liburingtest.C_LONG_LONG).withName("__reserved1")
    ).withName("$anon$133:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout gregs$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("gregs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gregset_t gregs
     * }
     */
    public static final SequenceLayout gregs$layout() {
        return gregs$LAYOUT;
    }

    private static final long gregs$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gregset_t gregs
     * }
     */
    public static final long gregs$offset() {
        return gregs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gregset_t gregs
     * }
     */
    public static MemorySegment gregs(MemorySegment struct) {
        return struct.asSlice(gregs$OFFSET, gregs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gregset_t gregs
     * }
     */
    public static void gregs(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, gregs$OFFSET, gregs$LAYOUT.byteSize());
    }

    private static final AddressLayout fpregs$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fpregs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * fpregset_t fpregs
     * }
     */
    public static final AddressLayout fpregs$layout() {
        return fpregs$LAYOUT;
    }

    private static final long fpregs$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * fpregset_t fpregs
     * }
     */
    public static final long fpregs$offset() {
        return fpregs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * fpregset_t fpregs
     * }
     */
    public static MemorySegment fpregs(MemorySegment struct) {
        return struct.get(fpregs$LAYOUT, fpregs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * fpregset_t fpregs
     * }
     */
    public static void fpregs(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fpregs$LAYOUT, fpregs$OFFSET, fieldValue);
    }

    private static final SequenceLayout __reserved1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long long __reserved1[8]
     * }
     */
    public static final SequenceLayout __reserved1$layout() {
        return __reserved1$LAYOUT;
    }

    private static final long __reserved1$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long long __reserved1[8]
     * }
     */
    public static final long __reserved1$offset() {
        return __reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long long __reserved1[8]
     * }
     */
    public static MemorySegment __reserved1(MemorySegment struct) {
        return struct.asSlice(__reserved1$OFFSET, __reserved1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long long __reserved1[8]
     * }
     */
    public static void __reserved1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __reserved1$OFFSET, __reserved1$LAYOUT.byteSize());
    }

    private static long[] __reserved1$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned long long __reserved1[8]
     * }
     */
    public static long[] __reserved1$dimensions() {
        return __reserved1$DIMS;
    }
    private static final VarHandle __reserved1$ELEM_HANDLE = __reserved1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned long long __reserved1[8]
     * }
     */
    public static long __reserved1(MemorySegment struct, long index0) {
        return (long)__reserved1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned long long __reserved1[8]
     * }
     */
    public static void __reserved1(MemorySegment struct, long index0, long fieldValue) {
        __reserved1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

