// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang=c :
 * struct io_uring_rsrc_update2 {
 *     __u32 offset;
 *     __u32 resv;
 *     __u64 data;
 *     __u64 tags;
 *     __u32 nr;
 *     __u32 resv2;
 * }
 * }
 */
public class io_uring_rsrc_update2 {

    io_uring_rsrc_update2() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_INT.withName("offset"),
        liburingtest.C_INT.withName("resv"),
        liburingtest.C_LONG_LONG.withName("data"),
        liburingtest.C_LONG_LONG.withName("tags"),
        liburingtest.C_INT.withName("nr"),
        liburingtest.C_INT.withName("resv2")
    ).withName("io_uring_rsrc_update2");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 offset
     * }
     */
    public static final OfInt offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 offset
     * }
     */
    public static int offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 offset
     * }
     */
    public static void offset(MemorySegment struct, int fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfInt resv$LAYOUT = (OfInt)$LAYOUT.select(groupElement("resv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 resv
     * }
     */
    public static final OfInt resv$layout() {
        return resv$LAYOUT;
    }

    private static final long resv$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 resv
     * }
     */
    public static final long resv$offset() {
        return resv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 resv
     * }
     */
    public static int resv(MemorySegment struct) {
        return struct.get(resv$LAYOUT, resv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 resv
     * }
     */
    public static void resv(MemorySegment struct, int fieldValue) {
        struct.set(resv$LAYOUT, resv$OFFSET, fieldValue);
    }

    private static final OfLong data$LAYOUT = (OfLong)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 data
     * }
     */
    public static final OfLong data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 data
     * }
     */
    public static long data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 data
     * }
     */
    public static void data(MemorySegment struct, long fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    private static final OfLong tags$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 tags
     * }
     */
    public static final OfLong tags$layout() {
        return tags$LAYOUT;
    }

    private static final long tags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 tags
     * }
     */
    public static final long tags$offset() {
        return tags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 tags
     * }
     */
    public static long tags(MemorySegment struct) {
        return struct.get(tags$LAYOUT, tags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 tags
     * }
     */
    public static void tags(MemorySegment struct, long fieldValue) {
        struct.set(tags$LAYOUT, tags$OFFSET, fieldValue);
    }

    private static final OfInt nr$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 nr
     * }
     */
    public static final OfInt nr$layout() {
        return nr$LAYOUT;
    }

    private static final long nr$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 nr
     * }
     */
    public static final long nr$offset() {
        return nr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 nr
     * }
     */
    public static int nr(MemorySegment struct) {
        return struct.get(nr$LAYOUT, nr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 nr
     * }
     */
    public static void nr(MemorySegment struct, int fieldValue) {
        struct.set(nr$LAYOUT, nr$OFFSET, fieldValue);
    }

    private static final OfInt resv2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("resv2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 resv2
     * }
     */
    public static final OfInt resv2$layout() {
        return resv2$LAYOUT;
    }

    private static final long resv2$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 resv2
     * }
     */
    public static final long resv2$offset() {
        return resv2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 resv2
     * }
     */
    public static int resv2(MemorySegment struct) {
        return struct.get(resv2$LAYOUT, resv2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 resv2
     * }
     */
    public static void resv2(MemorySegment struct, int fieldValue) {
        struct.set(resv2$LAYOUT, resv2$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

