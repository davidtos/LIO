// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang=c :
 * struct open_how {
 *     __u64 flags;
 *     __u64 mode;
 *     __u64 resolve;
 * }
 * }
 */
public class open_how {

    open_how() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_LONG_LONG.withName("flags"),
        liburingtest.C_LONG_LONG.withName("mode"),
        liburingtest.C_LONG_LONG.withName("resolve")
    ).withName("open_how");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong flags$LAYOUT = (OfLong)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 flags
     * }
     */
    public static final OfLong flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 flags
     * }
     */
    public static long flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 flags
     * }
     */
    public static void flags(MemorySegment struct, long fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfLong mode$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 mode
     * }
     */
    public static final OfLong mode$layout() {
        return mode$LAYOUT;
    }

    private static final long mode$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 mode
     * }
     */
    public static final long mode$offset() {
        return mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 mode
     * }
     */
    public static long mode(MemorySegment struct) {
        return struct.get(mode$LAYOUT, mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 mode
     * }
     */
    public static void mode(MemorySegment struct, long fieldValue) {
        struct.set(mode$LAYOUT, mode$OFFSET, fieldValue);
    }

    private static final OfLong resolve$LAYOUT = (OfLong)$LAYOUT.select(groupElement("resolve"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 resolve
     * }
     */
    public static final OfLong resolve$layout() {
        return resolve$LAYOUT;
    }

    private static final long resolve$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 resolve
     * }
     */
    public static final long resolve$offset() {
        return resolve$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 resolve
     * }
     */
    public static long resolve(MemorySegment struct) {
        return struct.get(resolve$LAYOUT, resolve$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 resolve
     * }
     */
    public static void resolve(MemorySegment struct, long fieldValue) {
        struct.set(resolve$LAYOUT, resolve$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

