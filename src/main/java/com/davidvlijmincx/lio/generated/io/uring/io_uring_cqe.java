// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang=c :
 * struct io_uring_cqe {
 *     __u64 user_data;
 *     __s32 res;
 *     __u32 flags;
 *     __u64 big_cqe[];
 * }
 * }
 */
public class io_uring_cqe {

    io_uring_cqe() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_LONG_LONG.withName("user_data"),
        liburingtest.C_INT.withName("res"),
        liburingtest.C_INT.withName("flags"),
        MemoryLayout.sequenceLayout(0, liburingtest.C_LONG_LONG).withName("big_cqe")
    ).withName("io_uring_cqe");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong user_data$LAYOUT = (OfLong)$LAYOUT.select(groupElement("user_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 user_data
     * }
     */
    public static final OfLong user_data$layout() {
        return user_data$LAYOUT;
    }

    private static final long user_data$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 user_data
     * }
     */
    public static final long user_data$offset() {
        return user_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 user_data
     * }
     */
    public static long user_data(MemorySegment struct) {
        return struct.get(user_data$LAYOUT, user_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 user_data
     * }
     */
    public static void user_data(MemorySegment struct, long fieldValue) {
        struct.set(user_data$LAYOUT, user_data$OFFSET, fieldValue);
    }

    private static final OfInt res$LAYOUT = (OfInt)$LAYOUT.select(groupElement("res"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __s32 res
     * }
     */
    public static final OfInt res$layout() {
        return res$LAYOUT;
    }

    private static final long res$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __s32 res
     * }
     */
    public static final long res$offset() {
        return res$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __s32 res
     * }
     */
    public static int res(MemorySegment struct) {
        return struct.get(res$LAYOUT, res$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __s32 res
     * }
     */
    public static void res(MemorySegment struct, int fieldValue) {
        struct.set(res$LAYOUT, res$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final SequenceLayout big_cqe$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("big_cqe"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 big_cqe[]
     * }
     */
    public static final SequenceLayout big_cqe$layout() {
        return big_cqe$LAYOUT;
    }

    private static final long big_cqe$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 big_cqe[]
     * }
     */
    public static final long big_cqe$offset() {
        return big_cqe$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 big_cqe[]
     * }
     */
    public static MemorySegment big_cqe(MemorySegment struct) {
        return struct.asSlice(big_cqe$OFFSET, big_cqe$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 big_cqe[]
     * }
     */
    public static void big_cqe(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, big_cqe$OFFSET, big_cqe$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

