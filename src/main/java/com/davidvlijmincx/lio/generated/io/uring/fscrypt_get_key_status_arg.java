// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct fscrypt_get_key_status_arg {
 *     struct fscrypt_key_specifier key_spec;
 *     __u32 __reserved[6];
 *     __u32 status;
 *     __u32 status_flags;
 *     __u32 user_count;
 *     __u32 __out_reserved[13];
 * }
 * }
 */
public class fscrypt_get_key_status_arg {

    fscrypt_get_key_status_arg() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        fscrypt_key_specifier.layout().withName("key_spec"),
        MemoryLayout.sequenceLayout(6, liburingtest.C_INT).withName("__reserved"),
        liburingtest.C_INT.withName("status"),
        liburingtest.C_INT.withName("status_flags"),
        liburingtest.C_INT.withName("user_count"),
        MemoryLayout.sequenceLayout(13, liburingtest.C_INT).withName("__out_reserved")
    ).withName("fscrypt_get_key_status_arg");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout key_spec$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("key_spec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct fscrypt_key_specifier key_spec
     * }
     */
    public static final GroupLayout key_spec$layout() {
        return key_spec$LAYOUT;
    }

    private static final long key_spec$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct fscrypt_key_specifier key_spec
     * }
     */
    public static final long key_spec$offset() {
        return key_spec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct fscrypt_key_specifier key_spec
     * }
     */
    public static MemorySegment key_spec(MemorySegment struct) {
        return struct.asSlice(key_spec$OFFSET, key_spec$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct fscrypt_key_specifier key_spec
     * }
     */
    public static void key_spec(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, key_spec$OFFSET, key_spec$LAYOUT.byteSize());
    }

    private static final SequenceLayout __reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 __reserved[6]
     * }
     */
    public static final SequenceLayout __reserved$layout() {
        return __reserved$LAYOUT;
    }

    private static final long __reserved$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 __reserved[6]
     * }
     */
    public static final long __reserved$offset() {
        return __reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 __reserved[6]
     * }
     */
    public static MemorySegment __reserved(MemorySegment struct) {
        return struct.asSlice(__reserved$OFFSET, __reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 __reserved[6]
     * }
     */
    public static void __reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __reserved$OFFSET, __reserved$LAYOUT.byteSize());
    }

    private static long[] __reserved$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u32 __reserved[6]
     * }
     */
    public static long[] __reserved$dimensions() {
        return __reserved$DIMS;
    }
    private static final VarHandle __reserved$ELEM_HANDLE = __reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u32 __reserved[6]
     * }
     */
    public static int __reserved(MemorySegment struct, long index0) {
        return (int)__reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u32 __reserved[6]
     * }
     */
    public static void __reserved(MemorySegment struct, long index0, int fieldValue) {
        __reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt status$LAYOUT = (OfInt)$LAYOUT.select(groupElement("status"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 status
     * }
     */
    public static final OfInt status$layout() {
        return status$LAYOUT;
    }

    private static final long status$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 status
     * }
     */
    public static final long status$offset() {
        return status$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 status
     * }
     */
    public static int status(MemorySegment struct) {
        return struct.get(status$LAYOUT, status$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 status
     * }
     */
    public static void status(MemorySegment struct, int fieldValue) {
        struct.set(status$LAYOUT, status$OFFSET, fieldValue);
    }

    private static final OfInt status_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("status_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 status_flags
     * }
     */
    public static final OfInt status_flags$layout() {
        return status_flags$LAYOUT;
    }

    private static final long status_flags$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 status_flags
     * }
     */
    public static final long status_flags$offset() {
        return status_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 status_flags
     * }
     */
    public static int status_flags(MemorySegment struct) {
        return struct.get(status_flags$LAYOUT, status_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 status_flags
     * }
     */
    public static void status_flags(MemorySegment struct, int fieldValue) {
        struct.set(status_flags$LAYOUT, status_flags$OFFSET, fieldValue);
    }

    private static final OfInt user_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("user_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 user_count
     * }
     */
    public static final OfInt user_count$layout() {
        return user_count$LAYOUT;
    }

    private static final long user_count$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 user_count
     * }
     */
    public static final long user_count$offset() {
        return user_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 user_count
     * }
     */
    public static int user_count(MemorySegment struct) {
        return struct.get(user_count$LAYOUT, user_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 user_count
     * }
     */
    public static void user_count(MemorySegment struct, int fieldValue) {
        struct.set(user_count$LAYOUT, user_count$OFFSET, fieldValue);
    }

    private static final SequenceLayout __out_reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__out_reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 __out_reserved[13]
     * }
     */
    public static final SequenceLayout __out_reserved$layout() {
        return __out_reserved$LAYOUT;
    }

    private static final long __out_reserved$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 __out_reserved[13]
     * }
     */
    public static final long __out_reserved$offset() {
        return __out_reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 __out_reserved[13]
     * }
     */
    public static MemorySegment __out_reserved(MemorySegment struct) {
        return struct.asSlice(__out_reserved$OFFSET, __out_reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 __out_reserved[13]
     * }
     */
    public static void __out_reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __out_reserved$OFFSET, __out_reserved$LAYOUT.byteSize());
    }

    private static long[] __out_reserved$DIMS = { 13 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u32 __out_reserved[13]
     * }
     */
    public static long[] __out_reserved$dimensions() {
        return __out_reserved$DIMS;
    }
    private static final VarHandle __out_reserved$ELEM_HANDLE = __out_reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u32 __out_reserved[13]
     * }
     */
    public static int __out_reserved(MemorySegment struct, long index0) {
        return (int)__out_reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u32 __out_reserved[13]
     * }
     */
    public static void __out_reserved(MemorySegment struct, long index0, int fieldValue) {
        __out_reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

