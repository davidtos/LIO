// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfByte;
import static java.lang.foreign.ValueLayout.OfShort;

/**
 * {@snippet lang=c :
 * struct io_uring_restriction {
 *     __u16 opcode;
 *     union {
 *         __u8 register_op;
 *         __u8 sqe_op;
 *         __u8 sqe_flags;
 *     };
 *     __u8 resv;
 *     __u32 resv2[3];
 * }
 * }
 */
public class io_uring_restriction {

    io_uring_restriction() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_SHORT.withName("opcode"),
        MemoryLayout.unionLayout(
            liburingtest.C_CHAR.withName("register_op"),
            liburingtest.C_CHAR.withName("sqe_op"),
            liburingtest.C_CHAR.withName("sqe_flags")
        ).withName("$anon$672:2"),
        liburingtest.C_CHAR.withName("resv"),
        MemoryLayout.sequenceLayout(3, liburingtest.C_INT).withName("resv2")
    ).withName("io_uring_restriction");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort opcode$LAYOUT = (OfShort)$LAYOUT.select(groupElement("opcode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u16 opcode
     * }
     */
    public static final OfShort opcode$layout() {
        return opcode$LAYOUT;
    }

    private static final long opcode$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u16 opcode
     * }
     */
    public static final long opcode$offset() {
        return opcode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 opcode
     * }
     */
    public static short opcode(MemorySegment struct) {
        return struct.get(opcode$LAYOUT, opcode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 opcode
     * }
     */
    public static void opcode(MemorySegment struct, short fieldValue) {
        struct.set(opcode$LAYOUT, opcode$OFFSET, fieldValue);
    }

    private static final OfByte register_op$LAYOUT = (OfByte)$LAYOUT.select(groupElement("$anon$672:2"), groupElement("register_op"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 register_op
     * }
     */
    public static final OfByte register_op$layout() {
        return register_op$LAYOUT;
    }

    private static final long register_op$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 register_op
     * }
     */
    public static final long register_op$offset() {
        return register_op$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 register_op
     * }
     */
    public static byte register_op(MemorySegment struct) {
        return struct.get(register_op$LAYOUT, register_op$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 register_op
     * }
     */
    public static void register_op(MemorySegment struct, byte fieldValue) {
        struct.set(register_op$LAYOUT, register_op$OFFSET, fieldValue);
    }

    private static final OfByte sqe_op$LAYOUT = (OfByte)$LAYOUT.select(groupElement("$anon$672:2"), groupElement("sqe_op"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 sqe_op
     * }
     */
    public static final OfByte sqe_op$layout() {
        return sqe_op$LAYOUT;
    }

    private static final long sqe_op$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 sqe_op
     * }
     */
    public static final long sqe_op$offset() {
        return sqe_op$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 sqe_op
     * }
     */
    public static byte sqe_op(MemorySegment struct) {
        return struct.get(sqe_op$LAYOUT, sqe_op$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 sqe_op
     * }
     */
    public static void sqe_op(MemorySegment struct, byte fieldValue) {
        struct.set(sqe_op$LAYOUT, sqe_op$OFFSET, fieldValue);
    }

    private static final OfByte sqe_flags$LAYOUT = (OfByte)$LAYOUT.select(groupElement("$anon$672:2"), groupElement("sqe_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 sqe_flags
     * }
     */
    public static final OfByte sqe_flags$layout() {
        return sqe_flags$LAYOUT;
    }

    private static final long sqe_flags$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 sqe_flags
     * }
     */
    public static final long sqe_flags$offset() {
        return sqe_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 sqe_flags
     * }
     */
    public static byte sqe_flags(MemorySegment struct) {
        return struct.get(sqe_flags$LAYOUT, sqe_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 sqe_flags
     * }
     */
    public static void sqe_flags(MemorySegment struct, byte fieldValue) {
        struct.set(sqe_flags$LAYOUT, sqe_flags$OFFSET, fieldValue);
    }

    private static final OfByte resv$LAYOUT = (OfByte)$LAYOUT.select(groupElement("resv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 resv
     * }
     */
    public static final OfByte resv$layout() {
        return resv$LAYOUT;
    }

    private static final long resv$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 resv
     * }
     */
    public static final long resv$offset() {
        return resv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 resv
     * }
     */
    public static byte resv(MemorySegment struct) {
        return struct.get(resv$LAYOUT, resv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 resv
     * }
     */
    public static void resv(MemorySegment struct, byte fieldValue) {
        struct.set(resv$LAYOUT, resv$OFFSET, fieldValue);
    }

    private static final SequenceLayout resv2$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("resv2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 resv2[3]
     * }
     */
    public static final SequenceLayout resv2$layout() {
        return resv2$LAYOUT;
    }

    private static final long resv2$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 resv2[3]
     * }
     */
    public static final long resv2$offset() {
        return resv2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 resv2[3]
     * }
     */
    public static MemorySegment resv2(MemorySegment struct) {
        return struct.asSlice(resv2$OFFSET, resv2$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 resv2[3]
     * }
     */
    public static void resv2(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, resv2$OFFSET, resv2$LAYOUT.byteSize());
    }

    private static long[] resv2$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u32 resv2[3]
     * }
     */
    public static long[] resv2$dimensions() {
        return resv2$DIMS;
    }
    private static final VarHandle resv2$ELEM_HANDLE = resv2$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u32 resv2[3]
     * }
     */
    public static int resv2(MemorySegment struct, long index0) {
        return (int)resv2$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u32 resv2[3]
     * }
     */
    public static void resv2(MemorySegment struct, long index0, int fieldValue) {
        resv2$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

