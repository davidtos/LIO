// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang=c :
 * struct mnt_id_req {
 *     __u32 size;
 *     __u32 spare;
 *     __u64 mnt_id;
 *     __u64 param;
 * }
 * }
 */
public class mnt_id_req {

    mnt_id_req() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_INT.withName("size"),
        liburingtest.C_INT.withName("spare"),
        liburingtest.C_LONG_LONG.withName("mnt_id"),
        liburingtest.C_LONG_LONG.withName("param")
    ).withName("mnt_id_req");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 size
     * }
     */
    public static final OfInt size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 size
     * }
     */
    public static int size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 size
     * }
     */
    public static void size(MemorySegment struct, int fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final OfInt spare$LAYOUT = (OfInt)$LAYOUT.select(groupElement("spare"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 spare
     * }
     */
    public static final OfInt spare$layout() {
        return spare$LAYOUT;
    }

    private static final long spare$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 spare
     * }
     */
    public static final long spare$offset() {
        return spare$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 spare
     * }
     */
    public static int spare(MemorySegment struct) {
        return struct.get(spare$LAYOUT, spare$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 spare
     * }
     */
    public static void spare(MemorySegment struct, int fieldValue) {
        struct.set(spare$LAYOUT, spare$OFFSET, fieldValue);
    }

    private static final OfLong mnt_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mnt_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 mnt_id
     * }
     */
    public static final OfLong mnt_id$layout() {
        return mnt_id$LAYOUT;
    }

    private static final long mnt_id$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 mnt_id
     * }
     */
    public static final long mnt_id$offset() {
        return mnt_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 mnt_id
     * }
     */
    public static long mnt_id(MemorySegment struct) {
        return struct.get(mnt_id$LAYOUT, mnt_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 mnt_id
     * }
     */
    public static void mnt_id(MemorySegment struct, long fieldValue) {
        struct.set(mnt_id$LAYOUT, mnt_id$OFFSET, fieldValue);
    }

    private static final OfLong param$LAYOUT = (OfLong)$LAYOUT.select(groupElement("param"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 param
     * }
     */
    public static final OfLong param$layout() {
        return param$LAYOUT;
    }

    private static final long param$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 param
     * }
     */
    public static final long param$offset() {
        return param$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 param
     * }
     */
    public static long param(MemorySegment struct) {
        return struct.get(param$LAYOUT, param$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 param
     * }
     */
    public static void param(MemorySegment struct, long fieldValue) {
        struct.set(param$LAYOUT, param$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

