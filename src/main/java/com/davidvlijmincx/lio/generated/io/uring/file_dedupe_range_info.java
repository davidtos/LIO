// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang=c :
 * struct file_dedupe_range_info {
 *     __s64 dest_fd;
 *     __u64 dest_offset;
 *     __u64 bytes_deduped;
 *     __s32 status;
 *     __u32 reserved;
 * }
 * }
 */
public class file_dedupe_range_info {

    file_dedupe_range_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_LONG_LONG.withName("dest_fd"),
        liburingtest.C_LONG_LONG.withName("dest_offset"),
        liburingtest.C_LONG_LONG.withName("bytes_deduped"),
        liburingtest.C_INT.withName("status"),
        liburingtest.C_INT.withName("reserved")
    ).withName("file_dedupe_range_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong dest_fd$LAYOUT = (OfLong)$LAYOUT.select(groupElement("dest_fd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __s64 dest_fd
     * }
     */
    public static final OfLong dest_fd$layout() {
        return dest_fd$LAYOUT;
    }

    private static final long dest_fd$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __s64 dest_fd
     * }
     */
    public static final long dest_fd$offset() {
        return dest_fd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __s64 dest_fd
     * }
     */
    public static long dest_fd(MemorySegment struct) {
        return struct.get(dest_fd$LAYOUT, dest_fd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __s64 dest_fd
     * }
     */
    public static void dest_fd(MemorySegment struct, long fieldValue) {
        struct.set(dest_fd$LAYOUT, dest_fd$OFFSET, fieldValue);
    }

    private static final OfLong dest_offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("dest_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 dest_offset
     * }
     */
    public static final OfLong dest_offset$layout() {
        return dest_offset$LAYOUT;
    }

    private static final long dest_offset$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 dest_offset
     * }
     */
    public static final long dest_offset$offset() {
        return dest_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 dest_offset
     * }
     */
    public static long dest_offset(MemorySegment struct) {
        return struct.get(dest_offset$LAYOUT, dest_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 dest_offset
     * }
     */
    public static void dest_offset(MemorySegment struct, long fieldValue) {
        struct.set(dest_offset$LAYOUT, dest_offset$OFFSET, fieldValue);
    }

    private static final OfLong bytes_deduped$LAYOUT = (OfLong)$LAYOUT.select(groupElement("bytes_deduped"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 bytes_deduped
     * }
     */
    public static final OfLong bytes_deduped$layout() {
        return bytes_deduped$LAYOUT;
    }

    private static final long bytes_deduped$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 bytes_deduped
     * }
     */
    public static final long bytes_deduped$offset() {
        return bytes_deduped$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 bytes_deduped
     * }
     */
    public static long bytes_deduped(MemorySegment struct) {
        return struct.get(bytes_deduped$LAYOUT, bytes_deduped$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 bytes_deduped
     * }
     */
    public static void bytes_deduped(MemorySegment struct, long fieldValue) {
        struct.set(bytes_deduped$LAYOUT, bytes_deduped$OFFSET, fieldValue);
    }

    private static final OfInt status$LAYOUT = (OfInt)$LAYOUT.select(groupElement("status"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __s32 status
     * }
     */
    public static final OfInt status$layout() {
        return status$LAYOUT;
    }

    private static final long status$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __s32 status
     * }
     */
    public static final long status$offset() {
        return status$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __s32 status
     * }
     */
    public static int status(MemorySegment struct) {
        return struct.get(status$LAYOUT, status$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __s32 status
     * }
     */
    public static void status(MemorySegment struct, int fieldValue) {
        struct.set(status$LAYOUT, status$OFFSET, fieldValue);
    }

    private static final OfInt reserved$LAYOUT = (OfInt)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 reserved
     * }
     */
    public static final OfInt reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 reserved
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 reserved
     * }
     */
    public static int reserved(MemorySegment struct) {
        return struct.get(reserved$LAYOUT, reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 reserved
     * }
     */
    public static void reserved(MemorySegment struct, int fieldValue) {
        struct.set(reserved$LAYOUT, reserved$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

