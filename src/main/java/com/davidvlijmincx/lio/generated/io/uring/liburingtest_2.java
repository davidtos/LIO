// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.util.Arrays;
import java.util.stream.Collectors;

import static java.lang.foreign.ValueLayout.*;

public class liburingtest_2 {

    liburingtest_2() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup("/lib/liburing-ffi.so", LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final OfInt C_INT = ValueLayout.JAVA_INT;
    public static final OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE));
    public static final OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int _SYS_SOCKET_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_SOCKET_H 1
     * }
     */
    public static int _SYS_SOCKET_H() {
        return _SYS_SOCKET_H;
    }
    private static final int _FEATURES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return _FEATURES_H;
    }
    private static final int _DEFAULT_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return _DEFAULT_SOURCE;
    }
    private static final int __GLIBC_USE_ISOC2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return __GLIBC_USE_ISOC2X;
    }
    private static final int __USE_ISOC11 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return __USE_ISOC11;
    }
    private static final int __USE_ISOC99 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return __USE_ISOC99;
    }
    private static final int __USE_ISOC95 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return __USE_ISOC95;
    }
    private static final int __USE_POSIX_IMPLICITLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return __USE_POSIX_IMPLICITLY;
    }
    private static final int _POSIX_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return _POSIX_SOURCE;
    }
    private static final int __USE_POSIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return __USE_POSIX;
    }
    private static final int __USE_POSIX2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return __USE_POSIX2;
    }
    private static final int __USE_POSIX199309 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return __USE_POSIX199309;
    }
    private static final int __USE_POSIX199506 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return __USE_POSIX199506;
    }
    private static final int __USE_XOPEN2K = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return __USE_XOPEN2K;
    }
    private static final int __USE_XOPEN2K8 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return __USE_XOPEN2K8;
    }
    private static final int _ATFILE_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return _ATFILE_SOURCE;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __WORDSIZE_TIME64_COMPAT32 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return __WORDSIZE_TIME64_COMPAT32;
    }
    private static final int __SYSCALL_WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return __SYSCALL_WORDSIZE;
    }
    private static final int __USE_MISC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return __USE_MISC;
    }
    private static final int __USE_ATFILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return __USE_ATFILE;
    }
    private static final int __USE_FORTIFY_LEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return __USE_FORTIFY_LEVEL;
    }
    private static final int __GLIBC_USE_DEPRECATED_GETS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return __GLIBC_USE_DEPRECATED_GETS;
    }
    private static final int __GLIBC_USE_DEPRECATED_SCANF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return __GLIBC_USE_DEPRECATED_SCANF;
    }
    private static final int _STDC_PREDEF_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return _STDC_PREDEF_H;
    }
    private static final int __STDC_IEC_559__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return __STDC_IEC_559__;
    }
    private static final int __STDC_IEC_559_COMPLEX__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return __STDC_IEC_559_COMPLEX__;
    }
    private static final int __GNU_LIBRARY__ = (int)6L;
    /**
     * {@snippet lang=c :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return __GNU_LIBRARY__;
    }
    private static final int __GLIBC__ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return __GLIBC__;
    }
    private static final int __GLIBC_MINOR__ = (int)35L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_MINOR__ 35
     * }
     */
    public static int __GLIBC_MINOR__() {
        return __GLIBC_MINOR__;
    }
    private static final int _SYS_CDEFS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return _SYS_CDEFS_H;
    }
    private static final int __glibc_c99_flexarr_available = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return __glibc_c99_flexarr_available;
    }
    private static final int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI;
    }
    private static final int __HAVE_GENERIC_SELECTION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return __HAVE_GENERIC_SELECTION;
    }
    private static final int __iovec_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __iovec_defined 1
     * }
     */
    public static int __iovec_defined() {
        return __iovec_defined;
    }
    private static final int _SYS_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_TYPES_H 1
     * }
     */
    public static int _SYS_TYPES_H() {
        return _SYS_TYPES_H;
    }
    private static final int _BITS_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return _BITS_TYPES_H;
    }
    private static final int _BITS_TYPESIZES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return _BITS_TYPESIZES_H;
    }
    private static final int __OFF_T_MATCHES_OFF64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return __OFF_T_MATCHES_OFF64_T;
    }
    private static final int __INO_T_MATCHES_INO64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return __INO_T_MATCHES_INO64_T;
    }
    private static final int __RLIM_T_MATCHES_RLIM64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return __RLIM_T_MATCHES_RLIM64_T;
    }
    private static final int __STATFS_MATCHES_STATFS64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return __STATFS_MATCHES_STATFS64;
    }
    private static final int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64;
    }
    private static final int __FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return __FD_SETSIZE;
    }
    private static final int _BITS_TIME64_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return _BITS_TIME64_H;
    }
    private static final int __clock_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __clock_t_defined 1
     * }
     */
    public static int __clock_t_defined() {
        return __clock_t_defined;
    }
    private static final int __clockid_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __clockid_t_defined 1
     * }
     */
    public static int __clockid_t_defined() {
        return __clockid_t_defined;
    }
    private static final int __time_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __time_t_defined 1
     * }
     */
    public static int __time_t_defined() {
        return __time_t_defined;
    }
    private static final int __timer_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __timer_t_defined 1
     * }
     */
    public static int __timer_t_defined() {
        return __timer_t_defined;
    }
    private static final int _BITS_STDINT_INTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return _BITS_STDINT_INTN_H;
    }
    private static final int __BIT_TYPES_DEFINED__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __BIT_TYPES_DEFINED__ 1
     * }
     */
    public static int __BIT_TYPES_DEFINED__() {
        return __BIT_TYPES_DEFINED__;
    }
    private static final int _ENDIAN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ENDIAN_H 1
     * }
     */
    public static int _ENDIAN_H() {
        return _ENDIAN_H;
    }
    private static final int _BITS_ENDIAN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_ENDIAN_H 1
     * }
     */
    public static int _BITS_ENDIAN_H() {
        return _BITS_ENDIAN_H;
    }
    private static final int __LITTLE_ENDIAN = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __LITTLE_ENDIAN 1234
     * }
     */
    public static int __LITTLE_ENDIAN() {
        return __LITTLE_ENDIAN;
    }
    private static final int __BIG_ENDIAN = (int)4321L;
    /**
     * {@snippet lang=c :
     * #define __BIG_ENDIAN 4321
     * }
     */
    public static int __BIG_ENDIAN() {
        return __BIG_ENDIAN;
    }
    private static final int __PDP_ENDIAN = (int)3412L;
    /**
     * {@snippet lang=c :
     * #define __PDP_ENDIAN 3412
     * }
     */
    public static int __PDP_ENDIAN() {
        return __PDP_ENDIAN;
    }
    private static final int _BITS_ENDIANNESS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_ENDIANNESS_H 1
     * }
     */
    public static int _BITS_ENDIANNESS_H() {
        return _BITS_ENDIANNESS_H;
    }
    private static final int _BITS_BYTESWAP_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_BYTESWAP_H 1
     * }
     */
    public static int _BITS_BYTESWAP_H() {
        return _BITS_BYTESWAP_H;
    }
    private static final int _BITS_UINTN_IDENTITY_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_UINTN_IDENTITY_H 1
     * }
     */
    public static int _BITS_UINTN_IDENTITY_H() {
        return _BITS_UINTN_IDENTITY_H;
    }
    private static final int _SYS_SELECT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_SELECT_H 1
     * }
     */
    public static int _SYS_SELECT_H() {
        return _SYS_SELECT_H;
    }
    private static final int __sigset_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __sigset_t_defined 1
     * }
     */
    public static int __sigset_t_defined() {
        return __sigset_t_defined;
    }
    private static final int __timeval_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __timeval_defined 1
     * }
     */
    public static int __timeval_defined() {
        return __timeval_defined;
    }
    private static final int _STRUCT_TIMESPEC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STRUCT_TIMESPEC 1
     * }
     */
    public static int _STRUCT_TIMESPEC() {
        return _STRUCT_TIMESPEC;
    }
    private static final int _BITS_PTHREADTYPES_COMMON_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_PTHREADTYPES_COMMON_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return _BITS_PTHREADTYPES_COMMON_H;
    }
    private static final int _THREAD_SHARED_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _THREAD_SHARED_TYPES_H 1
     * }
     */
    public static int _THREAD_SHARED_TYPES_H() {
        return _THREAD_SHARED_TYPES_H;
    }
    private static final int _BITS_PTHREADTYPES_ARCH_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_PTHREADTYPES_ARCH_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return _BITS_PTHREADTYPES_ARCH_H;
    }
    private static final int __SIZEOF_PTHREAD_MUTEX_T = (int)40L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_MUTEX_T 40
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return __SIZEOF_PTHREAD_MUTEX_T;
    }
    private static final int __SIZEOF_PTHREAD_ATTR_T = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_ATTR_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return __SIZEOF_PTHREAD_ATTR_T;
    }
    private static final int __SIZEOF_PTHREAD_RWLOCK_T = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_RWLOCK_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return __SIZEOF_PTHREAD_RWLOCK_T;
    }
    private static final int __SIZEOF_PTHREAD_BARRIER_T = (int)32L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_BARRIER_T 32
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return __SIZEOF_PTHREAD_BARRIER_T;
    }
    private static final int __SIZEOF_PTHREAD_MUTEXATTR_T = (int)4L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_MUTEXATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return __SIZEOF_PTHREAD_MUTEXATTR_T;
    }
    private static final int __SIZEOF_PTHREAD_COND_T = (int)48L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_COND_T 48
     * }
     */
    public static int __SIZEOF_PTHREAD_COND_T() {
        return __SIZEOF_PTHREAD_COND_T;
    }
    private static final int __SIZEOF_PTHREAD_CONDATTR_T = (int)4L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_CONDATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return __SIZEOF_PTHREAD_CONDATTR_T;
    }
    private static final int __SIZEOF_PTHREAD_RWLOCKATTR_T = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return __SIZEOF_PTHREAD_RWLOCKATTR_T;
    }
    private static final int __SIZEOF_PTHREAD_BARRIERATTR_T = (int)4L;
    /**
     * {@snippet lang=c :
     * #define __SIZEOF_PTHREAD_BARRIERATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return __SIZEOF_PTHREAD_BARRIERATTR_T;
    }
    private static final int _THREAD_MUTEX_INTERNAL_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _THREAD_MUTEX_INTERNAL_H 1
     * }
     */
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return _THREAD_MUTEX_INTERNAL_H;
    }
    private static final int __PTHREAD_MUTEX_HAVE_PREV = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEX_HAVE_PREV 1
     * }
     */
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return __PTHREAD_MUTEX_HAVE_PREV;
    }
    private static final int __have_pthread_attr_t = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __have_pthread_attr_t 1
     * }
     */
    public static int __have_pthread_attr_t() {
        return __have_pthread_attr_t;
    }
    private static final int PF_UNSPEC = (int)0L;
    /**
     * {@snippet lang=c :
     * #define PF_UNSPEC 0
     * }
     */
    public static int PF_UNSPEC() {
        return PF_UNSPEC;
    }
    private static final int PF_LOCAL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PF_LOCAL 1
     * }
     */
    public static int PF_LOCAL() {
        return PF_LOCAL;
    }
    private static final int PF_INET = (int)2L;
    /**
     * {@snippet lang=c :
     * #define PF_INET 2
     * }
     */
    public static int PF_INET() {
        return PF_INET;
    }
    private static final int PF_AX25 = (int)3L;
    /**
     * {@snippet lang=c :
     * #define PF_AX25 3
     * }
     */
    public static int PF_AX25() {
        return PF_AX25;
    }
    private static final int PF_IPX = (int)4L;
    /**
     * {@snippet lang=c :
     * #define PF_IPX 4
     * }
     */
    public static int PF_IPX() {
        return PF_IPX;
    }
    private static final int PF_APPLETALK = (int)5L;
    /**
     * {@snippet lang=c :
     * #define PF_APPLETALK 5
     * }
     */
    public static int PF_APPLETALK() {
        return PF_APPLETALK;
    }
    private static final int PF_NETROM = (int)6L;
    /**
     * {@snippet lang=c :
     * #define PF_NETROM 6
     * }
     */
    public static int PF_NETROM() {
        return PF_NETROM;
    }
    private static final int PF_BRIDGE = (int)7L;
    /**
     * {@snippet lang=c :
     * #define PF_BRIDGE 7
     * }
     */
    public static int PF_BRIDGE() {
        return PF_BRIDGE;
    }
    private static final int PF_ATMPVC = (int)8L;
    /**
     * {@snippet lang=c :
     * #define PF_ATMPVC 8
     * }
     */
    public static int PF_ATMPVC() {
        return PF_ATMPVC;
    }
    private static final int PF_X25 = (int)9L;
    /**
     * {@snippet lang=c :
     * #define PF_X25 9
     * }
     */
    public static int PF_X25() {
        return PF_X25;
    }
    private static final int PF_INET6 = (int)10L;
    /**
     * {@snippet lang=c :
     * #define PF_INET6 10
     * }
     */
    public static int PF_INET6() {
        return PF_INET6;
    }
    private static final int PF_ROSE = (int)11L;
    /**
     * {@snippet lang=c :
     * #define PF_ROSE 11
     * }
     */
    public static int PF_ROSE() {
        return PF_ROSE;
    }
    private static final int PF_DECnet = (int)12L;
    /**
     * {@snippet lang=c :
     * #define PF_DECnet 12
     * }
     */
    public static int PF_DECnet() {
        return PF_DECnet;
    }
    private static final int PF_NETBEUI = (int)13L;
    /**
     * {@snippet lang=c :
     * #define PF_NETBEUI 13
     * }
     */
    public static int PF_NETBEUI() {
        return PF_NETBEUI;
    }
    private static final int PF_SECURITY = (int)14L;
    /**
     * {@snippet lang=c :
     * #define PF_SECURITY 14
     * }
     */
    public static int PF_SECURITY() {
        return PF_SECURITY;
    }
    private static final int PF_KEY = (int)15L;
    /**
     * {@snippet lang=c :
     * #define PF_KEY 15
     * }
     */
    public static int PF_KEY() {
        return PF_KEY;
    }
    private static final int PF_NETLINK = (int)16L;
    /**
     * {@snippet lang=c :
     * #define PF_NETLINK 16
     * }
     */
    public static int PF_NETLINK() {
        return PF_NETLINK;
    }
    private static final int PF_PACKET = (int)17L;
    /**
     * {@snippet lang=c :
     * #define PF_PACKET 17
     * }
     */
    public static int PF_PACKET() {
        return PF_PACKET;
    }
    private static final int PF_ASH = (int)18L;
    /**
     * {@snippet lang=c :
     * #define PF_ASH 18
     * }
     */
    public static int PF_ASH() {
        return PF_ASH;
    }
    private static final int PF_ECONET = (int)19L;
    /**
     * {@snippet lang=c :
     * #define PF_ECONET 19
     * }
     */
    public static int PF_ECONET() {
        return PF_ECONET;
    }
    private static final int PF_ATMSVC = (int)20L;
    /**
     * {@snippet lang=c :
     * #define PF_ATMSVC 20
     * }
     */
    public static int PF_ATMSVC() {
        return PF_ATMSVC;
    }
    private static final int PF_RDS = (int)21L;
    /**
     * {@snippet lang=c :
     * #define PF_RDS 21
     * }
     */
    public static int PF_RDS() {
        return PF_RDS;
    }
    private static final int PF_SNA = (int)22L;
    /**
     * {@snippet lang=c :
     * #define PF_SNA 22
     * }
     */
    public static int PF_SNA() {
        return PF_SNA;
    }
    private static final int PF_IRDA = (int)23L;
    /**
     * {@snippet lang=c :
     * #define PF_IRDA 23
     * }
     */
    public static int PF_IRDA() {
        return PF_IRDA;
    }
    private static final int PF_PPPOX = (int)24L;
    /**
     * {@snippet lang=c :
     * #define PF_PPPOX 24
     * }
     */
    public static int PF_PPPOX() {
        return PF_PPPOX;
    }
    private static final int PF_WANPIPE = (int)25L;
    /**
     * {@snippet lang=c :
     * #define PF_WANPIPE 25
     * }
     */
    public static int PF_WANPIPE() {
        return PF_WANPIPE;
    }
    private static final int PF_LLC = (int)26L;
    /**
     * {@snippet lang=c :
     * #define PF_LLC 26
     * }
     */
    public static int PF_LLC() {
        return PF_LLC;
    }
    private static final int PF_IB = (int)27L;
    /**
     * {@snippet lang=c :
     * #define PF_IB 27
     * }
     */
    public static int PF_IB() {
        return PF_IB;
    }
    private static final int PF_MPLS = (int)28L;
    /**
     * {@snippet lang=c :
     * #define PF_MPLS 28
     * }
     */
    public static int PF_MPLS() {
        return PF_MPLS;
    }
    private static final int PF_CAN = (int)29L;
    /**
     * {@snippet lang=c :
     * #define PF_CAN 29
     * }
     */
    public static int PF_CAN() {
        return PF_CAN;
    }
    private static final int PF_TIPC = (int)30L;
    /**
     * {@snippet lang=c :
     * #define PF_TIPC 30
     * }
     */
    public static int PF_TIPC() {
        return PF_TIPC;
    }
    private static final int PF_BLUETOOTH = (int)31L;
    /**
     * {@snippet lang=c :
     * #define PF_BLUETOOTH 31
     * }
     */
    public static int PF_BLUETOOTH() {
        return PF_BLUETOOTH;
    }
    private static final int PF_IUCV = (int)32L;
    /**
     * {@snippet lang=c :
     * #define PF_IUCV 32
     * }
     */
    public static int PF_IUCV() {
        return PF_IUCV;
    }
    private static final int PF_RXRPC = (int)33L;
    /**
     * {@snippet lang=c :
     * #define PF_RXRPC 33
     * }
     */
    public static int PF_RXRPC() {
        return PF_RXRPC;
    }
    private static final int PF_ISDN = (int)34L;
    /**
     * {@snippet lang=c :
     * #define PF_ISDN 34
     * }
     */
    public static int PF_ISDN() {
        return PF_ISDN;
    }
    private static final int PF_PHONET = (int)35L;
    /**
     * {@snippet lang=c :
     * #define PF_PHONET 35
     * }
     */
    public static int PF_PHONET() {
        return PF_PHONET;
    }
    private static final int PF_IEEE802154 = (int)36L;
    /**
     * {@snippet lang=c :
     * #define PF_IEEE802154 36
     * }
     */
    public static int PF_IEEE802154() {
        return PF_IEEE802154;
    }
    private static final int PF_CAIF = (int)37L;
    /**
     * {@snippet lang=c :
     * #define PF_CAIF 37
     * }
     */
    public static int PF_CAIF() {
        return PF_CAIF;
    }
    private static final int PF_ALG = (int)38L;
    /**
     * {@snippet lang=c :
     * #define PF_ALG 38
     * }
     */
    public static int PF_ALG() {
        return PF_ALG;
    }
    private static final int PF_NFC = (int)39L;
    /**
     * {@snippet lang=c :
     * #define PF_NFC 39
     * }
     */
    public static int PF_NFC() {
        return PF_NFC;
    }
    private static final int PF_VSOCK = (int)40L;
    /**
     * {@snippet lang=c :
     * #define PF_VSOCK 40
     * }
     */
    public static int PF_VSOCK() {
        return PF_VSOCK;
    }
    private static final int PF_KCM = (int)41L;
    /**
     * {@snippet lang=c :
     * #define PF_KCM 41
     * }
     */
    public static int PF_KCM() {
        return PF_KCM;
    }
    private static final int PF_QIPCRTR = (int)42L;
    /**
     * {@snippet lang=c :
     * #define PF_QIPCRTR 42
     * }
     */
    public static int PF_QIPCRTR() {
        return PF_QIPCRTR;
    }
    private static final int PF_SMC = (int)43L;
    /**
     * {@snippet lang=c :
     * #define PF_SMC 43
     * }
     */
    public static int PF_SMC() {
        return PF_SMC;
    }
    private static final int PF_XDP = (int)44L;
    /**
     * {@snippet lang=c :
     * #define PF_XDP 44
     * }
     */
    public static int PF_XDP() {
        return PF_XDP;
    }
    private static final int PF_MCTP = (int)45L;
    /**
     * {@snippet lang=c :
     * #define PF_MCTP 45
     * }
     */
    public static int PF_MCTP() {
        return PF_MCTP;
    }
    private static final int PF_MAX = (int)46L;
    /**
     * {@snippet lang=c :
     * #define PF_MAX 46
     * }
     */
    public static int PF_MAX() {
        return PF_MAX;
    }
    private static final int SOL_RAW = (int)255L;
    /**
     * {@snippet lang=c :
     * #define SOL_RAW 255
     * }
     */
    public static int SOL_RAW() {
        return SOL_RAW;
    }
    private static final int SOL_DECNET = (int)261L;
    /**
     * {@snippet lang=c :
     * #define SOL_DECNET 261
     * }
     */
    public static int SOL_DECNET() {
        return SOL_DECNET;
    }
    private static final int SOL_X25 = (int)262L;
    /**
     * {@snippet lang=c :
     * #define SOL_X25 262
     * }
     */
    public static int SOL_X25() {
        return SOL_X25;
    }
    private static final int SOL_PACKET = (int)263L;
    /**
     * {@snippet lang=c :
     * #define SOL_PACKET 263
     * }
     */
    public static int SOL_PACKET() {
        return SOL_PACKET;
    }
    private static final int SOL_ATM = (int)264L;
    /**
     * {@snippet lang=c :
     * #define SOL_ATM 264
     * }
     */
    public static int SOL_ATM() {
        return SOL_ATM;
    }
    private static final int SOL_AAL = (int)265L;
    /**
     * {@snippet lang=c :
     * #define SOL_AAL 265
     * }
     */
    public static int SOL_AAL() {
        return SOL_AAL;
    }
    private static final int SOL_IRDA = (int)266L;
    /**
     * {@snippet lang=c :
     * #define SOL_IRDA 266
     * }
     */
    public static int SOL_IRDA() {
        return SOL_IRDA;
    }
    private static final int SOL_NETBEUI = (int)267L;
    /**
     * {@snippet lang=c :
     * #define SOL_NETBEUI 267
     * }
     */
    public static int SOL_NETBEUI() {
        return SOL_NETBEUI;
    }
    private static final int SOL_LLC = (int)268L;
    /**
     * {@snippet lang=c :
     * #define SOL_LLC 268
     * }
     */
    public static int SOL_LLC() {
        return SOL_LLC;
    }
    private static final int SOL_DCCP = (int)269L;
    /**
     * {@snippet lang=c :
     * #define SOL_DCCP 269
     * }
     */
    public static int SOL_DCCP() {
        return SOL_DCCP;
    }
    private static final int SOL_NETLINK = (int)270L;
    /**
     * {@snippet lang=c :
     * #define SOL_NETLINK 270
     * }
     */
    public static int SOL_NETLINK() {
        return SOL_NETLINK;
    }
    private static final int SOL_TIPC = (int)271L;
    /**
     * {@snippet lang=c :
     * #define SOL_TIPC 271
     * }
     */
    public static int SOL_TIPC() {
        return SOL_TIPC;
    }
    private static final int SOL_RXRPC = (int)272L;
    /**
     * {@snippet lang=c :
     * #define SOL_RXRPC 272
     * }
     */
    public static int SOL_RXRPC() {
        return SOL_RXRPC;
    }
    private static final int SOL_PPPOL2TP = (int)273L;
    /**
     * {@snippet lang=c :
     * #define SOL_PPPOL2TP 273
     * }
     */
    public static int SOL_PPPOL2TP() {
        return SOL_PPPOL2TP;
    }
    private static final int SOL_BLUETOOTH = (int)274L;
    /**
     * {@snippet lang=c :
     * #define SOL_BLUETOOTH 274
     * }
     */
    public static int SOL_BLUETOOTH() {
        return SOL_BLUETOOTH;
    }
    private static final int SOL_PNPIPE = (int)275L;
    /**
     * {@snippet lang=c :
     * #define SOL_PNPIPE 275
     * }
     */
    public static int SOL_PNPIPE() {
        return SOL_PNPIPE;
    }
    private static final int SOL_RDS = (int)276L;
    /**
     * {@snippet lang=c :
     * #define SOL_RDS 276
     * }
     */
    public static int SOL_RDS() {
        return SOL_RDS;
    }
    private static final int SOL_IUCV = (int)277L;
    /**
     * {@snippet lang=c :
     * #define SOL_IUCV 277
     * }
     */
    public static int SOL_IUCV() {
        return SOL_IUCV;
    }
    private static final int SOL_CAIF = (int)278L;
    /**
     * {@snippet lang=c :
     * #define SOL_CAIF 278
     * }
     */
    public static int SOL_CAIF() {
        return SOL_CAIF;
    }
    private static final int SOL_ALG = (int)279L;
    /**
     * {@snippet lang=c :
     * #define SOL_ALG 279
     * }
     */
    public static int SOL_ALG() {
        return SOL_ALG;
    }
    private static final int SOL_NFC = (int)280L;
    /**
     * {@snippet lang=c :
     * #define SOL_NFC 280
     * }
     */
    public static int SOL_NFC() {
        return SOL_NFC;
    }
    private static final int SOL_KCM = (int)281L;
    /**
     * {@snippet lang=c :
     * #define SOL_KCM 281
     * }
     */
    public static int SOL_KCM() {
        return SOL_KCM;
    }
    private static final int SOL_TLS = (int)282L;
    /**
     * {@snippet lang=c :
     * #define SOL_TLS 282
     * }
     */
    public static int SOL_TLS() {
        return SOL_TLS;
    }
    private static final int SOL_XDP = (int)283L;
    /**
     * {@snippet lang=c :
     * #define SOL_XDP 283
     * }
     */
    public static int SOL_XDP() {
        return SOL_XDP;
    }
    private static final int SOMAXCONN = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define SOMAXCONN 4096
     * }
     */
    public static int SOMAXCONN() {
        return SOMAXCONN;
    }
    private static final int _BITS_SOCKADDR_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_SOCKADDR_H 1
     * }
     */
    public static int _BITS_SOCKADDR_H() {
        return _BITS_SOCKADDR_H;
    }
    private static final int _SS_SIZE = (int)128L;
    /**
     * {@snippet lang=c :
     * #define _SS_SIZE 128
     * }
     */
    public static int _SS_SIZE() {
        return _SS_SIZE;
    }
    private static final int __BITS_PER_LONG = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __BITS_PER_LONG 64
     * }
     */
    public static int __BITS_PER_LONG() {
        return __BITS_PER_LONG;
    }
    private static final int __BITS_PER_LONG_LONG = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __BITS_PER_LONG_LONG 64
     * }
     */
    public static int __BITS_PER_LONG_LONG() {
        return __BITS_PER_LONG_LONG;
    }
    private static final int FIOSETOWN = (int)35073L;
    /**
     * {@snippet lang=c :
     * #define FIOSETOWN 35073
     * }
     */
    public static int FIOSETOWN() {
        return FIOSETOWN;
    }
    private static final int SIOCSPGRP = (int)35074L;
    /**
     * {@snippet lang=c :
     * #define SIOCSPGRP 35074
     * }
     */
    public static int SIOCSPGRP() {
        return SIOCSPGRP;
    }
    private static final int FIOGETOWN = (int)35075L;
    /**
     * {@snippet lang=c :
     * #define FIOGETOWN 35075
     * }
     */
    public static int FIOGETOWN() {
        return FIOGETOWN;
    }
    private static final int SIOCGPGRP = (int)35076L;
    /**
     * {@snippet lang=c :
     * #define SIOCGPGRP 35076
     * }
     */
    public static int SIOCGPGRP() {
        return SIOCGPGRP;
    }
    private static final int SIOCATMARK = (int)35077L;
    /**
     * {@snippet lang=c :
     * #define SIOCATMARK 35077
     * }
     */
    public static int SIOCATMARK() {
        return SIOCATMARK;
    }
    private static final int SIOCGSTAMP_OLD = (int)35078L;
    /**
     * {@snippet lang=c :
     * #define SIOCGSTAMP_OLD 35078
     * }
     */
    public static int SIOCGSTAMP_OLD() {
        return SIOCGSTAMP_OLD;
    }
    private static final int SIOCGSTAMPNS_OLD = (int)35079L;
    /**
     * {@snippet lang=c :
     * #define SIOCGSTAMPNS_OLD 35079
     * }
     */
    public static int SIOCGSTAMPNS_OLD() {
        return SIOCGSTAMPNS_OLD;
    }
    private static final int SOL_SOCKET = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SOL_SOCKET 1
     * }
     */
    public static int SOL_SOCKET() {
        return SOL_SOCKET;
    }
    private static final int SO_DEBUG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SO_DEBUG 1
     * }
     */
    public static int SO_DEBUG() {
        return SO_DEBUG;
    }
    private static final int SO_REUSEADDR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SO_REUSEADDR 2
     * }
     */
    public static int SO_REUSEADDR() {
        return SO_REUSEADDR;
    }
    private static final int SO_TYPE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SO_TYPE 3
     * }
     */
    public static int SO_TYPE() {
        return SO_TYPE;
    }
    private static final int SO_ERROR = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SO_ERROR 4
     * }
     */
    public static int SO_ERROR() {
        return SO_ERROR;
    }
    private static final int SO_DONTROUTE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SO_DONTROUTE 5
     * }
     */
    public static int SO_DONTROUTE() {
        return SO_DONTROUTE;
    }
    private static final int SO_BROADCAST = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SO_BROADCAST 6
     * }
     */
    public static int SO_BROADCAST() {
        return SO_BROADCAST;
    }
    private static final int SO_SNDBUF = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SO_SNDBUF 7
     * }
     */
    public static int SO_SNDBUF() {
        return SO_SNDBUF;
    }
    private static final int SO_RCVBUF = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SO_RCVBUF 8
     * }
     */
    public static int SO_RCVBUF() {
        return SO_RCVBUF;
    }
    private static final int SO_SNDBUFFORCE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SO_SNDBUFFORCE 32
     * }
     */
    public static int SO_SNDBUFFORCE() {
        return SO_SNDBUFFORCE;
    }
    private static final int SO_RCVBUFFORCE = (int)33L;
    /**
     * {@snippet lang=c :
     * #define SO_RCVBUFFORCE 33
     * }
     */
    public static int SO_RCVBUFFORCE() {
        return SO_RCVBUFFORCE;
    }
    private static final int SO_KEEPALIVE = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SO_KEEPALIVE 9
     * }
     */
    public static int SO_KEEPALIVE() {
        return SO_KEEPALIVE;
    }
    private static final int SO_OOBINLINE = (int)10L;
    /**
     * {@snippet lang=c :
     * #define SO_OOBINLINE 10
     * }
     */
    public static int SO_OOBINLINE() {
        return SO_OOBINLINE;
    }
    private static final int SO_NO_CHECK = (int)11L;
    /**
     * {@snippet lang=c :
     * #define SO_NO_CHECK 11
     * }
     */
    public static int SO_NO_CHECK() {
        return SO_NO_CHECK;
    }
    private static final int SO_PRIORITY = (int)12L;
    /**
     * {@snippet lang=c :
     * #define SO_PRIORITY 12
     * }
     */
    public static int SO_PRIORITY() {
        return SO_PRIORITY;
    }
    private static final int SO_LINGER = (int)13L;
    /**
     * {@snippet lang=c :
     * #define SO_LINGER 13
     * }
     */
    public static int SO_LINGER() {
        return SO_LINGER;
    }
    private static final int SO_BSDCOMPAT = (int)14L;
    /**
     * {@snippet lang=c :
     * #define SO_BSDCOMPAT 14
     * }
     */
    public static int SO_BSDCOMPAT() {
        return SO_BSDCOMPAT;
    }
    private static final int SO_REUSEPORT = (int)15L;
    /**
     * {@snippet lang=c :
     * #define SO_REUSEPORT 15
     * }
     */
    public static int SO_REUSEPORT() {
        return SO_REUSEPORT;
    }
    private static final int SO_PASSCRED = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SO_PASSCRED 16
     * }
     */
    public static int SO_PASSCRED() {
        return SO_PASSCRED;
    }
    private static final int SO_PEERCRED = (int)17L;
    /**
     * {@snippet lang=c :
     * #define SO_PEERCRED 17
     * }
     */
    public static int SO_PEERCRED() {
        return SO_PEERCRED;
    }
    private static final int SO_RCVLOWAT = (int)18L;
    /**
     * {@snippet lang=c :
     * #define SO_RCVLOWAT 18
     * }
     */
    public static int SO_RCVLOWAT() {
        return SO_RCVLOWAT;
    }
    private static final int SO_SNDLOWAT = (int)19L;
    /**
     * {@snippet lang=c :
     * #define SO_SNDLOWAT 19
     * }
     */
    public static int SO_SNDLOWAT() {
        return SO_SNDLOWAT;
    }
    private static final int SO_RCVTIMEO_OLD = (int)20L;
    /**
     * {@snippet lang=c :
     * #define SO_RCVTIMEO_OLD 20
     * }
     */
    public static int SO_RCVTIMEO_OLD() {
        return SO_RCVTIMEO_OLD;
    }
    private static final int SO_SNDTIMEO_OLD = (int)21L;
    /**
     * {@snippet lang=c :
     * #define SO_SNDTIMEO_OLD 21
     * }
     */
    public static int SO_SNDTIMEO_OLD() {
        return SO_SNDTIMEO_OLD;
    }
    private static final int SO_SECURITY_AUTHENTICATION = (int)22L;
    /**
     * {@snippet lang=c :
     * #define SO_SECURITY_AUTHENTICATION 22
     * }
     */
    public static int SO_SECURITY_AUTHENTICATION() {
        return SO_SECURITY_AUTHENTICATION;
    }
    private static final int SO_SECURITY_ENCRYPTION_TRANSPORT = (int)23L;
    /**
     * {@snippet lang=c :
     * #define SO_SECURITY_ENCRYPTION_TRANSPORT 23
     * }
     */
    public static int SO_SECURITY_ENCRYPTION_TRANSPORT() {
        return SO_SECURITY_ENCRYPTION_TRANSPORT;
    }
    private static final int SO_SECURITY_ENCRYPTION_NETWORK = (int)24L;
    /**
     * {@snippet lang=c :
     * #define SO_SECURITY_ENCRYPTION_NETWORK 24
     * }
     */
    public static int SO_SECURITY_ENCRYPTION_NETWORK() {
        return SO_SECURITY_ENCRYPTION_NETWORK;
    }
    private static final int SO_BINDTODEVICE = (int)25L;
    /**
     * {@snippet lang=c :
     * #define SO_BINDTODEVICE 25
     * }
     */
    public static int SO_BINDTODEVICE() {
        return SO_BINDTODEVICE;
    }
    private static final int SO_ATTACH_FILTER = (int)26L;
    /**
     * {@snippet lang=c :
     * #define SO_ATTACH_FILTER 26
     * }
     */
    public static int SO_ATTACH_FILTER() {
        return SO_ATTACH_FILTER;
    }
    private static final int SO_DETACH_FILTER = (int)27L;
    /**
     * {@snippet lang=c :
     * #define SO_DETACH_FILTER 27
     * }
     */
    public static int SO_DETACH_FILTER() {
        return SO_DETACH_FILTER;
    }
    private static final int SO_PEERNAME = (int)28L;
    /**
     * {@snippet lang=c :
     * #define SO_PEERNAME 28
     * }
     */
    public static int SO_PEERNAME() {
        return SO_PEERNAME;
    }
    private static final int SO_ACCEPTCONN = (int)30L;
    /**
     * {@snippet lang=c :
     * #define SO_ACCEPTCONN 30
     * }
     */
    public static int SO_ACCEPTCONN() {
        return SO_ACCEPTCONN;
    }
    private static final int SO_PEERSEC = (int)31L;
    /**
     * {@snippet lang=c :
     * #define SO_PEERSEC 31
     * }
     */
    public static int SO_PEERSEC() {
        return SO_PEERSEC;
    }
    private static final int SO_PASSSEC = (int)34L;
    /**
     * {@snippet lang=c :
     * #define SO_PASSSEC 34
     * }
     */
    public static int SO_PASSSEC() {
        return SO_PASSSEC;
    }
    private static final int SO_MARK = (int)36L;
    /**
     * {@snippet lang=c :
     * #define SO_MARK 36
     * }
     */
    public static int SO_MARK() {
        return SO_MARK;
    }
    private static final int SO_PROTOCOL = (int)38L;
    /**
     * {@snippet lang=c :
     * #define SO_PROTOCOL 38
     * }
     */
    public static int SO_PROTOCOL() {
        return SO_PROTOCOL;
    }
    private static final int SO_DOMAIN = (int)39L;
    /**
     * {@snippet lang=c :
     * #define SO_DOMAIN 39
     * }
     */
    public static int SO_DOMAIN() {
        return SO_DOMAIN;
    }
    private static final int SO_RXQ_OVFL = (int)40L;
    /**
     * {@snippet lang=c :
     * #define SO_RXQ_OVFL 40
     * }
     */
    public static int SO_RXQ_OVFL() {
        return SO_RXQ_OVFL;
    }
    private static final int SO_WIFI_STATUS = (int)41L;
    /**
     * {@snippet lang=c :
     * #define SO_WIFI_STATUS 41
     * }
     */
    public static int SO_WIFI_STATUS() {
        return SO_WIFI_STATUS;
    }
    private static final int SO_PEEK_OFF = (int)42L;
    /**
     * {@snippet lang=c :
     * #define SO_PEEK_OFF 42
     * }
     */
    public static int SO_PEEK_OFF() {
        return SO_PEEK_OFF;
    }
    private static final int SO_NOFCS = (int)43L;
    /**
     * {@snippet lang=c :
     * #define SO_NOFCS 43
     * }
     */
    public static int SO_NOFCS() {
        return SO_NOFCS;
    }
    private static final int SO_LOCK_FILTER = (int)44L;
    /**
     * {@snippet lang=c :
     * #define SO_LOCK_FILTER 44
     * }
     */
    public static int SO_LOCK_FILTER() {
        return SO_LOCK_FILTER;
    }
    private static final int SO_SELECT_ERR_QUEUE = (int)45L;
    /**
     * {@snippet lang=c :
     * #define SO_SELECT_ERR_QUEUE 45
     * }
     */
    public static int SO_SELECT_ERR_QUEUE() {
        return SO_SELECT_ERR_QUEUE;
    }
    private static final int SO_BUSY_POLL = (int)46L;
    /**
     * {@snippet lang=c :
     * #define SO_BUSY_POLL 46
     * }
     */
    public static int SO_BUSY_POLL() {
        return SO_BUSY_POLL;
    }
    private static final int SO_MAX_PACING_RATE = (int)47L;
    /**
     * {@snippet lang=c :
     * #define SO_MAX_PACING_RATE 47
     * }
     */
    public static int SO_MAX_PACING_RATE() {
        return SO_MAX_PACING_RATE;
    }
    private static final int SO_BPF_EXTENSIONS = (int)48L;
    /**
     * {@snippet lang=c :
     * #define SO_BPF_EXTENSIONS 48
     * }
     */
    public static int SO_BPF_EXTENSIONS() {
        return SO_BPF_EXTENSIONS;
    }
    private static final int SO_INCOMING_CPU = (int)49L;
    /**
     * {@snippet lang=c :
     * #define SO_INCOMING_CPU 49
     * }
     */
    public static int SO_INCOMING_CPU() {
        return SO_INCOMING_CPU;
    }
    private static final int SO_ATTACH_BPF = (int)50L;
    /**
     * {@snippet lang=c :
     * #define SO_ATTACH_BPF 50
     * }
     */
    public static int SO_ATTACH_BPF() {
        return SO_ATTACH_BPF;
    }
    private static final int SO_ATTACH_REUSEPORT_CBPF = (int)51L;
    /**
     * {@snippet lang=c :
     * #define SO_ATTACH_REUSEPORT_CBPF 51
     * }
     */
    public static int SO_ATTACH_REUSEPORT_CBPF() {
        return SO_ATTACH_REUSEPORT_CBPF;
    }
    private static final int SO_ATTACH_REUSEPORT_EBPF = (int)52L;
    /**
     * {@snippet lang=c :
     * #define SO_ATTACH_REUSEPORT_EBPF 52
     * }
     */
    public static int SO_ATTACH_REUSEPORT_EBPF() {
        return SO_ATTACH_REUSEPORT_EBPF;
    }
    private static final int SO_CNX_ADVICE = (int)53L;
    /**
     * {@snippet lang=c :
     * #define SO_CNX_ADVICE 53
     * }
     */
    public static int SO_CNX_ADVICE() {
        return SO_CNX_ADVICE;
    }
    private static final int SCM_TIMESTAMPING_OPT_STATS = (int)54L;
    /**
     * {@snippet lang=c :
     * #define SCM_TIMESTAMPING_OPT_STATS 54
     * }
     */
    public static int SCM_TIMESTAMPING_OPT_STATS() {
        return SCM_TIMESTAMPING_OPT_STATS;
    }
    private static final int SO_MEMINFO = (int)55L;
    /**
     * {@snippet lang=c :
     * #define SO_MEMINFO 55
     * }
     */
    public static int SO_MEMINFO() {
        return SO_MEMINFO;
    }
    private static final int SO_INCOMING_NAPI_ID = (int)56L;
    /**
     * {@snippet lang=c :
     * #define SO_INCOMING_NAPI_ID 56
     * }
     */
    public static int SO_INCOMING_NAPI_ID() {
        return SO_INCOMING_NAPI_ID;
    }
    private static final int SO_COOKIE = (int)57L;
    /**
     * {@snippet lang=c :
     * #define SO_COOKIE 57
     * }
     */
    public static int SO_COOKIE() {
        return SO_COOKIE;
    }
    private static final int SCM_TIMESTAMPING_PKTINFO = (int)58L;
    /**
     * {@snippet lang=c :
     * #define SCM_TIMESTAMPING_PKTINFO 58
     * }
     */
    public static int SCM_TIMESTAMPING_PKTINFO() {
        return SCM_TIMESTAMPING_PKTINFO;
    }
    private static final int SO_PEERGROUPS = (int)59L;
    /**
     * {@snippet lang=c :
     * #define SO_PEERGROUPS 59
     * }
     */
    public static int SO_PEERGROUPS() {
        return SO_PEERGROUPS;
    }
    private static final int SO_ZEROCOPY = (int)60L;
    /**
     * {@snippet lang=c :
     * #define SO_ZEROCOPY 60
     * }
     */
    public static int SO_ZEROCOPY() {
        return SO_ZEROCOPY;
    }
    private static final int SO_TXTIME = (int)61L;
    /**
     * {@snippet lang=c :
     * #define SO_TXTIME 61
     * }
     */
    public static int SO_TXTIME() {
        return SO_TXTIME;
    }
    private static final int SO_BINDTOIFINDEX = (int)62L;
    /**
     * {@snippet lang=c :
     * #define SO_BINDTOIFINDEX 62
     * }
     */
    public static int SO_BINDTOIFINDEX() {
        return SO_BINDTOIFINDEX;
    }
    private static final int SO_TIMESTAMP_OLD = (int)29L;
    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMP_OLD 29
     * }
     */
    public static int SO_TIMESTAMP_OLD() {
        return SO_TIMESTAMP_OLD;
    }
    private static final int SO_TIMESTAMPNS_OLD = (int)35L;
    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMPNS_OLD 35
     * }
     */
    public static int SO_TIMESTAMPNS_OLD() {
        return SO_TIMESTAMPNS_OLD;
    }
    private static final int SO_TIMESTAMPING_OLD = (int)37L;
    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMPING_OLD 37
     * }
     */
    public static int SO_TIMESTAMPING_OLD() {
        return SO_TIMESTAMPING_OLD;
    }
    private static final int SO_TIMESTAMP_NEW = (int)63L;
    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMP_NEW 63
     * }
     */
    public static int SO_TIMESTAMP_NEW() {
        return SO_TIMESTAMP_NEW;
    }
    private static final int SO_TIMESTAMPNS_NEW = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMPNS_NEW 64
     * }
     */
    public static int SO_TIMESTAMPNS_NEW() {
        return SO_TIMESTAMPNS_NEW;
    }
    private static final int SO_TIMESTAMPING_NEW = (int)65L;
    /**
     * {@snippet lang=c :
     * #define SO_TIMESTAMPING_NEW 65
     * }
     */
    public static int SO_TIMESTAMPING_NEW() {
        return SO_TIMESTAMPING_NEW;
    }
    private static final int SO_RCVTIMEO_NEW = (int)66L;
    /**
     * {@snippet lang=c :
     * #define SO_RCVTIMEO_NEW 66
     * }
     */
    public static int SO_RCVTIMEO_NEW() {
        return SO_RCVTIMEO_NEW;
    }
    private static final int SO_SNDTIMEO_NEW = (int)67L;
    /**
     * {@snippet lang=c :
     * #define SO_SNDTIMEO_NEW 67
     * }
     */
    public static int SO_SNDTIMEO_NEW() {
        return SO_SNDTIMEO_NEW;
    }
    private static final int SO_DETACH_REUSEPORT_BPF = (int)68L;
    /**
     * {@snippet lang=c :
     * #define SO_DETACH_REUSEPORT_BPF 68
     * }
     */
    public static int SO_DETACH_REUSEPORT_BPF() {
        return SO_DETACH_REUSEPORT_BPF;
    }
    private static final int SO_PREFER_BUSY_POLL = (int)69L;
    /**
     * {@snippet lang=c :
     * #define SO_PREFER_BUSY_POLL 69
     * }
     */
    public static int SO_PREFER_BUSY_POLL() {
        return SO_PREFER_BUSY_POLL;
    }
    private static final int SO_BUSY_POLL_BUDGET = (int)70L;
    /**
     * {@snippet lang=c :
     * #define SO_BUSY_POLL_BUDGET 70
     * }
     */
    public static int SO_BUSY_POLL_BUDGET() {
        return SO_BUSY_POLL_BUDGET;
    }
    private static final int SO_NETNS_COOKIE = (int)71L;
    /**
     * {@snippet lang=c :
     * #define SO_NETNS_COOKIE 71
     * }
     */
    public static int SO_NETNS_COOKIE() {
        return SO_NETNS_COOKIE;
    }
    private static final int SO_BUF_LOCK = (int)72L;
    /**
     * {@snippet lang=c :
     * #define SO_BUF_LOCK 72
     * }
     */
    public static int SO_BUF_LOCK() {
        return SO_BUF_LOCK;
    }
    private static final int SO_RESERVE_MEM = (int)73L;
    /**
     * {@snippet lang=c :
     * #define SO_RESERVE_MEM 73
     * }
     */
    public static int SO_RESERVE_MEM() {
        return SO_RESERVE_MEM;
    }
    private static final int SO_TXREHASH = (int)74L;
    /**
     * {@snippet lang=c :
     * #define SO_TXREHASH 74
     * }
     */
    public static int SO_TXREHASH() {
        return SO_TXREHASH;
    }
    private static final int SO_RCVMARK = (int)75L;
    /**
     * {@snippet lang=c :
     * #define SO_RCVMARK 75
     * }
     */
    public static int SO_RCVMARK() {
        return SO_RCVMARK;
    }
    private static final int SO_PASSPIDFD = (int)76L;
    /**
     * {@snippet lang=c :
     * #define SO_PASSPIDFD 76
     * }
     */
    public static int SO_PASSPIDFD() {
        return SO_PASSPIDFD;
    }
    private static final int SO_PEERPIDFD = (int)77L;
    /**
     * {@snippet lang=c :
     * #define SO_PEERPIDFD 77
     * }
     */
    public static int SO_PEERPIDFD() {
        return SO_PEERPIDFD;
    }
    private static final int __osockaddr_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __osockaddr_defined 1
     * }
     */
    public static int __osockaddr_defined() {
        return __osockaddr_defined;
    }
    private static final int _SYS_STAT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_STAT_H 1
     * }
     */
    public static int _SYS_STAT_H() {
        return _SYS_STAT_H;
    }
    private static final int _BITS_STAT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STAT_H 1
     * }
     */
    public static int _BITS_STAT_H() {
        return _BITS_STAT_H;
    }
    private static final int _BITS_STRUCT_STAT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STRUCT_STAT_H 1
     * }
     */
    public static int _BITS_STRUCT_STAT_H() {
        return _BITS_STRUCT_STAT_H;
    }
    private static final int __S_IFMT = (int)61440L;
    /**
     * {@snippet lang=c :
     * #define __S_IFMT 61440
     * }
     */
    public static int __S_IFMT() {
        return __S_IFMT;
    }
    private static final int __S_IFDIR = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define __S_IFDIR 16384
     * }
     */
    public static int __S_IFDIR() {
        return __S_IFDIR;
    }
    private static final int __S_IFCHR = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define __S_IFCHR 8192
     * }
     */
    public static int __S_IFCHR() {
        return __S_IFCHR;
    }
    private static final int __S_IFBLK = (int)24576L;
    /**
     * {@snippet lang=c :
     * #define __S_IFBLK 24576
     * }
     */
    public static int __S_IFBLK() {
        return __S_IFBLK;
    }
    private static final int __S_IFREG = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define __S_IFREG 32768
     * }
     */
    public static int __S_IFREG() {
        return __S_IFREG;
    }
    private static final int __S_IFIFO = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define __S_IFIFO 4096
     * }
     */
    public static int __S_IFIFO() {
        return __S_IFIFO;
    }
    private static final int __S_IFLNK = (int)40960L;
    /**
     * {@snippet lang=c :
     * #define __S_IFLNK 40960
     * }
     */
    public static int __S_IFLNK() {
        return __S_IFLNK;
    }
    private static final int __S_IFSOCK = (int)49152L;
    /**
     * {@snippet lang=c :
     * #define __S_IFSOCK 49152
     * }
     */
    public static int __S_IFSOCK() {
        return __S_IFSOCK;
    }
    private static final int __S_ISUID = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define __S_ISUID 2048
     * }
     */
    public static int __S_ISUID() {
        return __S_ISUID;
    }
    private static final int __S_ISGID = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __S_ISGID 1024
     * }
     */
    public static int __S_ISGID() {
        return __S_ISGID;
    }
    private static final int __S_ISVTX = (int)512L;
    /**
     * {@snippet lang=c :
     * #define __S_ISVTX 512
     * }
     */
    public static int __S_ISVTX() {
        return __S_ISVTX;
    }
    private static final int __S_IREAD = (int)256L;
    /**
     * {@snippet lang=c :
     * #define __S_IREAD 256
     * }
     */
    public static int __S_IREAD() {
        return __S_IREAD;
    }
    private static final int __S_IWRITE = (int)128L;
    /**
     * {@snippet lang=c :
     * #define __S_IWRITE 128
     * }
     */
    public static int __S_IWRITE() {
        return __S_IWRITE;
    }
    private static final int __S_IEXEC = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __S_IEXEC 64
     * }
     */
    public static int __S_IEXEC() {
        return __S_IEXEC;
    }
    private static final int S_BLKSIZE = (int)512L;
    /**
     * {@snippet lang=c :
     * #define S_BLKSIZE 512
     * }
     */
    public static int S_BLKSIZE() {
        return S_BLKSIZE;
    }
    private static final int _SYS_UIO_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_UIO_H 1
     * }
     */
    public static int _SYS_UIO_H() {
        return _SYS_UIO_H;
    }
    private static final int _BITS_UIO_LIM_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_UIO_LIM_H 1
     * }
     */
    public static int _BITS_UIO_LIM_H() {
        return _BITS_UIO_LIM_H;
    }
    private static final int __IOV_MAX = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __IOV_MAX 1024
     * }
     */
    public static int __IOV_MAX() {
        return __IOV_MAX;
    }
    private static final int _ERRNO_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ERRNO_H 1
     * }
     */
    public static int _ERRNO_H() {
        return _ERRNO_H;
    }
    private static final int _BITS_ERRNO_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_ERRNO_H 1
     * }
     */
    public static int _BITS_ERRNO_H() {
        return _BITS_ERRNO_H;
    }
    private static final int EPERM = (int)1L;
    /**
     * {@snippet lang=c :
     * #define EPERM 1
     * }
     */
    public static int EPERM() {
        return EPERM;
    }
    private static final int ENOENT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ENOENT 2
     * }
     */
    public static int ENOENT() {
        return ENOENT;
    }
    private static final int ESRCH = (int)3L;
    /**
     * {@snippet lang=c :
     * #define ESRCH 3
     * }
     */
    public static int ESRCH() {
        return ESRCH;
    }
    private static final int EINTR = (int)4L;
    /**
     * {@snippet lang=c :
     * #define EINTR 4
     * }
     */
    public static int EINTR() {
        return EINTR;
    }
    private static final int EIO = (int)5L;
    /**
     * {@snippet lang=c :
     * #define EIO 5
     * }
     */
    public static int EIO() {
        return EIO;
    }
    private static final int ENXIO = (int)6L;
    /**
     * {@snippet lang=c :
     * #define ENXIO 6
     * }
     */
    public static int ENXIO() {
        return ENXIO;
    }
    private static final int E2BIG = (int)7L;
    /**
     * {@snippet lang=c :
     * #define E2BIG 7
     * }
     */
    public static int E2BIG() {
        return E2BIG;
    }
    private static final int ENOEXEC = (int)8L;
    /**
     * {@snippet lang=c :
     * #define ENOEXEC 8
     * }
     */
    public static int ENOEXEC() {
        return ENOEXEC;
    }
    private static final int EBADF = (int)9L;
    /**
     * {@snippet lang=c :
     * #define EBADF 9
     * }
     */
    public static int EBADF() {
        return EBADF;
    }
    private static final int ECHILD = (int)10L;
    /**
     * {@snippet lang=c :
     * #define ECHILD 10
     * }
     */
    public static int ECHILD() {
        return ECHILD;
    }
    private static final int EAGAIN = (int)11L;
    /**
     * {@snippet lang=c :
     * #define EAGAIN 11
     * }
     */
    public static int EAGAIN() {
        return EAGAIN;
    }
    private static final int ENOMEM = (int)12L;
    /**
     * {@snippet lang=c :
     * #define ENOMEM 12
     * }
     */
    public static int ENOMEM() {
        return ENOMEM;
    }
    private static final int EACCES = (int)13L;
    /**
     * {@snippet lang=c :
     * #define EACCES 13
     * }
     */
    public static int EACCES() {
        return EACCES;
    }
    private static final int EFAULT = (int)14L;
    /**
     * {@snippet lang=c :
     * #define EFAULT 14
     * }
     */
    public static int EFAULT() {
        return EFAULT;
    }
    private static final int ENOTBLK = (int)15L;
    /**
     * {@snippet lang=c :
     * #define ENOTBLK 15
     * }
     */
    public static int ENOTBLK() {
        return ENOTBLK;
    }
    private static final int EBUSY = (int)16L;
    /**
     * {@snippet lang=c :
     * #define EBUSY 16
     * }
     */
    public static int EBUSY() {
        return EBUSY;
    }
    private static final int EEXIST = (int)17L;
    /**
     * {@snippet lang=c :
     * #define EEXIST 17
     * }
     */
    public static int EEXIST() {
        return EEXIST;
    }
    private static final int EXDEV = (int)18L;
    /**
     * {@snippet lang=c :
     * #define EXDEV 18
     * }
     */
    public static int EXDEV() {
        return EXDEV;
    }
    private static final int ENODEV = (int)19L;
    /**
     * {@snippet lang=c :
     * #define ENODEV 19
     * }
     */
    public static int ENODEV() {
        return ENODEV;
    }
    private static final int ENOTDIR = (int)20L;
    /**
     * {@snippet lang=c :
     * #define ENOTDIR 20
     * }
     */
    public static int ENOTDIR() {
        return ENOTDIR;
    }
    private static final int EISDIR = (int)21L;
    /**
     * {@snippet lang=c :
     * #define EISDIR 21
     * }
     */
    public static int EISDIR() {
        return EISDIR;
    }
    private static final int EINVAL = (int)22L;
    /**
     * {@snippet lang=c :
     * #define EINVAL 22
     * }
     */
    public static int EINVAL() {
        return EINVAL;
    }
    private static final int ENFILE = (int)23L;
    /**
     * {@snippet lang=c :
     * #define ENFILE 23
     * }
     */
    public static int ENFILE() {
        return ENFILE;
    }
    private static final int EMFILE = (int)24L;
    /**
     * {@snippet lang=c :
     * #define EMFILE 24
     * }
     */
    public static int EMFILE() {
        return EMFILE;
    }
    private static final int ENOTTY = (int)25L;
    /**
     * {@snippet lang=c :
     * #define ENOTTY 25
     * }
     */
    public static int ENOTTY() {
        return ENOTTY;
    }
    private static final int ETXTBSY = (int)26L;
    /**
     * {@snippet lang=c :
     * #define ETXTBSY 26
     * }
     */
    public static int ETXTBSY() {
        return ETXTBSY;
    }
    private static final int EFBIG = (int)27L;
    /**
     * {@snippet lang=c :
     * #define EFBIG 27
     * }
     */
    public static int EFBIG() {
        return EFBIG;
    }
    private static final int ENOSPC = (int)28L;
    /**
     * {@snippet lang=c :
     * #define ENOSPC 28
     * }
     */
    public static int ENOSPC() {
        return ENOSPC;
    }
    private static final int ESPIPE = (int)29L;
    /**
     * {@snippet lang=c :
     * #define ESPIPE 29
     * }
     */
    public static int ESPIPE() {
        return ESPIPE;
    }
    private static final int EROFS = (int)30L;
    /**
     * {@snippet lang=c :
     * #define EROFS 30
     * }
     */
    public static int EROFS() {
        return EROFS;
    }
    private static final int EMLINK = (int)31L;
    /**
     * {@snippet lang=c :
     * #define EMLINK 31
     * }
     */
    public static int EMLINK() {
        return EMLINK;
    }
    private static final int EPIPE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define EPIPE 32
     * }
     */
    public static int EPIPE() {
        return EPIPE;
    }
    private static final int EDOM = (int)33L;
    /**
     * {@snippet lang=c :
     * #define EDOM 33
     * }
     */
    public static int EDOM() {
        return EDOM;
    }
    private static final int ERANGE = (int)34L;
    /**
     * {@snippet lang=c :
     * #define ERANGE 34
     * }
     */
    public static int ERANGE() {
        return ERANGE;
    }
    private static final int EDEADLK = (int)35L;
    /**
     * {@snippet lang=c :
     * #define EDEADLK 35
     * }
     */
    public static int EDEADLK() {
        return EDEADLK;
    }
    private static final int ENAMETOOLONG = (int)36L;
    /**
     * {@snippet lang=c :
     * #define ENAMETOOLONG 36
     * }
     */
    public static int ENAMETOOLONG() {
        return ENAMETOOLONG;
    }
    private static final int ENOLCK = (int)37L;
    /**
     * {@snippet lang=c :
     * #define ENOLCK 37
     * }
     */
    public static int ENOLCK() {
        return ENOLCK;
    }
    private static final int ENOSYS = (int)38L;
    /**
     * {@snippet lang=c :
     * #define ENOSYS 38
     * }
     */
    public static int ENOSYS() {
        return ENOSYS;
    }
    private static final int ENOTEMPTY = (int)39L;
    /**
     * {@snippet lang=c :
     * #define ENOTEMPTY 39
     * }
     */
    public static int ENOTEMPTY() {
        return ENOTEMPTY;
    }
    private static final int ELOOP = (int)40L;
    /**
     * {@snippet lang=c :
     * #define ELOOP 40
     * }
     */
    public static int ELOOP() {
        return ELOOP;
    }
    private static final int ENOMSG = (int)42L;
    /**
     * {@snippet lang=c :
     * #define ENOMSG 42
     * }
     */
    public static int ENOMSG() {
        return ENOMSG;
    }
    private static final int EIDRM = (int)43L;
    /**
     * {@snippet lang=c :
     * #define EIDRM 43
     * }
     */
    public static int EIDRM() {
        return EIDRM;
    }
    private static final int ECHRNG = (int)44L;
    /**
     * {@snippet lang=c :
     * #define ECHRNG 44
     * }
     */
    public static int ECHRNG() {
        return ECHRNG;
    }
    private static final int EL2NSYNC = (int)45L;
    /**
     * {@snippet lang=c :
     * #define EL2NSYNC 45
     * }
     */
    public static int EL2NSYNC() {
        return EL2NSYNC;
    }
    private static final int EL3HLT = (int)46L;
    /**
     * {@snippet lang=c :
     * #define EL3HLT 46
     * }
     */
    public static int EL3HLT() {
        return EL3HLT;
    }
    private static final int EL3RST = (int)47L;
    /**
     * {@snippet lang=c :
     * #define EL3RST 47
     * }
     */
    public static int EL3RST() {
        return EL3RST;
    }
    private static final int ELNRNG = (int)48L;
    /**
     * {@snippet lang=c :
     * #define ELNRNG 48
     * }
     */
    public static int ELNRNG() {
        return ELNRNG;
    }
    private static final int EUNATCH = (int)49L;
    /**
     * {@snippet lang=c :
     * #define EUNATCH 49
     * }
     */
    public static int EUNATCH() {
        return EUNATCH;
    }
    private static final int ENOCSI = (int)50L;
    /**
     * {@snippet lang=c :
     * #define ENOCSI 50
     * }
     */
    public static int ENOCSI() {
        return ENOCSI;
    }
    private static final int EL2HLT = (int)51L;
    /**
     * {@snippet lang=c :
     * #define EL2HLT 51
     * }
     */
    public static int EL2HLT() {
        return EL2HLT;
    }
    private static final int EBADE = (int)52L;
    /**
     * {@snippet lang=c :
     * #define EBADE 52
     * }
     */
    public static int EBADE() {
        return EBADE;
    }
    private static final int EBADR = (int)53L;
    /**
     * {@snippet lang=c :
     * #define EBADR 53
     * }
     */
    public static int EBADR() {
        return EBADR;
    }
    private static final int EXFULL = (int)54L;
    /**
     * {@snippet lang=c :
     * #define EXFULL 54
     * }
     */
    public static int EXFULL() {
        return EXFULL;
    }
    private static final int ENOANO = (int)55L;
    /**
     * {@snippet lang=c :
     * #define ENOANO 55
     * }
     */
    public static int ENOANO() {
        return ENOANO;
    }
    private static final int EBADRQC = (int)56L;
    /**
     * {@snippet lang=c :
     * #define EBADRQC 56
     * }
     */
    public static int EBADRQC() {
        return EBADRQC;
    }
    private static final int EBADSLT = (int)57L;
    /**
     * {@snippet lang=c :
     * #define EBADSLT 57
     * }
     */
    public static int EBADSLT() {
        return EBADSLT;
    }
    private static final int EBFONT = (int)59L;
    /**
     * {@snippet lang=c :
     * #define EBFONT 59
     * }
     */
    public static int EBFONT() {
        return EBFONT;
    }
    private static final int ENOSTR = (int)60L;
    /**
     * {@snippet lang=c :
     * #define ENOSTR 60
     * }
     */
    public static int ENOSTR() {
        return ENOSTR;
    }
    private static final int ENODATA = (int)61L;
    /**
     * {@snippet lang=c :
     * #define ENODATA 61
     * }
     */
    public static int ENODATA() {
        return ENODATA;
    }
    private static final int ETIME = (int)62L;
    /**
     * {@snippet lang=c :
     * #define ETIME 62
     * }
     */
    public static int ETIME() {
        return ETIME;
    }
    private static final int ENOSR = (int)63L;
    /**
     * {@snippet lang=c :
     * #define ENOSR 63
     * }
     */
    public static int ENOSR() {
        return ENOSR;
    }
    private static final int ENONET = (int)64L;
    /**
     * {@snippet lang=c :
     * #define ENONET 64
     * }
     */
    public static int ENONET() {
        return ENONET;
    }
    private static final int ENOPKG = (int)65L;
    /**
     * {@snippet lang=c :
     * #define ENOPKG 65
     * }
     */
    public static int ENOPKG() {
        return ENOPKG;
    }
    private static final int EREMOTE = (int)66L;
    /**
     * {@snippet lang=c :
     * #define EREMOTE 66
     * }
     */
    public static int EREMOTE() {
        return EREMOTE;
    }
    private static final int ENOLINK = (int)67L;
    /**
     * {@snippet lang=c :
     * #define ENOLINK 67
     * }
     */
    public static int ENOLINK() {
        return ENOLINK;
    }
    private static final int EADV = (int)68L;
    /**
     * {@snippet lang=c :
     * #define EADV 68
     * }
     */
    public static int EADV() {
        return EADV;
    }
    private static final int ESRMNT = (int)69L;
    /**
     * {@snippet lang=c :
     * #define ESRMNT 69
     * }
     */
    public static int ESRMNT() {
        return ESRMNT;
    }
    private static final int ECOMM = (int)70L;
    /**
     * {@snippet lang=c :
     * #define ECOMM 70
     * }
     */
    public static int ECOMM() {
        return ECOMM;
    }
    private static final int EPROTO = (int)71L;
    /**
     * {@snippet lang=c :
     * #define EPROTO 71
     * }
     */
    public static int EPROTO() {
        return EPROTO;
    }
    private static final int EMULTIHOP = (int)72L;
    /**
     * {@snippet lang=c :
     * #define EMULTIHOP 72
     * }
     */
    public static int EMULTIHOP() {
        return EMULTIHOP;
    }
    private static final int EDOTDOT = (int)73L;
    /**
     * {@snippet lang=c :
     * #define EDOTDOT 73
     * }
     */
    public static int EDOTDOT() {
        return EDOTDOT;
    }
    private static final int EBADMSG = (int)74L;
    /**
     * {@snippet lang=c :
     * #define EBADMSG 74
     * }
     */
    public static int EBADMSG() {
        return EBADMSG;
    }
    private static final int EOVERFLOW = (int)75L;
    /**
     * {@snippet lang=c :
     * #define EOVERFLOW 75
     * }
     */
    public static int EOVERFLOW() {
        return EOVERFLOW;
    }
    private static final int ENOTUNIQ = (int)76L;
    /**
     * {@snippet lang=c :
     * #define ENOTUNIQ 76
     * }
     */
    public static int ENOTUNIQ() {
        return ENOTUNIQ;
    }
    private static final int EBADFD = (int)77L;
    /**
     * {@snippet lang=c :
     * #define EBADFD 77
     * }
     */
    public static int EBADFD() {
        return EBADFD;
    }
    private static final int EREMCHG = (int)78L;
    /**
     * {@snippet lang=c :
     * #define EREMCHG 78
     * }
     */
    public static int EREMCHG() {
        return EREMCHG;
    }
    private static final int ELIBACC = (int)79L;
    /**
     * {@snippet lang=c :
     * #define ELIBACC 79
     * }
     */
    public static int ELIBACC() {
        return ELIBACC;
    }
    private static final int ELIBBAD = (int)80L;
    /**
     * {@snippet lang=c :
     * #define ELIBBAD 80
     * }
     */
    public static int ELIBBAD() {
        return ELIBBAD;
    }
    private static final int ELIBSCN = (int)81L;
    /**
     * {@snippet lang=c :
     * #define ELIBSCN 81
     * }
     */
    public static int ELIBSCN() {
        return ELIBSCN;
    }
    private static final int ELIBMAX = (int)82L;
    /**
     * {@snippet lang=c :
     * #define ELIBMAX 82
     * }
     */
    public static int ELIBMAX() {
        return ELIBMAX;
    }
    private static final int ELIBEXEC = (int)83L;
    /**
     * {@snippet lang=c :
     * #define ELIBEXEC 83
     * }
     */
    public static int ELIBEXEC() {
        return ELIBEXEC;
    }
    private static final int EILSEQ = (int)84L;
    /**
     * {@snippet lang=c :
     * #define EILSEQ 84
     * }
     */
    public static int EILSEQ() {
        return EILSEQ;
    }
    private static final int ERESTART = (int)85L;
    /**
     * {@snippet lang=c :
     * #define ERESTART 85
     * }
     */
    public static int ERESTART() {
        return ERESTART;
    }
    private static final int ESTRPIPE = (int)86L;
    /**
     * {@snippet lang=c :
     * #define ESTRPIPE 86
     * }
     */
    public static int ESTRPIPE() {
        return ESTRPIPE;
    }
    private static final int EUSERS = (int)87L;
    /**
     * {@snippet lang=c :
     * #define EUSERS 87
     * }
     */
    public static int EUSERS() {
        return EUSERS;
    }
    private static final int ENOTSOCK = (int)88L;
    /**
     * {@snippet lang=c :
     * #define ENOTSOCK 88
     * }
     */
    public static int ENOTSOCK() {
        return ENOTSOCK;
    }
    private static final int EDESTADDRREQ = (int)89L;
    /**
     * {@snippet lang=c :
     * #define EDESTADDRREQ 89
     * }
     */
    public static int EDESTADDRREQ() {
        return EDESTADDRREQ;
    }
    private static final int EMSGSIZE = (int)90L;
    /**
     * {@snippet lang=c :
     * #define EMSGSIZE 90
     * }
     */
    public static int EMSGSIZE() {
        return EMSGSIZE;
    }
    private static final int EPROTOTYPE = (int)91L;
    /**
     * {@snippet lang=c :
     * #define EPROTOTYPE 91
     * }
     */
    public static int EPROTOTYPE() {
        return EPROTOTYPE;
    }
    private static final int ENOPROTOOPT = (int)92L;
    /**
     * {@snippet lang=c :
     * #define ENOPROTOOPT 92
     * }
     */
    public static int ENOPROTOOPT() {
        return ENOPROTOOPT;
    }
    private static final int EPROTONOSUPPORT = (int)93L;
    /**
     * {@snippet lang=c :
     * #define EPROTONOSUPPORT 93
     * }
     */
    public static int EPROTONOSUPPORT() {
        return EPROTONOSUPPORT;
    }
    private static final int ESOCKTNOSUPPORT = (int)94L;
    /**
     * {@snippet lang=c :
     * #define ESOCKTNOSUPPORT 94
     * }
     */
    public static int ESOCKTNOSUPPORT() {
        return ESOCKTNOSUPPORT;
    }
    private static final int EOPNOTSUPP = (int)95L;
    /**
     * {@snippet lang=c :
     * #define EOPNOTSUPP 95
     * }
     */
    public static int EOPNOTSUPP() {
        return EOPNOTSUPP;
    }
    private static final int EPFNOSUPPORT = (int)96L;
    /**
     * {@snippet lang=c :
     * #define EPFNOSUPPORT 96
     * }
     */
    public static int EPFNOSUPPORT() {
        return EPFNOSUPPORT;
    }
    private static final int EAFNOSUPPORT = (int)97L;
    /**
     * {@snippet lang=c :
     * #define EAFNOSUPPORT 97
     * }
     */
    public static int EAFNOSUPPORT() {
        return EAFNOSUPPORT;
    }
    private static final int EADDRINUSE = (int)98L;
    /**
     * {@snippet lang=c :
     * #define EADDRINUSE 98
     * }
     */
    public static int EADDRINUSE() {
        return EADDRINUSE;
    }
    private static final int EADDRNOTAVAIL = (int)99L;
    /**
     * {@snippet lang=c :
     * #define EADDRNOTAVAIL 99
     * }
     */
    public static int EADDRNOTAVAIL() {
        return EADDRNOTAVAIL;
    }
    private static final int ENETDOWN = (int)100L;
    /**
     * {@snippet lang=c :
     * #define ENETDOWN 100
     * }
     */
    public static int ENETDOWN() {
        return ENETDOWN;
    }
    private static final int ENETUNREACH = (int)101L;
    /**
     * {@snippet lang=c :
     * #define ENETUNREACH 101
     * }
     */
    public static int ENETUNREACH() {
        return ENETUNREACH;
    }
    private static final int ENETRESET = (int)102L;
    /**
     * {@snippet lang=c :
     * #define ENETRESET 102
     * }
     */
    public static int ENETRESET() {
        return ENETRESET;
    }
    private static final int ECONNABORTED = (int)103L;
    /**
     * {@snippet lang=c :
     * #define ECONNABORTED 103
     * }
     */
    public static int ECONNABORTED() {
        return ECONNABORTED;
    }
    private static final int ECONNRESET = (int)104L;
    /**
     * {@snippet lang=c :
     * #define ECONNRESET 104
     * }
     */
    public static int ECONNRESET() {
        return ECONNRESET;
    }
    private static final int ENOBUFS = (int)105L;
    /**
     * {@snippet lang=c :
     * #define ENOBUFS 105
     * }
     */
    public static int ENOBUFS() {
        return ENOBUFS;
    }
    private static final int EISCONN = (int)106L;
    /**
     * {@snippet lang=c :
     * #define EISCONN 106
     * }
     */
    public static int EISCONN() {
        return EISCONN;
    }
    private static final int ENOTCONN = (int)107L;
    /**
     * {@snippet lang=c :
     * #define ENOTCONN 107
     * }
     */
    public static int ENOTCONN() {
        return ENOTCONN;
    }
    private static final int ESHUTDOWN = (int)108L;
    /**
     * {@snippet lang=c :
     * #define ESHUTDOWN 108
     * }
     */
    public static int ESHUTDOWN() {
        return ESHUTDOWN;
    }
    private static final int ETOOMANYREFS = (int)109L;
    /**
     * {@snippet lang=c :
     * #define ETOOMANYREFS 109
     * }
     */
    public static int ETOOMANYREFS() {
        return ETOOMANYREFS;
    }
    private static final int ETIMEDOUT = (int)110L;
    /**
     * {@snippet lang=c :
     * #define ETIMEDOUT 110
     * }
     */
    public static int ETIMEDOUT() {
        return ETIMEDOUT;
    }
    private static final int ECONNREFUSED = (int)111L;
    /**
     * {@snippet lang=c :
     * #define ECONNREFUSED 111
     * }
     */
    public static int ECONNREFUSED() {
        return ECONNREFUSED;
    }
    private static final int EHOSTDOWN = (int)112L;
    /**
     * {@snippet lang=c :
     * #define EHOSTDOWN 112
     * }
     */
    public static int EHOSTDOWN() {
        return EHOSTDOWN;
    }
    private static final int EHOSTUNREACH = (int)113L;
    /**
     * {@snippet lang=c :
     * #define EHOSTUNREACH 113
     * }
     */
    public static int EHOSTUNREACH() {
        return EHOSTUNREACH;
    }
    private static final int EALREADY = (int)114L;
    /**
     * {@snippet lang=c :
     * #define EALREADY 114
     * }
     */
    public static int EALREADY() {
        return EALREADY;
    }
    private static final int EINPROGRESS = (int)115L;
    /**
     * {@snippet lang=c :
     * #define EINPROGRESS 115
     * }
     */
    public static int EINPROGRESS() {
        return EINPROGRESS;
    }
    private static final int ESTALE = (int)116L;
    /**
     * {@snippet lang=c :
     * #define ESTALE 116
     * }
     */
    public static int ESTALE() {
        return ESTALE;
    }
    private static final int EUCLEAN = (int)117L;
    /**
     * {@snippet lang=c :
     * #define EUCLEAN 117
     * }
     */
    public static int EUCLEAN() {
        return EUCLEAN;
    }
    private static final int ENOTNAM = (int)118L;
    /**
     * {@snippet lang=c :
     * #define ENOTNAM 118
     * }
     */
    public static int ENOTNAM() {
        return ENOTNAM;
    }
    private static final int ENAVAIL = (int)119L;
    /**
     * {@snippet lang=c :
     * #define ENAVAIL 119
     * }
     */
    public static int ENAVAIL() {
        return ENAVAIL;
    }
    private static final int EISNAM = (int)120L;
    /**
     * {@snippet lang=c :
     * #define EISNAM 120
     * }
     */
    public static int EISNAM() {
        return EISNAM;
    }
    private static final int EREMOTEIO = (int)121L;
    /**
     * {@snippet lang=c :
     * #define EREMOTEIO 121
     * }
     */
    public static int EREMOTEIO() {
        return EREMOTEIO;
    }
    private static final int EDQUOT = (int)122L;
    /**
     * {@snippet lang=c :
     * #define EDQUOT 122
     * }
     */
    public static int EDQUOT() {
        return EDQUOT;
    }
    private static final int ENOMEDIUM = (int)123L;
    /**
     * {@snippet lang=c :
     * #define ENOMEDIUM 123
     * }
     */
    public static int ENOMEDIUM() {
        return ENOMEDIUM;
    }
    private static final int EMEDIUMTYPE = (int)124L;
    /**
     * {@snippet lang=c :
     * #define EMEDIUMTYPE 124
     * }
     */
    public static int EMEDIUMTYPE() {
        return EMEDIUMTYPE;
    }
    private static final int ECANCELED = (int)125L;
    /**
     * {@snippet lang=c :
     * #define ECANCELED 125
     * }
     */
    public static int ECANCELED() {
        return ECANCELED;
    }
    private static final int ENOKEY = (int)126L;
    /**
     * {@snippet lang=c :
     * #define ENOKEY 126
     * }
     */
    public static int ENOKEY() {
        return ENOKEY;
    }
    private static final int EKEYEXPIRED = (int)127L;
    /**
     * {@snippet lang=c :
     * #define EKEYEXPIRED 127
     * }
     */
    public static int EKEYEXPIRED() {
        return EKEYEXPIRED;
    }
    private static final int EKEYREVOKED = (int)128L;
    /**
     * {@snippet lang=c :
     * #define EKEYREVOKED 128
     * }
     */
    public static int EKEYREVOKED() {
        return EKEYREVOKED;
    }
    private static final int EKEYREJECTED = (int)129L;
    /**
     * {@snippet lang=c :
     * #define EKEYREJECTED 129
     * }
     */
    public static int EKEYREJECTED() {
        return EKEYREJECTED;
    }
    private static final int EOWNERDEAD = (int)130L;
    /**
     * {@snippet lang=c :
     * #define EOWNERDEAD 130
     * }
     */
    public static int EOWNERDEAD() {
        return EOWNERDEAD;
    }
    private static final int ENOTRECOVERABLE = (int)131L;
    /**
     * {@snippet lang=c :
     * #define ENOTRECOVERABLE 131
     * }
     */
    public static int ENOTRECOVERABLE() {
        return ENOTRECOVERABLE;
    }
    private static final int ERFKILL = (int)132L;
    /**
     * {@snippet lang=c :
     * #define ERFKILL 132
     * }
     */
    public static int ERFKILL() {
        return ERFKILL;
    }
    private static final int EHWPOISON = (int)133L;
    /**
     * {@snippet lang=c :
     * #define EHWPOISON 133
     * }
     */
    public static int EHWPOISON() {
        return EHWPOISON;
    }
    private static final int _BITS_SIGNUM_GENERIC_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_SIGNUM_GENERIC_H 1
     * }
     */
    public static int _BITS_SIGNUM_GENERIC_H() {
        return _BITS_SIGNUM_GENERIC_H;
    }
    private static final int SIGINT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SIGINT 2
     * }
     */
    public static int SIGINT() {
        return SIGINT;
    }
    private static final int SIGILL = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SIGILL 4
     * }
     */
    public static int SIGILL() {
        return SIGILL;
    }
    private static final int SIGABRT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SIGABRT 6
     * }
     */
    public static int SIGABRT() {
        return SIGABRT;
    }
    private static final int SIGFPE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SIGFPE 8
     * }
     */
    public static int SIGFPE() {
        return SIGFPE;
    }
    private static final int SIGSEGV = (int)11L;
    /**
     * {@snippet lang=c :
     * #define SIGSEGV 11
     * }
     */
    public static int SIGSEGV() {
        return SIGSEGV;
    }
    private static final int SIGTERM = (int)15L;
    /**
     * {@snippet lang=c :
     * #define SIGTERM 15
     * }
     */
    public static int SIGTERM() {
        return SIGTERM;
    }
    private static final int SIGHUP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SIGHUP 1
     * }
     */
    public static int SIGHUP() {
        return SIGHUP;
    }
    private static final int SIGQUIT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SIGQUIT 3
     * }
     */
    public static int SIGQUIT() {
        return SIGQUIT;
    }
    private static final int SIGTRAP = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SIGTRAP 5
     * }
     */
    public static int SIGTRAP() {
        return SIGTRAP;
    }
    private static final int SIGKILL = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SIGKILL 9
     * }
     */
    public static int SIGKILL() {
        return SIGKILL;
    }
    private static final int SIGPIPE = (int)13L;
    /**
     * {@snippet lang=c :
     * #define SIGPIPE 13
     * }
     */
    public static int SIGPIPE() {
        return SIGPIPE;
    }
    private static final int SIGALRM = (int)14L;
    /**
     * {@snippet lang=c :
     * #define SIGALRM 14
     * }
     */
    public static int SIGALRM() {
        return SIGALRM;
    }
    private static final int _BITS_SIGNUM_ARCH_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_SIGNUM_ARCH_H 1
     * }
     */
    public static int _BITS_SIGNUM_ARCH_H() {
        return _BITS_SIGNUM_ARCH_H;
    }
    private static final int SIGSTKFLT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SIGSTKFLT 16
     * }
     */
    public static int SIGSTKFLT() {
        return SIGSTKFLT;
    }
    private static final int SIGPWR = (int)30L;
    /**
     * {@snippet lang=c :
     * #define SIGPWR 30
     * }
     */
    public static int SIGPWR() {
        return SIGPWR;
    }
    private static final int SIGBUS = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SIGBUS 7
     * }
     */
    public static int SIGBUS() {
        return SIGBUS;
    }
    private static final int SIGSYS = (int)31L;
    /**
     * {@snippet lang=c :
     * #define SIGSYS 31
     * }
     */
    public static int SIGSYS() {
        return SIGSYS;
    }
    private static final int SIGURG = (int)23L;
    /**
     * {@snippet lang=c :
     * #define SIGURG 23
     * }
     */
    public static int SIGURG() {
        return SIGURG;
    }
    private static final int SIGSTOP = (int)19L;
    /**
     * {@snippet lang=c :
     * #define SIGSTOP 19
     * }
     */
    public static int SIGSTOP() {
        return SIGSTOP;
    }
    private static final int SIGTSTP = (int)20L;
    /**
     * {@snippet lang=c :
     * #define SIGTSTP 20
     * }
     */
    public static int SIGTSTP() {
        return SIGTSTP;
    }
    private static final int SIGCONT = (int)18L;
    /**
     * {@snippet lang=c :
     * #define SIGCONT 18
     * }
     */
    public static int SIGCONT() {
        return SIGCONT;
    }
    private static final int SIGCHLD = (int)17L;
    /**
     * {@snippet lang=c :
     * #define SIGCHLD 17
     * }
     */
    public static int SIGCHLD() {
        return SIGCHLD;
    }
    private static final int SIGTTIN = (int)21L;
    /**
     * {@snippet lang=c :
     * #define SIGTTIN 21
     * }
     */
    public static int SIGTTIN() {
        return SIGTTIN;
    }
    private static final int SIGTTOU = (int)22L;
    /**
     * {@snippet lang=c :
     * #define SIGTTOU 22
     * }
     */
    public static int SIGTTOU() {
        return SIGTTOU;
    }
    private static final int SIGPOLL = (int)29L;
    /**
     * {@snippet lang=c :
     * #define SIGPOLL 29
     * }
     */
    public static int SIGPOLL() {
        return SIGPOLL;
    }
    private static final int SIGXFSZ = (int)25L;
    /**
     * {@snippet lang=c :
     * #define SIGXFSZ 25
     * }
     */
    public static int SIGXFSZ() {
        return SIGXFSZ;
    }
    private static final int SIGXCPU = (int)24L;
    /**
     * {@snippet lang=c :
     * #define SIGXCPU 24
     * }
     */
    public static int SIGXCPU() {
        return SIGXCPU;
    }
    private static final int SIGVTALRM = (int)26L;
    /**
     * {@snippet lang=c :
     * #define SIGVTALRM 26
     * }
     */
    public static int SIGVTALRM() {
        return SIGVTALRM;
    }
    private static final int SIGPROF = (int)27L;
    /**
     * {@snippet lang=c :
     * #define SIGPROF 27
     * }
     */
    public static int SIGPROF() {
        return SIGPROF;
    }
    private static final int SIGUSR1 = (int)10L;
    /**
     * {@snippet lang=c :
     * #define SIGUSR1 10
     * }
     */
    public static int SIGUSR1() {
        return SIGUSR1;
    }
    private static final int SIGUSR2 = (int)12L;
    /**
     * {@snippet lang=c :
     * #define SIGUSR2 12
     * }
     */
    public static int SIGUSR2() {
        return SIGUSR2;
    }
    private static final int SIGWINCH = (int)28L;
    /**
     * {@snippet lang=c :
     * #define SIGWINCH 28
     * }
     */
    public static int SIGWINCH() {
        return SIGWINCH;
    }
    private static final int __SIGRTMIN = (int)32L;
    /**
     * {@snippet lang=c :
     * #define __SIGRTMIN 32
     * }
     */
    public static int __SIGRTMIN() {
        return __SIGRTMIN;
    }
    private static final int __SIGRTMAX = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __SIGRTMAX 64
     * }
     */
    public static int __SIGRTMAX() {
        return __SIGRTMAX;
    }
    private static final int __sig_atomic_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __sig_atomic_t_defined 1
     * }
     */
    public static int __sig_atomic_t_defined() {
        return __sig_atomic_t_defined;
    }
    private static final int __siginfo_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __siginfo_t_defined 1
     * }
     */
    public static int __siginfo_t_defined() {
        return __siginfo_t_defined;
    }
    private static final int __SI_MAX_SIZE = (int)128L;
    /**
     * {@snippet lang=c :
     * #define __SI_MAX_SIZE 128
     * }
     */
    public static int __SI_MAX_SIZE() {
        return __SI_MAX_SIZE;
    }
    private static final int _BITS_SIGINFO_ARCH_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_SIGINFO_ARCH_H 1
     * }
     */
    public static int _BITS_SIGINFO_ARCH_H() {
        return _BITS_SIGINFO_ARCH_H;
    }
    private static final int __SI_ERRNO_THEN_CODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __SI_ERRNO_THEN_CODE 1
     * }
     */
    public static int __SI_ERRNO_THEN_CODE() {
        return __SI_ERRNO_THEN_CODE;
    }
    private static final int __SI_HAVE_SIGSYS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __SI_HAVE_SIGSYS 1
     * }
     */
    public static int __SI_HAVE_SIGSYS() {
        return __SI_HAVE_SIGSYS;
    }
    private static final int _BITS_SIGINFO_CONSTS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_SIGINFO_CONSTS_H 1
     * }
     */
    public static int _BITS_SIGINFO_CONSTS_H() {
        return _BITS_SIGINFO_CONSTS_H;
    }
    private static final int __SI_ASYNCIO_AFTER_SIGIO = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __SI_ASYNCIO_AFTER_SIGIO 1
     * }
     */
    public static int __SI_ASYNCIO_AFTER_SIGIO() {
        return __SI_ASYNCIO_AFTER_SIGIO;
    }
    private static final int __sigevent_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __sigevent_t_defined 1
     * }
     */
    public static int __sigevent_t_defined() {
        return __sigevent_t_defined;
    }
    private static final int __SIGEV_MAX_SIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __SIGEV_MAX_SIZE 64
     * }
     */
    public static int __SIGEV_MAX_SIZE() {
        return __SIGEV_MAX_SIZE;
    }
    private static final int _BITS_SIGEVENT_CONSTS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_SIGEVENT_CONSTS_H 1
     * }
     */
    public static int _BITS_SIGEVENT_CONSTS_H() {
        return _BITS_SIGEVENT_CONSTS_H;
    }
    private static final int _BITS_SIGACTION_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_SIGACTION_H 1
     * }
     */
    public static int _BITS_SIGACTION_H() {
        return _BITS_SIGACTION_H;
    }
    private static final int SA_NOCLDSTOP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SA_NOCLDSTOP 1
     * }
     */
    public static int SA_NOCLDSTOP() {
        return SA_NOCLDSTOP;
    }
    private static final int SA_NOCLDWAIT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SA_NOCLDWAIT 2
     * }
     */
    public static int SA_NOCLDWAIT() {
        return SA_NOCLDWAIT;
    }
    private static final int SA_SIGINFO = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SA_SIGINFO 4
     * }
     */
    public static int SA_SIGINFO() {
        return SA_SIGINFO;
    }
    private static final int SA_ONSTACK = (int)134217728L;
    /**
     * {@snippet lang=c :
     * #define SA_ONSTACK 134217728
     * }
     */
    public static int SA_ONSTACK() {
        return SA_ONSTACK;
    }
    private static final int SA_RESTART = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define SA_RESTART 268435456
     * }
     */
    public static int SA_RESTART() {
        return SA_RESTART;
    }
    private static final int SA_NODEFER = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define SA_NODEFER 1073741824
     * }
     */
    public static int SA_NODEFER() {
        return SA_NODEFER;
    }
    private static final int SA_INTERRUPT = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define SA_INTERRUPT 536870912
     * }
     */
    public static int SA_INTERRUPT() {
        return SA_INTERRUPT;
    }
    private static final int SIG_BLOCK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SIG_BLOCK 0
     * }
     */
    public static int SIG_BLOCK() {
        return SIG_BLOCK;
    }
    private static final int SIG_UNBLOCK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SIG_UNBLOCK 1
     * }
     */
    public static int SIG_UNBLOCK() {
        return SIG_UNBLOCK;
    }
    private static final int SIG_SETMASK = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SIG_SETMASK 2
     * }
     */
    public static int SIG_SETMASK() {
        return SIG_SETMASK;
    }
    private static final int _BITS_SIGCONTEXT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_SIGCONTEXT_H 1
     * }
     */
    public static int _BITS_SIGCONTEXT_H() {
        return _BITS_SIGCONTEXT_H;
    }
    private static final int __stack_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __stack_t_defined 1
     * }
     */
    public static int __stack_t_defined() {
        return __stack_t_defined;
    }
    private static final int _SYS_UCONTEXT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_UCONTEXT_H 1
     * }
     */
    public static int _SYS_UCONTEXT_H() {
        return _SYS_UCONTEXT_H;
    }
    private static final int __NGREG = (int)23L;
    /**
     * {@snippet lang=c :
     * #define __NGREG 23
     * }
     */
    public static int __NGREG() {
        return __NGREG;
    }
    private static final int _BITS_SIGSTACK_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_SIGSTACK_H 1
     * }
     */
    public static int _BITS_SIGSTACK_H() {
        return _BITS_SIGSTACK_H;
    }
    private static final int MINSIGSTKSZ = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define MINSIGSTKSZ 2048
     * }
     */
    public static int MINSIGSTKSZ() {
        return MINSIGSTKSZ;
    }
    private static final int SIGSTKSZ = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define SIGSTKSZ 8192
     * }
     */
    public static int SIGSTKSZ() {
        return SIGSTKSZ;
    }
    private static final int _BITS_SS_FLAGS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_SS_FLAGS_H 1
     * }
     */
    public static int _BITS_SS_FLAGS_H() {
        return _BITS_SS_FLAGS_H;
    }
    private static final int __sigstack_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __sigstack_defined 1
     * }
     */
    public static int __sigstack_defined() {
        return __sigstack_defined;
    }
    private static final int _BITS_SIGTHREAD_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_SIGTHREAD_H 1
     * }
     */
    public static int _BITS_SIGTHREAD_H() {
        return _BITS_SIGTHREAD_H;
    }
    private static final int true_ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define true 1
     * }
     */
    public static int true_() {
        return true_;
    }
    private static final int false_ = (int)0L;
    /**
     * {@snippet lang=c :
     * #define false 0
     * }
     */
    public static int false_() {
        return false_;
    }
    private static final int __bool_true_false_are_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return __bool_true_false_are_defined;
    }
    private static final int _INTTYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _INTTYPES_H 1
     * }
     */
    public static int _INTTYPES_H() {
        return _INTTYPES_H;
    }
    private static final int _STDINT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return _STDINT_H;
    }
    private static final int __GLIBC_USE_LIB_EXT2 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return __GLIBC_USE_LIB_EXT2;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return __GLIBC_USE_IEC_60559_BFP_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_BFP_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return __GLIBC_USE_IEC_60559_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_TYPES_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return __GLIBC_USE_IEC_60559_TYPES_EXT;
    }
    private static final int _BITS_WCHAR_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return _BITS_WCHAR_H;
    }
    private static final int _BITS_STDINT_UINTN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return _BITS_STDINT_UINTN_H;
    }
    private static final int ____gwchar_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ____gwchar_t_defined 1
     * }
     */
    public static int ____gwchar_t_defined() {
        return ____gwchar_t_defined;
    }
    private static final int _TIME_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _TIME_H 1
     * }
     */
    public static int _TIME_H() {
        return _TIME_H;
    }
    private static final int _BITS_TIME_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TIME_H 1
     * }
     */
    public static int _BITS_TIME_H() {
        return _BITS_TIME_H;
    }
    private static final int CLOCK_REALTIME = (int)0L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_REALTIME 0
     * }
     */
    public static int CLOCK_REALTIME() {
        return CLOCK_REALTIME;
    }
    private static final int CLOCK_MONOTONIC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_MONOTONIC 1
     * }
     */
    public static int CLOCK_MONOTONIC() {
        return CLOCK_MONOTONIC;
    }
    private static final int CLOCK_PROCESS_CPUTIME_ID = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_PROCESS_CPUTIME_ID 2
     * }
     */
    public static int CLOCK_PROCESS_CPUTIME_ID() {
        return CLOCK_PROCESS_CPUTIME_ID;
    }
    private static final int CLOCK_THREAD_CPUTIME_ID = (int)3L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_THREAD_CPUTIME_ID 3
     * }
     */
    public static int CLOCK_THREAD_CPUTIME_ID() {
        return CLOCK_THREAD_CPUTIME_ID;
    }
    private static final int CLOCK_MONOTONIC_RAW = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_MONOTONIC_RAW 4
     * }
     */
    public static int CLOCK_MONOTONIC_RAW() {
        return CLOCK_MONOTONIC_RAW;
    }
    private static final int CLOCK_REALTIME_COARSE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_REALTIME_COARSE 5
     * }
     */
    public static int CLOCK_REALTIME_COARSE() {
        return CLOCK_REALTIME_COARSE;
    }
    private static final int CLOCK_MONOTONIC_COARSE = (int)6L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_MONOTONIC_COARSE 6
     * }
     */
    public static int CLOCK_MONOTONIC_COARSE() {
        return CLOCK_MONOTONIC_COARSE;
    }
    private static final int CLOCK_BOOTTIME = (int)7L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_BOOTTIME 7
     * }
     */
    public static int CLOCK_BOOTTIME() {
        return CLOCK_BOOTTIME;
    }
    private static final int CLOCK_REALTIME_ALARM = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_REALTIME_ALARM 8
     * }
     */
    public static int CLOCK_REALTIME_ALARM() {
        return CLOCK_REALTIME_ALARM;
    }
    private static final int CLOCK_BOOTTIME_ALARM = (int)9L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_BOOTTIME_ALARM 9
     * }
     */
    public static int CLOCK_BOOTTIME_ALARM() {
        return CLOCK_BOOTTIME_ALARM;
    }
    private static final int CLOCK_TAI = (int)11L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_TAI 11
     * }
     */
    public static int CLOCK_TAI() {
        return CLOCK_TAI;
    }
    private static final int TIMER_ABSTIME = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TIMER_ABSTIME 1
     * }
     */
    public static int TIMER_ABSTIME() {
        return TIMER_ABSTIME;
    }
    private static final int __struct_tm_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __struct_tm_defined 1
     * }
     */
    public static int __struct_tm_defined() {
        return __struct_tm_defined;
    }
    private static final int __itimerspec_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __itimerspec_defined 1
     * }
     */
    public static int __itimerspec_defined() {
        return __itimerspec_defined;
    }
    private static final int _BITS_TYPES_LOCALE_T_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_LOCALE_T_H 1
     * }
     */
    public static int _BITS_TYPES_LOCALE_T_H() {
        return _BITS_TYPES_LOCALE_T_H;
    }
    private static final int _BITS_TYPES___LOCALE_T_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES___LOCALE_T_H 1
     * }
     */
    public static int _BITS_TYPES___LOCALE_T_H() {
        return _BITS_TYPES___LOCALE_T_H;
    }
    private static final int TIME_UTC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TIME_UTC 1
     * }
     */
    public static int TIME_UTC() {
        return TIME_UTC;
    }
    private static final int _FCNTL_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _FCNTL_H 1
     * }
     */
    public static int _FCNTL_H() {
        return _FCNTL_H;
    }
    private static final int __O_LARGEFILE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __O_LARGEFILE 0
     * }
     */
    public static int __O_LARGEFILE() {
        return __O_LARGEFILE;
    }
    private static final int F_GETLK64 = (int)5L;
    /**
     * {@snippet lang=c :
     * #define F_GETLK64 5
     * }
     */
    public static int F_GETLK64() {
        return F_GETLK64;
    }
    private static final int F_SETLK64 = (int)6L;
    /**
     * {@snippet lang=c :
     * #define F_SETLK64 6
     * }
     */
    public static int F_SETLK64() {
        return F_SETLK64;
    }
    private static final int F_SETLKW64 = (int)7L;
    /**
     * {@snippet lang=c :
     * #define F_SETLKW64 7
     * }
     */
    public static int F_SETLKW64() {
        return F_SETLKW64;
    }
    private static final int O_ACCMODE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define O_ACCMODE 3
     * }
     */
    public static int O_ACCMODE() {
        return O_ACCMODE;
    }
    private static final int O_RDONLY = (int)0L;
    /**
     * {@snippet lang=c :
     * #define O_RDONLY 0
     * }
     */
    public static int O_RDONLY() {
        return O_RDONLY;
    }
    private static final int O_WRONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define O_WRONLY 1
     * }
     */
    public static int O_WRONLY() {
        return O_WRONLY;
    }
    private static final int O_RDWR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define O_RDWR 2
     * }
     */
    public static int O_RDWR() {
        return O_RDWR;
    }
    private static final int O_CREAT = (int)64L;
    /**
     * {@snippet lang=c :
     * #define O_CREAT 64
     * }
     */
    public static int O_CREAT() {
        return O_CREAT;
    }
    private static final int O_EXCL = (int)128L;
    /**
     * {@snippet lang=c :
     * #define O_EXCL 128
     * }
     */
    public static int O_EXCL() {
        return O_EXCL;
    }
    private static final int O_NOCTTY = (int)256L;
    /**
     * {@snippet lang=c :
     * #define O_NOCTTY 256
     * }
     */
    public static int O_NOCTTY() {
        return O_NOCTTY;
    }
    private static final int O_TRUNC = (int)512L;
    /**
     * {@snippet lang=c :
     * #define O_TRUNC 512
     * }
     */
    public static int O_TRUNC() {
        return O_TRUNC;
    }
    private static final int O_APPEND = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define O_APPEND 1024
     * }
     */
    public static int O_APPEND() {
        return O_APPEND;
    }
    private static final int O_NONBLOCK = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define O_NONBLOCK 2048
     * }
     */
    public static int O_NONBLOCK() {
        return O_NONBLOCK;
    }
    private static final int O_SYNC = (int)1052672L;
    /**
     * {@snippet lang=c :
     * #define O_SYNC 1052672
     * }
     */
    public static int O_SYNC() {
        return O_SYNC;
    }
    private static final int O_ASYNC = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define O_ASYNC 8192
     * }
     */
    public static int O_ASYNC() {
        return O_ASYNC;
    }
    private static final int __O_DIRECTORY = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define __O_DIRECTORY 65536
     * }
     */
    public static int __O_DIRECTORY() {
        return __O_DIRECTORY;
    }
    private static final int __O_NOFOLLOW = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define __O_NOFOLLOW 131072
     * }
     */
    public static int __O_NOFOLLOW() {
        return __O_NOFOLLOW;
    }
    private static final int __O_CLOEXEC = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define __O_CLOEXEC 524288
     * }
     */
    public static int __O_CLOEXEC() {
        return __O_CLOEXEC;
    }
    private static final int __O_DIRECT = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define __O_DIRECT 16384
     * }
     */
    public static int __O_DIRECT() {
        return __O_DIRECT;
    }
    private static final int __O_NOATIME = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define __O_NOATIME 262144
     * }
     */
    public static int __O_NOATIME() {
        return __O_NOATIME;
    }
    private static final int __O_PATH = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define __O_PATH 2097152
     * }
     */
    public static int __O_PATH() {
        return __O_PATH;
    }
    private static final int __O_DSYNC = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define __O_DSYNC 4096
     * }
     */
    public static int __O_DSYNC() {
        return __O_DSYNC;
    }
    private static final int F_GETLK = (int)5L;
    /**
     * {@snippet lang=c :
     * #define F_GETLK 5
     * }
     */
    public static int F_GETLK() {
        return F_GETLK;
    }
    private static final int F_SETLK = (int)6L;
    /**
     * {@snippet lang=c :
     * #define F_SETLK 6
     * }
     */
    public static int F_SETLK() {
        return F_SETLK;
    }
    private static final int F_SETLKW = (int)7L;
    /**
     * {@snippet lang=c :
     * #define F_SETLKW 7
     * }
     */
    public static int F_SETLKW() {
        return F_SETLKW;
    }
    private static final int F_DUPFD = (int)0L;
    /**
     * {@snippet lang=c :
     * #define F_DUPFD 0
     * }
     */
    public static int F_DUPFD() {
        return F_DUPFD;
    }
    private static final int F_GETFD = (int)1L;
    /**
     * {@snippet lang=c :
     * #define F_GETFD 1
     * }
     */
    public static int F_GETFD() {
        return F_GETFD;
    }
    private static final int F_SETFD = (int)2L;
    /**
     * {@snippet lang=c :
     * #define F_SETFD 2
     * }
     */
    public static int F_SETFD() {
        return F_SETFD;
    }
    private static final int F_GETFL = (int)3L;
    /**
     * {@snippet lang=c :
     * #define F_GETFL 3
     * }
     */
    public static int F_GETFL() {
        return F_GETFL;
    }
    private static final int F_SETFL = (int)4L;
    /**
     * {@snippet lang=c :
     * #define F_SETFL 4
     * }
     */
    public static int F_SETFL() {
        return F_SETFL;
    }
    private static final int __F_SETOWN = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __F_SETOWN 8
     * }
     */
    public static int __F_SETOWN() {
        return __F_SETOWN;
    }
    private static final int __F_GETOWN = (int)9L;
    /**
     * {@snippet lang=c :
     * #define __F_GETOWN 9
     * }
     */
    public static int __F_GETOWN() {
        return __F_GETOWN;
    }
    private static final int __F_SETSIG = (int)10L;
    /**
     * {@snippet lang=c :
     * #define __F_SETSIG 10
     * }
     */
    public static int __F_SETSIG() {
        return __F_SETSIG;
    }
    private static final int __F_GETSIG = (int)11L;
    /**
     * {@snippet lang=c :
     * #define __F_GETSIG 11
     * }
     */
    public static int __F_GETSIG() {
        return __F_GETSIG;
    }
    private static final int __F_SETOWN_EX = (int)15L;
    /**
     * {@snippet lang=c :
     * #define __F_SETOWN_EX 15
     * }
     */
    public static int __F_SETOWN_EX() {
        return __F_SETOWN_EX;
    }
    private static final int __F_GETOWN_EX = (int)16L;
    /**
     * {@snippet lang=c :
     * #define __F_GETOWN_EX 16
     * }
     */
    public static int __F_GETOWN_EX() {
        return __F_GETOWN_EX;
    }
    private static final int F_DUPFD_CLOEXEC = (int)1030L;
    /**
     * {@snippet lang=c :
     * #define F_DUPFD_CLOEXEC 1030
     * }
     */
    public static int F_DUPFD_CLOEXEC() {
        return F_DUPFD_CLOEXEC;
    }
    private static final int FD_CLOEXEC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FD_CLOEXEC 1
     * }
     */
    public static int FD_CLOEXEC() {
        return FD_CLOEXEC;
    }
    private static final int F_RDLCK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define F_RDLCK 0
     * }
     */
    public static int F_RDLCK() {
        return F_RDLCK;
    }
    private static final int F_WRLCK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define F_WRLCK 1
     * }
     */
    public static int F_WRLCK() {
        return F_WRLCK;
    }
    private static final int F_UNLCK = (int)2L;
    /**
     * {@snippet lang=c :
     * #define F_UNLCK 2
     * }
     */
    public static int F_UNLCK() {
        return F_UNLCK;
    }
    private static final int F_EXLCK = (int)4L;
    /**
     * {@snippet lang=c :
     * #define F_EXLCK 4
     * }
     */
    public static int F_EXLCK() {
        return F_EXLCK;
    }
    private static final int F_SHLCK = (int)8L;
    /**
     * {@snippet lang=c :
     * #define F_SHLCK 8
     * }
     */
    public static int F_SHLCK() {
        return F_SHLCK;
    }
    private static final int LOCK_SH = (int)1L;
    /**
     * {@snippet lang=c :
     * #define LOCK_SH 1
     * }
     */
    public static int LOCK_SH() {
        return LOCK_SH;
    }
    private static final int LOCK_EX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define LOCK_EX 2
     * }
     */
    public static int LOCK_EX() {
        return LOCK_EX;
    }
    private static final int LOCK_NB = (int)4L;
    /**
     * {@snippet lang=c :
     * #define LOCK_NB 4
     * }
     */
    public static int LOCK_NB() {
        return LOCK_NB;
    }
    private static final int LOCK_UN = (int)8L;
    /**
     * {@snippet lang=c :
     * #define LOCK_UN 8
     * }
     */
    public static int LOCK_UN() {
        return LOCK_UN;
    }
    private static final int __POSIX_FADV_DONTNEED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define __POSIX_FADV_DONTNEED 4
     * }
     */
    public static int __POSIX_FADV_DONTNEED() {
        return __POSIX_FADV_DONTNEED;
    }
    private static final int __POSIX_FADV_NOREUSE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define __POSIX_FADV_NOREUSE 5
     * }
     */
    public static int __POSIX_FADV_NOREUSE() {
        return __POSIX_FADV_NOREUSE;
    }
    private static final int POSIX_FADV_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define POSIX_FADV_NORMAL 0
     * }
     */
    public static int POSIX_FADV_NORMAL() {
        return POSIX_FADV_NORMAL;
    }
    private static final int POSIX_FADV_RANDOM = (int)1L;
    /**
     * {@snippet lang=c :
     * #define POSIX_FADV_RANDOM 1
     * }
     */
    public static int POSIX_FADV_RANDOM() {
        return POSIX_FADV_RANDOM;
    }
    private static final int POSIX_FADV_SEQUENTIAL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define POSIX_FADV_SEQUENTIAL 2
     * }
     */
    public static int POSIX_FADV_SEQUENTIAL() {
        return POSIX_FADV_SEQUENTIAL;
    }
    private static final int POSIX_FADV_WILLNEED = (int)3L;
    /**
     * {@snippet lang=c :
     * #define POSIX_FADV_WILLNEED 3
     * }
     */
    public static int POSIX_FADV_WILLNEED() {
        return POSIX_FADV_WILLNEED;
    }
    private static final int AT_SYMLINK_NOFOLLOW = (int)256L;
    /**
     * {@snippet lang=c :
     * #define AT_SYMLINK_NOFOLLOW 256
     * }
     */
    public static int AT_SYMLINK_NOFOLLOW() {
        return AT_SYMLINK_NOFOLLOW;
    }
    private static final int AT_REMOVEDIR = (int)512L;
    /**
     * {@snippet lang=c :
     * #define AT_REMOVEDIR 512
     * }
     */
    public static int AT_REMOVEDIR() {
        return AT_REMOVEDIR;
    }
    private static final int AT_SYMLINK_FOLLOW = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define AT_SYMLINK_FOLLOW 1024
     * }
     */
    public static int AT_SYMLINK_FOLLOW() {
        return AT_SYMLINK_FOLLOW;
    }
    private static final int AT_EACCESS = (int)512L;
    /**
     * {@snippet lang=c :
     * #define AT_EACCESS 512
     * }
     */
    public static int AT_EACCESS() {
        return AT_EACCESS;
    }
    private static final int R_OK = (int)4L;
    /**
     * {@snippet lang=c :
     * #define R_OK 4
     * }
     */
    public static int R_OK() {
        return R_OK;
    }
    private static final int W_OK = (int)2L;
    /**
     * {@snippet lang=c :
     * #define W_OK 2
     * }
     */
    public static int W_OK() {
        return W_OK;
    }
    private static final int X_OK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define X_OK 1
     * }
     */
    public static int X_OK() {
        return X_OK;
    }
    private static final int F_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define F_OK 0
     * }
     */
    public static int F_OK() {
        return F_OK;
    }
    private static final int SEEK_SET = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return SEEK_SET;
    }
    private static final int SEEK_CUR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return SEEK_CUR;
    }
    private static final int SEEK_END = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return SEEK_END;
    }
    private static final int F_ULOCK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define F_ULOCK 0
     * }
     */
    public static int F_ULOCK() {
        return F_ULOCK;
    }
    private static final int F_LOCK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define F_LOCK 1
     * }
     */
    public static int F_LOCK() {
        return F_LOCK;
    }
    private static final int F_TLOCK = (int)2L;
    /**
     * {@snippet lang=c :
     * #define F_TLOCK 2
     * }
     */
    public static int F_TLOCK() {
        return F_TLOCK;
    }
    private static final int F_TEST = (int)3L;
    /**
     * {@snippet lang=c :
     * #define F_TEST 3
     * }
     */
    public static int F_TEST() {
        return F_TEST;
    }
    private static final int _SCHED_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SCHED_H 1
     * }
     */
    public static int _SCHED_H() {
        return _SCHED_H;
    }
    private static final int _BITS_SCHED_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_SCHED_H 1
     * }
     */
    public static int _BITS_SCHED_H() {
        return _BITS_SCHED_H;
    }
    private static final int SCHED_OTHER = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SCHED_OTHER 0
     * }
     */
    public static int SCHED_OTHER() {
        return SCHED_OTHER;
    }
    private static final int SCHED_FIFO = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SCHED_FIFO 1
     * }
     */
    public static int SCHED_FIFO() {
        return SCHED_FIFO;
    }
    private static final int SCHED_RR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SCHED_RR 2
     * }
     */
    public static int SCHED_RR() {
        return SCHED_RR;
    }
    private static final int _BITS_TYPES_STRUCT_SCHED_PARAM = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_STRUCT_SCHED_PARAM 1
     * }
     */
    public static int _BITS_TYPES_STRUCT_SCHED_PARAM() {
        return _BITS_TYPES_STRUCT_SCHED_PARAM;
    }
    private static final int _BITS_CPU_SET_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_CPU_SET_H 1
     * }
     */
    public static int _BITS_CPU_SET_H() {
        return _BITS_CPU_SET_H;
    }
    private static final int __CPU_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __CPU_SETSIZE 1024
     * }
     */
    public static int __CPU_SETSIZE() {
        return __CPU_SETSIZE;
    }
    private static final int _SYS_WAIT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_WAIT_H 1
     * }
     */
    public static int _SYS_WAIT_H() {
        return _SYS_WAIT_H;
    }
    private static final int WNOHANG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define WNOHANG 1
     * }
     */
    public static int WNOHANG() {
        return WNOHANG;
    }
    private static final int WUNTRACED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define WUNTRACED 2
     * }
     */
    public static int WUNTRACED() {
        return WUNTRACED;
    }
    private static final int WSTOPPED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define WSTOPPED 2
     * }
     */
    public static int WSTOPPED() {
        return WSTOPPED;
    }
    private static final int WEXITED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define WEXITED 4
     * }
     */
    public static int WEXITED() {
        return WEXITED;
    }
    private static final int WCONTINUED = (int)8L;
    /**
     * {@snippet lang=c :
     * #define WCONTINUED 8
     * }
     */
    public static int WCONTINUED() {
        return WCONTINUED;
    }
    private static final int WNOWAIT = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define WNOWAIT 16777216
     * }
     */
    public static int WNOWAIT() {
        return WNOWAIT;
    }
    private static final int __WNOTHREAD = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define __WNOTHREAD 536870912
     * }
     */
    public static int __WNOTHREAD() {
        return __WNOTHREAD;
    }
    private static final int __WALL = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define __WALL 1073741824
     * }
     */
    public static int __WALL() {
        return __WALL;
    }
    private static final int __W_CONTINUED = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define __W_CONTINUED 65535
     * }
     */
    public static int __W_CONTINUED() {
        return __W_CONTINUED;
    }
    private static final int __WCOREFLAG = (int)128L;
    /**
     * {@snippet lang=c :
     * #define __WCOREFLAG 128
     * }
     */
    public static int __WCOREFLAG() {
        return __WCOREFLAG;
    }
    private static final int WAIT_MYPGRP = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WAIT_MYPGRP 0
     * }
     */
    public static int WAIT_MYPGRP() {
        return WAIT_MYPGRP;
    }
    private static final int UAPI_LINUX_IO_URING_H_SKIP_LINUX_TIME_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define UAPI_LINUX_IO_URING_H_SKIP_LINUX_TIME_TYPES_H 1
     * }
     */
    public static int UAPI_LINUX_IO_URING_H_SKIP_LINUX_TIME_TYPES_H() {
        return UAPI_LINUX_IO_URING_H_SKIP_LINUX_TIME_TYPES_H;
    }
    private static final int RESOLVE_NO_XDEV = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RESOLVE_NO_XDEV 1
     * }
     */
    public static int RESOLVE_NO_XDEV() {
        return RESOLVE_NO_XDEV;
    }
    private static final int RESOLVE_NO_MAGICLINKS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RESOLVE_NO_MAGICLINKS 2
     * }
     */
    public static int RESOLVE_NO_MAGICLINKS() {
        return RESOLVE_NO_MAGICLINKS;
    }
    private static final int RESOLVE_NO_SYMLINKS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RESOLVE_NO_SYMLINKS 4
     * }
     */
    public static int RESOLVE_NO_SYMLINKS() {
        return RESOLVE_NO_SYMLINKS;
    }
    private static final int RESOLVE_BENEATH = (int)8L;
    /**
     * {@snippet lang=c :
     * #define RESOLVE_BENEATH 8
     * }
     */
    public static int RESOLVE_BENEATH() {
        return RESOLVE_BENEATH;
    }
    private static final int RESOLVE_IN_ROOT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define RESOLVE_IN_ROOT 16
     * }
     */
    public static int RESOLVE_IN_ROOT() {
        return RESOLVE_IN_ROOT;
    }
    private static final int RESOLVE_CACHED = (int)32L;
    /**
     * {@snippet lang=c :
     * #define RESOLVE_CACHED 32
     * }
     */
    public static int RESOLVE_CACHED() {
        return RESOLVE_CACHED;
    }
    private static final int NR_OPEN = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define NR_OPEN 1024
     * }
     */
    public static int NR_OPEN() {
        return NR_OPEN;
    }
    private static final int NGROUPS_MAX = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define NGROUPS_MAX 65536
     * }
     */
    public static int NGROUPS_MAX() {
        return NGROUPS_MAX;
    }
    private static final int ARG_MAX = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define ARG_MAX 131072
     * }
     */
    public static int ARG_MAX() {
        return ARG_MAX;
    }
    private static final int LINK_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define LINK_MAX 127
     * }
     */
    public static int LINK_MAX() {
        return LINK_MAX;
    }
    private static final int MAX_CANON = (int)255L;
    /**
     * {@snippet lang=c :
     * #define MAX_CANON 255
     * }
     */
    public static int MAX_CANON() {
        return MAX_CANON;
    }
    private static final int MAX_INPUT = (int)255L;
    /**
     * {@snippet lang=c :
     * #define MAX_INPUT 255
     * }
     */
    public static int MAX_INPUT() {
        return MAX_INPUT;
    }
    private static final int NAME_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define NAME_MAX 255
     * }
     */
    public static int NAME_MAX() {
        return NAME_MAX;
    }
    private static final int PATH_MAX = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define PATH_MAX 4096
     * }
     */
    public static int PATH_MAX() {
        return PATH_MAX;
    }
    private static final int PIPE_BUF = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define PIPE_BUF 4096
     * }
     */
    public static int PIPE_BUF() {
        return PIPE_BUF;
    }
    private static final int XATTR_NAME_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define XATTR_NAME_MAX 255
     * }
     */
    public static int XATTR_NAME_MAX() {
        return XATTR_NAME_MAX;
    }
    private static final int XATTR_SIZE_MAX = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define XATTR_SIZE_MAX 65536
     * }
     */
    public static int XATTR_SIZE_MAX() {
        return XATTR_SIZE_MAX;
    }
    private static final int XATTR_LIST_MAX = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define XATTR_LIST_MAX 65536
     * }
     */
    public static int XATTR_LIST_MAX() {
        return XATTR_LIST_MAX;
    }
    private static final int RTSIG_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define RTSIG_MAX 32
     * }
     */
    public static int RTSIG_MAX() {
        return RTSIG_MAX;
    }
    private static final int _IOC_NRBITS = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _IOC_NRBITS 8
     * }
     */
    public static int _IOC_NRBITS() {
        return _IOC_NRBITS;
    }
    private static final int _IOC_TYPEBITS = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _IOC_TYPEBITS 8
     * }
     */
    public static int _IOC_TYPEBITS() {
        return _IOC_TYPEBITS;
    }
    private static final int _IOC_SIZEBITS = (int)14L;
    /**
     * {@snippet lang=c :
     * #define _IOC_SIZEBITS 14
     * }
     */
    public static int _IOC_SIZEBITS() {
        return _IOC_SIZEBITS;
    }
    private static final int _IOC_DIRBITS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _IOC_DIRBITS 2
     * }
     */
    public static int _IOC_DIRBITS() {
        return _IOC_DIRBITS;
    }
    private static final int _IOC_NRSHIFT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _IOC_NRSHIFT 0
     * }
     */
    public static int _IOC_NRSHIFT() {
        return _IOC_NRSHIFT;
    }
    private static final int FSCRYPT_POLICY_FLAGS_PAD_4 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_FLAGS_PAD_4 0
     * }
     */
    public static int FSCRYPT_POLICY_FLAGS_PAD_4() {
        return FSCRYPT_POLICY_FLAGS_PAD_4;
    }
    private static final int FSCRYPT_POLICY_FLAGS_PAD_8 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_FLAGS_PAD_8 1
     * }
     */
    public static int FSCRYPT_POLICY_FLAGS_PAD_8() {
        return FSCRYPT_POLICY_FLAGS_PAD_8;
    }
    private static final int FSCRYPT_POLICY_FLAGS_PAD_16 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_FLAGS_PAD_16 2
     * }
     */
    public static int FSCRYPT_POLICY_FLAGS_PAD_16() {
        return FSCRYPT_POLICY_FLAGS_PAD_16;
    }
    private static final int FSCRYPT_POLICY_FLAGS_PAD_32 = (int)3L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_FLAGS_PAD_32 3
     * }
     */
    public static int FSCRYPT_POLICY_FLAGS_PAD_32() {
        return FSCRYPT_POLICY_FLAGS_PAD_32;
    }
    private static final int FSCRYPT_POLICY_FLAGS_PAD_MASK = (int)3L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_FLAGS_PAD_MASK 3
     * }
     */
    public static int FSCRYPT_POLICY_FLAGS_PAD_MASK() {
        return FSCRYPT_POLICY_FLAGS_PAD_MASK;
    }
    private static final int FSCRYPT_POLICY_FLAG_DIRECT_KEY = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_FLAG_DIRECT_KEY 4
     * }
     */
    public static int FSCRYPT_POLICY_FLAG_DIRECT_KEY() {
        return FSCRYPT_POLICY_FLAG_DIRECT_KEY;
    }
    private static final int FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64 = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64 8
     * }
     */
    public static int FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64() {
        return FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64;
    }
    private static final int FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32 = (int)16L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32 16
     * }
     */
    public static int FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32() {
        return FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32;
    }
    private static final int FSCRYPT_MODE_AES_256_XTS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MODE_AES_256_XTS 1
     * }
     */
    public static int FSCRYPT_MODE_AES_256_XTS() {
        return FSCRYPT_MODE_AES_256_XTS;
    }
    private static final int FSCRYPT_MODE_AES_256_CTS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MODE_AES_256_CTS 4
     * }
     */
    public static int FSCRYPT_MODE_AES_256_CTS() {
        return FSCRYPT_MODE_AES_256_CTS;
    }
    private static final int FSCRYPT_MODE_AES_128_CBC = (int)5L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MODE_AES_128_CBC 5
     * }
     */
    public static int FSCRYPT_MODE_AES_128_CBC() {
        return FSCRYPT_MODE_AES_128_CBC;
    }
    private static final int FSCRYPT_MODE_AES_128_CTS = (int)6L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MODE_AES_128_CTS 6
     * }
     */
    public static int FSCRYPT_MODE_AES_128_CTS() {
        return FSCRYPT_MODE_AES_128_CTS;
    }
    private static final int FSCRYPT_MODE_SM4_XTS = (int)7L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MODE_SM4_XTS 7
     * }
     */
    public static int FSCRYPT_MODE_SM4_XTS() {
        return FSCRYPT_MODE_SM4_XTS;
    }
    private static final int FSCRYPT_MODE_SM4_CTS = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MODE_SM4_CTS 8
     * }
     */
    public static int FSCRYPT_MODE_SM4_CTS() {
        return FSCRYPT_MODE_SM4_CTS;
    }
    private static final int FSCRYPT_MODE_ADIANTUM = (int)9L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MODE_ADIANTUM 9
     * }
     */
    public static int FSCRYPT_MODE_ADIANTUM() {
        return FSCRYPT_MODE_ADIANTUM;
    }
    private static final int FSCRYPT_MODE_AES_256_HCTR2 = (int)10L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MODE_AES_256_HCTR2 10
     * }
     */
    public static int FSCRYPT_MODE_AES_256_HCTR2() {
        return FSCRYPT_MODE_AES_256_HCTR2;
    }
    private static final int FSCRYPT_POLICY_V1 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_V1 0
     * }
     */
    public static int FSCRYPT_POLICY_V1() {
        return FSCRYPT_POLICY_V1;
    }
    private static final int FSCRYPT_KEY_DESCRIPTOR_SIZE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_DESCRIPTOR_SIZE 8
     * }
     */
    public static int FSCRYPT_KEY_DESCRIPTOR_SIZE() {
        return FSCRYPT_KEY_DESCRIPTOR_SIZE;
    }
    private static final int FSCRYPT_KEY_DESC_PREFIX_SIZE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_DESC_PREFIX_SIZE 8
     * }
     */
    public static int FSCRYPT_KEY_DESC_PREFIX_SIZE() {
        return FSCRYPT_KEY_DESC_PREFIX_SIZE;
    }
    private static final int FSCRYPT_MAX_KEY_SIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_MAX_KEY_SIZE 64
     * }
     */
    public static int FSCRYPT_MAX_KEY_SIZE() {
        return FSCRYPT_MAX_KEY_SIZE;
    }
    private static final int FSCRYPT_POLICY_V2 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_POLICY_V2 2
     * }
     */
    public static int FSCRYPT_POLICY_V2() {
        return FSCRYPT_POLICY_V2;
    }
    private static final int FSCRYPT_KEY_IDENTIFIER_SIZE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_IDENTIFIER_SIZE 16
     * }
     */
    public static int FSCRYPT_KEY_IDENTIFIER_SIZE() {
        return FSCRYPT_KEY_IDENTIFIER_SIZE;
    }
    private static final int FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR 1
     * }
     */
    public static int FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR() {
        return FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR;
    }
    private static final int FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER 2
     * }
     */
    public static int FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER() {
        return FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER;
    }
    private static final int FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY 1
     * }
     */
    public static int FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY() {
        return FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY;
    }
    private static final int FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS 2
     * }
     */
    public static int FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS() {
        return FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS;
    }
    private static final int FSCRYPT_KEY_STATUS_ABSENT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_STATUS_ABSENT 1
     * }
     */
    public static int FSCRYPT_KEY_STATUS_ABSENT() {
        return FSCRYPT_KEY_STATUS_ABSENT;
    }
    private static final int FSCRYPT_KEY_STATUS_PRESENT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_STATUS_PRESENT 2
     * }
     */
    public static int FSCRYPT_KEY_STATUS_PRESENT() {
        return FSCRYPT_KEY_STATUS_PRESENT;
    }
    private static final int FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED = (int)3L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED 3
     * }
     */
    public static int FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED() {
        return FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED;
    }
    private static final int FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF 1
     * }
     */
    public static int FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF() {
        return FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF;
    }
    private static final int FS_POLICY_FLAGS_VALID = (int)7L;
    /**
     * {@snippet lang=c :
     * #define FS_POLICY_FLAGS_VALID 7
     * }
     */
    public static int FS_POLICY_FLAGS_VALID() {
        return FS_POLICY_FLAGS_VALID;
    }
    private static final int FS_ENCRYPTION_MODE_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FS_ENCRYPTION_MODE_INVALID 0
     * }
     */
    public static int FS_ENCRYPTION_MODE_INVALID() {
        return FS_ENCRYPTION_MODE_INVALID;
    }
    private static final int FS_ENCRYPTION_MODE_AES_256_GCM = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FS_ENCRYPTION_MODE_AES_256_GCM 2
     * }
     */
    public static int FS_ENCRYPTION_MODE_AES_256_GCM() {
        return FS_ENCRYPTION_MODE_AES_256_GCM;
    }
    private static final int FS_ENCRYPTION_MODE_AES_256_CBC = (int)3L;
    /**
     * {@snippet lang=c :
     * #define FS_ENCRYPTION_MODE_AES_256_CBC 3
     * }
     */
    public static int FS_ENCRYPTION_MODE_AES_256_CBC() {
        return FS_ENCRYPTION_MODE_AES_256_CBC;
    }
    private static final int MS_RDONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define MS_RDONLY 1
     * }
     */
    public static int MS_RDONLY() {
        return MS_RDONLY;
    }
    private static final int MS_NOSUID = (int)2L;
    /**
     * {@snippet lang=c :
     * #define MS_NOSUID 2
     * }
     */
    public static int MS_NOSUID() {
        return MS_NOSUID;
    }
    private static final int MS_NODEV = (int)4L;
    /**
     * {@snippet lang=c :
     * #define MS_NODEV 4
     * }
     */
    public static int MS_NODEV() {
        return MS_NODEV;
    }
    private static final int MS_NOEXEC = (int)8L;
    /**
     * {@snippet lang=c :
     * #define MS_NOEXEC 8
     * }
     */
    public static int MS_NOEXEC() {
        return MS_NOEXEC;
    }
    private static final int MS_SYNCHRONOUS = (int)16L;
    /**
     * {@snippet lang=c :
     * #define MS_SYNCHRONOUS 16
     * }
     */
    public static int MS_SYNCHRONOUS() {
        return MS_SYNCHRONOUS;
    }
    private static final int MS_REMOUNT = (int)32L;
    /**
     * {@snippet lang=c :
     * #define MS_REMOUNT 32
     * }
     */
    public static int MS_REMOUNT() {
        return MS_REMOUNT;
    }
    private static final int MS_MANDLOCK = (int)64L;
    /**
     * {@snippet lang=c :
     * #define MS_MANDLOCK 64
     * }
     */
    public static int MS_MANDLOCK() {
        return MS_MANDLOCK;
    }
    private static final int MS_DIRSYNC = (int)128L;
    /**
     * {@snippet lang=c :
     * #define MS_DIRSYNC 128
     * }
     */
    public static int MS_DIRSYNC() {
        return MS_DIRSYNC;
    }
    private static final int MS_NOSYMFOLLOW = (int)256L;
    /**
     * {@snippet lang=c :
     * #define MS_NOSYMFOLLOW 256
     * }
     */
    public static int MS_NOSYMFOLLOW() {
        return MS_NOSYMFOLLOW;
    }
    private static final int MS_NOATIME = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define MS_NOATIME 1024
     * }
     */
    public static int MS_NOATIME() {
        return MS_NOATIME;
    }
    private static final int MS_NODIRATIME = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define MS_NODIRATIME 2048
     * }
     */
    public static int MS_NODIRATIME() {
        return MS_NODIRATIME;
    }
    private static final int MS_BIND = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define MS_BIND 4096
     * }
     */
    public static int MS_BIND() {
        return MS_BIND;
    }
    private static final int MS_MOVE = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define MS_MOVE 8192
     * }
     */
    public static int MS_MOVE() {
        return MS_MOVE;
    }
    private static final int MS_REC = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define MS_REC 16384
     * }
     */
    public static int MS_REC() {
        return MS_REC;
    }
    private static final int MS_VERBOSE = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define MS_VERBOSE 32768
     * }
     */
    public static int MS_VERBOSE() {
        return MS_VERBOSE;
    }
    private static final int MS_SILENT = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define MS_SILENT 32768
     * }
     */
    public static int MS_SILENT() {
        return MS_SILENT;
    }
    private static final int OPEN_TREE_CLONE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define OPEN_TREE_CLONE 1
     * }
     */
    public static int OPEN_TREE_CLONE() {
        return OPEN_TREE_CLONE;
    }
    private static final int MOVE_MOUNT_F_SYMLINKS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT_F_SYMLINKS 1
     * }
     */
    public static int MOVE_MOUNT_F_SYMLINKS() {
        return MOVE_MOUNT_F_SYMLINKS;
    }
    private static final int MOVE_MOUNT_F_AUTOMOUNTS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT_F_AUTOMOUNTS 2
     * }
     */
    public static int MOVE_MOUNT_F_AUTOMOUNTS() {
        return MOVE_MOUNT_F_AUTOMOUNTS;
    }
    private static final int MOVE_MOUNT_F_EMPTY_PATH = (int)4L;
    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT_F_EMPTY_PATH 4
     * }
     */
    public static int MOVE_MOUNT_F_EMPTY_PATH() {
        return MOVE_MOUNT_F_EMPTY_PATH;
    }
    private static final int MOVE_MOUNT_T_SYMLINKS = (int)16L;
    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT_T_SYMLINKS 16
     * }
     */
    public static int MOVE_MOUNT_T_SYMLINKS() {
        return MOVE_MOUNT_T_SYMLINKS;
    }
    private static final int MOVE_MOUNT_T_AUTOMOUNTS = (int)32L;
    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT_T_AUTOMOUNTS 32
     * }
     */
    public static int MOVE_MOUNT_T_AUTOMOUNTS() {
        return MOVE_MOUNT_T_AUTOMOUNTS;
    }
    private static final int MOVE_MOUNT_T_EMPTY_PATH = (int)64L;
    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT_T_EMPTY_PATH 64
     * }
     */
    public static int MOVE_MOUNT_T_EMPTY_PATH() {
        return MOVE_MOUNT_T_EMPTY_PATH;
    }
    private static final int MOVE_MOUNT_SET_GROUP = (int)256L;
    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT_SET_GROUP 256
     * }
     */
    public static int MOVE_MOUNT_SET_GROUP() {
        return MOVE_MOUNT_SET_GROUP;
    }
    private static final int MOVE_MOUNT_BENEATH = (int)512L;
    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT_BENEATH 512
     * }
     */
    public static int MOVE_MOUNT_BENEATH() {
        return MOVE_MOUNT_BENEATH;
    }
    private static final int MOVE_MOUNT__MASK = (int)887L;
    /**
     * {@snippet lang=c :
     * #define MOVE_MOUNT__MASK 887
     * }
     */
    public static int MOVE_MOUNT__MASK() {
        return MOVE_MOUNT__MASK;
    }
    private static final int FSOPEN_CLOEXEC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FSOPEN_CLOEXEC 1
     * }
     */
    public static int FSOPEN_CLOEXEC() {
        return FSOPEN_CLOEXEC;
    }
    private static final int FSPICK_CLOEXEC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FSPICK_CLOEXEC 1
     * }
     */
    public static int FSPICK_CLOEXEC() {
        return FSPICK_CLOEXEC;
    }
    private static final int FSPICK_SYMLINK_NOFOLLOW = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FSPICK_SYMLINK_NOFOLLOW 2
     * }
     */
    public static int FSPICK_SYMLINK_NOFOLLOW() {
        return FSPICK_SYMLINK_NOFOLLOW;
    }
    private static final int FSPICK_NO_AUTOMOUNT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FSPICK_NO_AUTOMOUNT 4
     * }
     */
    public static int FSPICK_NO_AUTOMOUNT() {
        return FSPICK_NO_AUTOMOUNT;
    }
    private static final int FSPICK_EMPTY_PATH = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FSPICK_EMPTY_PATH 8
     * }
     */
    public static int FSPICK_EMPTY_PATH() {
        return FSPICK_EMPTY_PATH;
    }
    private static final int FSMOUNT_CLOEXEC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FSMOUNT_CLOEXEC 1
     * }
     */
    public static int FSMOUNT_CLOEXEC() {
        return FSMOUNT_CLOEXEC;
    }
    private static final int MOUNT_ATTR_RDONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_RDONLY 1
     * }
     */
    public static int MOUNT_ATTR_RDONLY() {
        return MOUNT_ATTR_RDONLY;
    }
    private static final int MOUNT_ATTR_NOSUID = (int)2L;
    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_NOSUID 2
     * }
     */
    public static int MOUNT_ATTR_NOSUID() {
        return MOUNT_ATTR_NOSUID;
    }
    private static final int MOUNT_ATTR_NODEV = (int)4L;
    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_NODEV 4
     * }
     */
    public static int MOUNT_ATTR_NODEV() {
        return MOUNT_ATTR_NODEV;
    }
    private static final int MOUNT_ATTR_NOEXEC = (int)8L;
    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_NOEXEC 8
     * }
     */
    public static int MOUNT_ATTR_NOEXEC() {
        return MOUNT_ATTR_NOEXEC;
    }
    private static final int MOUNT_ATTR__ATIME = (int)112L;
    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR__ATIME 112
     * }
     */
    public static int MOUNT_ATTR__ATIME() {
        return MOUNT_ATTR__ATIME;
    }
    private static final int MOUNT_ATTR_RELATIME = (int)0L;
    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_RELATIME 0
     * }
     */
    public static int MOUNT_ATTR_RELATIME() {
        return MOUNT_ATTR_RELATIME;
    }
    private static final int MOUNT_ATTR_NOATIME = (int)16L;
    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_NOATIME 16
     * }
     */
    public static int MOUNT_ATTR_NOATIME() {
        return MOUNT_ATTR_NOATIME;
    }
    private static final int MOUNT_ATTR_STRICTATIME = (int)32L;
    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_STRICTATIME 32
     * }
     */
    public static int MOUNT_ATTR_STRICTATIME() {
        return MOUNT_ATTR_STRICTATIME;
    }
    private static final int MOUNT_ATTR_NODIRATIME = (int)128L;
    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_NODIRATIME 128
     * }
     */
    public static int MOUNT_ATTR_NODIRATIME() {
        return MOUNT_ATTR_NODIRATIME;
    }
    private static final int MOUNT_ATTR_IDMAP = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_IDMAP 1048576
     * }
     */
    public static int MOUNT_ATTR_IDMAP() {
        return MOUNT_ATTR_IDMAP;
    }
    private static final int MOUNT_ATTR_NOSYMFOLLOW = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_NOSYMFOLLOW 2097152
     * }
     */
    public static int MOUNT_ATTR_NOSYMFOLLOW() {
        return MOUNT_ATTR_NOSYMFOLLOW;
    }
    private static final int MOUNT_ATTR_SIZE_VER0 = (int)32L;
    /**
     * {@snippet lang=c :
     * #define MOUNT_ATTR_SIZE_VER0 32
     * }
     */
    public static int MOUNT_ATTR_SIZE_VER0() {
        return MOUNT_ATTR_SIZE_VER0;
    }
    private static final int MNT_ID_REQ_SIZE_VER0 = (int)24L;
    /**
     * {@snippet lang=c :
     * #define MNT_ID_REQ_SIZE_VER0 24
     * }
     */
    public static int MNT_ID_REQ_SIZE_VER0() {
        return MNT_ID_REQ_SIZE_VER0;
    }
    private static final int INR_OPEN_CUR = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define INR_OPEN_CUR 1024
     * }
     */
    public static int INR_OPEN_CUR() {
        return INR_OPEN_CUR;
    }
    private static final int INR_OPEN_MAX = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define INR_OPEN_MAX 4096
     * }
     */
    public static int INR_OPEN_MAX() {
        return INR_OPEN_MAX;
    }
    private static final int BLOCK_SIZE_BITS = (int)10L;
    /**
     * {@snippet lang=c :
     * #define BLOCK_SIZE_BITS 10
     * }
     */
    public static int BLOCK_SIZE_BITS() {
        return BLOCK_SIZE_BITS;
    }
    private static final int SEEK_DATA = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SEEK_DATA 3
     * }
     */
    public static int SEEK_DATA() {
        return SEEK_DATA;
    }
    private static final int SEEK_HOLE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SEEK_HOLE 4
     * }
     */
    public static int SEEK_HOLE() {
        return SEEK_HOLE;
    }
    private static final int FILE_DEDUPE_RANGE_SAME = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FILE_DEDUPE_RANGE_SAME 0
     * }
     */
    public static int FILE_DEDUPE_RANGE_SAME() {
        return FILE_DEDUPE_RANGE_SAME;
    }
    private static final int FILE_DEDUPE_RANGE_DIFFERS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FILE_DEDUPE_RANGE_DIFFERS 1
     * }
     */
    public static int FILE_DEDUPE_RANGE_DIFFERS() {
        return FILE_DEDUPE_RANGE_DIFFERS;
    }
    private static final int NR_FILE = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define NR_FILE 8192
     * }
     */
    public static int NR_FILE() {
        return NR_FILE;
    }
    private static final int FS_XFLAG_REALTIME = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_REALTIME 1
     * }
     */
    public static int FS_XFLAG_REALTIME() {
        return FS_XFLAG_REALTIME;
    }
    private static final int FS_XFLAG_PREALLOC = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_PREALLOC 2
     * }
     */
    public static int FS_XFLAG_PREALLOC() {
        return FS_XFLAG_PREALLOC;
    }
    private static final int FS_XFLAG_IMMUTABLE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_IMMUTABLE 8
     * }
     */
    public static int FS_XFLAG_IMMUTABLE() {
        return FS_XFLAG_IMMUTABLE;
    }
    private static final int FS_XFLAG_APPEND = (int)16L;
    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_APPEND 16
     * }
     */
    public static int FS_XFLAG_APPEND() {
        return FS_XFLAG_APPEND;
    }
    private static final int FS_XFLAG_SYNC = (int)32L;
    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_SYNC 32
     * }
     */
    public static int FS_XFLAG_SYNC() {
        return FS_XFLAG_SYNC;
    }
    private static final int FS_XFLAG_NOATIME = (int)64L;
    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_NOATIME 64
     * }
     */
    public static int FS_XFLAG_NOATIME() {
        return FS_XFLAG_NOATIME;
    }
    private static final int FS_XFLAG_NODUMP = (int)128L;
    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_NODUMP 128
     * }
     */
    public static int FS_XFLAG_NODUMP() {
        return FS_XFLAG_NODUMP;
    }
    private static final int FS_XFLAG_RTINHERIT = (int)256L;
    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_RTINHERIT 256
     * }
     */
    public static int FS_XFLAG_RTINHERIT() {
        return FS_XFLAG_RTINHERIT;
    }
    private static final int FS_XFLAG_PROJINHERIT = (int)512L;
    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_PROJINHERIT 512
     * }
     */
    public static int FS_XFLAG_PROJINHERIT() {
        return FS_XFLAG_PROJINHERIT;
    }
    private static final int FS_XFLAG_NOSYMLINKS = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_NOSYMLINKS 1024
     * }
     */
    public static int FS_XFLAG_NOSYMLINKS() {
        return FS_XFLAG_NOSYMLINKS;
    }
    private static final int FS_XFLAG_EXTSIZE = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_EXTSIZE 2048
     * }
     */
    public static int FS_XFLAG_EXTSIZE() {
        return FS_XFLAG_EXTSIZE;
    }
    private static final int FS_XFLAG_EXTSZINHERIT = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_EXTSZINHERIT 4096
     * }
     */
    public static int FS_XFLAG_EXTSZINHERIT() {
        return FS_XFLAG_EXTSZINHERIT;
    }
    private static final int FS_XFLAG_NODEFRAG = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_NODEFRAG 8192
     * }
     */
    public static int FS_XFLAG_NODEFRAG() {
        return FS_XFLAG_NODEFRAG;
    }
    private static final int FS_XFLAG_FILESTREAM = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_FILESTREAM 16384
     * }
     */
    public static int FS_XFLAG_FILESTREAM() {
        return FS_XFLAG_FILESTREAM;
    }
    private static final int FS_XFLAG_DAX = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_DAX 32768
     * }
     */
    public static int FS_XFLAG_DAX() {
        return FS_XFLAG_DAX;
    }
    private static final int FS_XFLAG_COWEXTSIZE = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define FS_XFLAG_COWEXTSIZE 65536
     * }
     */
    public static int FS_XFLAG_COWEXTSIZE() {
        return FS_XFLAG_COWEXTSIZE;
    }
    private static final int BMAP_IOCTL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BMAP_IOCTL 1
     * }
     */
    public static int BMAP_IOCTL() {
        return BMAP_IOCTL;
    }
    private static final int FSLABEL_MAX = (int)256L;
    /**
     * {@snippet lang=c :
     * #define FSLABEL_MAX 256
     * }
     */
    public static int FSLABEL_MAX() {
        return FSLABEL_MAX;
    }
    private static final int FS_SECRM_FL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FS_SECRM_FL 1
     * }
     */
    public static int FS_SECRM_FL() {
        return FS_SECRM_FL;
    }
    private static final int FS_UNRM_FL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FS_UNRM_FL 2
     * }
     */
    public static int FS_UNRM_FL() {
        return FS_UNRM_FL;
    }
    private static final int FS_COMPR_FL = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FS_COMPR_FL 4
     * }
     */
    public static int FS_COMPR_FL() {
        return FS_COMPR_FL;
    }
    private static final int FS_SYNC_FL = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FS_SYNC_FL 8
     * }
     */
    public static int FS_SYNC_FL() {
        return FS_SYNC_FL;
    }
    private static final int FS_IMMUTABLE_FL = (int)16L;
    /**
     * {@snippet lang=c :
     * #define FS_IMMUTABLE_FL 16
     * }
     */
    public static int FS_IMMUTABLE_FL() {
        return FS_IMMUTABLE_FL;
    }
    private static final int FS_APPEND_FL = (int)32L;
    /**
     * {@snippet lang=c :
     * #define FS_APPEND_FL 32
     * }
     */
    public static int FS_APPEND_FL() {
        return FS_APPEND_FL;
    }
    private static final int FS_NODUMP_FL = (int)64L;
    /**
     * {@snippet lang=c :
     * #define FS_NODUMP_FL 64
     * }
     */
    public static int FS_NODUMP_FL() {
        return FS_NODUMP_FL;
    }
    private static final int FS_NOATIME_FL = (int)128L;
    /**
     * {@snippet lang=c :
     * #define FS_NOATIME_FL 128
     * }
     */
    public static int FS_NOATIME_FL() {
        return FS_NOATIME_FL;
    }
    private static final int FS_DIRTY_FL = (int)256L;
    /**
     * {@snippet lang=c :
     * #define FS_DIRTY_FL 256
     * }
     */
    public static int FS_DIRTY_FL() {
        return FS_DIRTY_FL;
    }
    private static final int FS_COMPRBLK_FL = (int)512L;
    /**
     * {@snippet lang=c :
     * #define FS_COMPRBLK_FL 512
     * }
     */
    public static int FS_COMPRBLK_FL() {
        return FS_COMPRBLK_FL;
    }
    private static final int FS_NOCOMP_FL = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FS_NOCOMP_FL 1024
     * }
     */
    public static int FS_NOCOMP_FL() {
        return FS_NOCOMP_FL;
    }
    private static final int FS_ENCRYPT_FL = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define FS_ENCRYPT_FL 2048
     * }
     */
    public static int FS_ENCRYPT_FL() {
        return FS_ENCRYPT_FL;
    }
    private static final int FS_BTREE_FL = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define FS_BTREE_FL 4096
     * }
     */
    public static int FS_BTREE_FL() {
        return FS_BTREE_FL;
    }
    private static final int FS_INDEX_FL = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define FS_INDEX_FL 4096
     * }
     */
    public static int FS_INDEX_FL() {
        return FS_INDEX_FL;
    }
    private static final int FS_IMAGIC_FL = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define FS_IMAGIC_FL 8192
     * }
     */
    public static int FS_IMAGIC_FL() {
        return FS_IMAGIC_FL;
    }
    private static final int FS_JOURNAL_DATA_FL = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define FS_JOURNAL_DATA_FL 16384
     * }
     */
    public static int FS_JOURNAL_DATA_FL() {
        return FS_JOURNAL_DATA_FL;
    }
    private static final int FS_NOTAIL_FL = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define FS_NOTAIL_FL 32768
     * }
     */
    public static int FS_NOTAIL_FL() {
        return FS_NOTAIL_FL;
    }
    private static final int FS_DIRSYNC_FL = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define FS_DIRSYNC_FL 65536
     * }
     */
    public static int FS_DIRSYNC_FL() {
        return FS_DIRSYNC_FL;
    }
    private static final int FS_TOPDIR_FL = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define FS_TOPDIR_FL 131072
     * }
     */
    public static int FS_TOPDIR_FL() {
        return FS_TOPDIR_FL;
    }
    private static final int FS_HUGE_FILE_FL = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define FS_HUGE_FILE_FL 262144
     * }
     */
    public static int FS_HUGE_FILE_FL() {
        return FS_HUGE_FILE_FL;
    }
    private static final int FS_EXTENT_FL = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define FS_EXTENT_FL 524288
     * }
     */
    public static int FS_EXTENT_FL() {
        return FS_EXTENT_FL;
    }
    private static final int FS_VERITY_FL = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define FS_VERITY_FL 1048576
     * }
     */
    public static int FS_VERITY_FL() {
        return FS_VERITY_FL;
    }
    private static final int FS_EA_INODE_FL = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define FS_EA_INODE_FL 2097152
     * }
     */
    public static int FS_EA_INODE_FL() {
        return FS_EA_INODE_FL;
    }
    private static final int FS_EOFBLOCKS_FL = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define FS_EOFBLOCKS_FL 4194304
     * }
     */
    public static int FS_EOFBLOCKS_FL() {
        return FS_EOFBLOCKS_FL;
    }
    private static final int FS_NOCOW_FL = (int)8388608L;
    /**
     * {@snippet lang=c :
     * #define FS_NOCOW_FL 8388608
     * }
     */
    public static int FS_NOCOW_FL() {
        return FS_NOCOW_FL;
    }
    private static final int FS_DAX_FL = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define FS_DAX_FL 33554432
     * }
     */
    public static int FS_DAX_FL() {
        return FS_DAX_FL;
    }
    private static final int FS_INLINE_DATA_FL = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define FS_INLINE_DATA_FL 268435456
     * }
     */
    public static int FS_INLINE_DATA_FL() {
        return FS_INLINE_DATA_FL;
    }
    private static final int FS_PROJINHERIT_FL = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define FS_PROJINHERIT_FL 536870912
     * }
     */
    public static int FS_PROJINHERIT_FL() {
        return FS_PROJINHERIT_FL;
    }
    private static final int FS_CASEFOLD_FL = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define FS_CASEFOLD_FL 1073741824
     * }
     */
    public static int FS_CASEFOLD_FL() {
        return FS_CASEFOLD_FL;
    }
    private static final int FS_FL_USER_VISIBLE = (int)253951L;
    /**
     * {@snippet lang=c :
     * #define FS_FL_USER_VISIBLE 253951
     * }
     */
    public static int FS_FL_USER_VISIBLE() {
        return FS_FL_USER_VISIBLE;
    }
    private static final int FS_FL_USER_MODIFIABLE = (int)229631L;
    /**
     * {@snippet lang=c :
     * #define FS_FL_USER_MODIFIABLE 229631
     * }
     */
    public static int FS_FL_USER_MODIFIABLE() {
        return FS_FL_USER_MODIFIABLE;
    }
    private static final int SYNC_FILE_RANGE_WAIT_BEFORE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SYNC_FILE_RANGE_WAIT_BEFORE 1
     * }
     */
    public static int SYNC_FILE_RANGE_WAIT_BEFORE() {
        return SYNC_FILE_RANGE_WAIT_BEFORE;
    }
    private static final int SYNC_FILE_RANGE_WRITE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SYNC_FILE_RANGE_WRITE 2
     * }
     */
    public static int SYNC_FILE_RANGE_WRITE() {
        return SYNC_FILE_RANGE_WRITE;
    }
    private static final int SYNC_FILE_RANGE_WAIT_AFTER = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SYNC_FILE_RANGE_WAIT_AFTER 4
     * }
     */
    public static int SYNC_FILE_RANGE_WAIT_AFTER() {
        return SYNC_FILE_RANGE_WAIT_AFTER;
    }
    private static final int IORING_CQE_BUFFER_SHIFT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define IORING_CQE_BUFFER_SHIFT 16
     * }
     */
    public static int IORING_CQE_BUFFER_SHIFT() {
        return IORING_CQE_BUFFER_SHIFT;
    }
    private static final int IORING_OFF_PBUF_SHIFT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define IORING_OFF_PBUF_SHIFT 16
     * }
     */
    public static int IORING_OFF_PBUF_SHIFT() {
        return IORING_OFF_PBUF_SHIFT;
    }
    private static final int IO_URING_VERSION_MAJOR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define IO_URING_VERSION_MAJOR 2
     * }
     */
    public static int IO_URING_VERSION_MAJOR() {
        return IO_URING_VERSION_MAJOR;
    }
    private static final int IO_URING_VERSION_MINOR = (int)8L;
    /**
     * {@snippet lang=c :
     * #define IO_URING_VERSION_MINOR 8
     * }
     */
    public static int IO_URING_VERSION_MINOR() {
        return IO_URING_VERSION_MINOR;
    }
    private static final int __NR_io_uring_setup = (int)425L;
    /**
     * {@snippet lang=c :
     * #define __NR_io_uring_setup 425
     * }
     */
    public static int __NR_io_uring_setup() {
        return __NR_io_uring_setup;
    }
    private static final int __NR_io_uring_enter = (int)426L;
    /**
     * {@snippet lang=c :
     * #define __NR_io_uring_enter 426
     * }
     */
    public static int __NR_io_uring_enter() {
        return __NR_io_uring_enter;
    }
    private static final int __NR_io_uring_register = (int)427L;
    /**
     * {@snippet lang=c :
     * #define __NR_io_uring_register 427
     * }
     */
    public static int __NR_io_uring_register() {
        return __NR_io_uring_register;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = liburingtest.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = liburingtest.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = liburingtest.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = liburingtest.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = liburingtest.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = liburingtest.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = liburingtest.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = liburingtest.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = liburingtest.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = liburingtest.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __nlink_t
     * }
     */
    public static final OfLong __nlink_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds64_t
     * }
     */
    public static final OfLong __suseconds64_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = liburingtest.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __blksize_t
     * }
     */
    public static final OfLong __blksize_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = liburingtest.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u_char u_char
     * }
     */
    public static final OfByte u_char = liburingtest.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __u_short u_short
     * }
     */
    public static final OfShort u_short = liburingtest.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u_int u_int
     * }
     */
    public static final OfInt u_int = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u_long u_long
     * }
     */
    public static final OfLong u_long = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __quad_t quad_t
     * }
     */
    public static final OfLong quad_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __u_quad_t u_quad_t
     * }
     */
    public static final OfLong u_quad_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __loff_t loff_t
     * }
     */
    public static final OfLong loff_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __ino_t ino_t
     * }
     */
    public static final OfLong ino_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __dev_t dev_t
     * }
     */
    public static final OfLong dev_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __gid_t gid_t
     * }
     */
    public static final OfInt gid_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __mode_t mode_t
     * }
     */
    public static final OfInt mode_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __nlink_t nlink_t
     * }
     */
    public static final OfLong nlink_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uid_t uid_t
     * }
     */
    public static final OfInt uid_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __off_t off_t
     * }
     */
    public static final OfLong off_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __pid_t pid_t
     * }
     */
    public static final OfInt pid_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __id_t id_t
     * }
     */
    public static final OfInt id_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __ssize_t ssize_t
     * }
     */
    public static final OfLong ssize_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __daddr_t daddr_t
     * }
     */
    public static final OfInt daddr_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __caddr_t caddr_t
     * }
     */
    public static final AddressLayout caddr_t = liburingtest.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __key_t key_t
     * }
     */
    public static final OfInt key_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __clock_t clock_t
     * }
     */
    public static final OfLong clock_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __clockid_t clockid_t
     * }
     */
    public static final OfInt clockid_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __time_t time_t
     * }
     */
    public static final OfLong time_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __timer_t timer_t
     * }
     */
    public static final AddressLayout timer_t = liburingtest.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned long ulong
     * }
     */
    public static final OfLong ulong = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned short ushort
     * }
     */
    public static final OfShort ushort = liburingtest.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint
     * }
     */
    public static final OfInt uint = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int8_t int8_t
     * }
     */
    public static final OfByte int8_t = liburingtest.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t int16_t
     * }
     */
    public static final OfShort int16_t = liburingtest.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t int32_t
     * }
     */
    public static final OfInt int32_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t int64_t
     * }
     */
    public static final OfLong int64_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t u_int8_t
     * }
     */
    public static final OfByte u_int8_t = liburingtest.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t u_int16_t
     * }
     */
    public static final OfShort u_int16_t = liburingtest.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t u_int32_t
     * }
     */
    public static final OfInt u_int32_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t u_int64_t
     * }
     */
    public static final OfLong u_int64_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int register_t
     * }
     */
    public static final OfLong register_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __suseconds_t suseconds_t
     * }
     */
    public static final OfLong suseconds_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fd_mask
     * }
     */
    public static final OfLong __fd_mask = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fd_mask fd_mask
     * }
     */
    public static final OfLong fd_mask = liburingtest.C_LONG;

    private static class select {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("select");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static FunctionDescriptor select$descriptor() {
        return select.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static MethodHandle select$handle() {
        return select.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static MemorySegment select$address() {
        return select.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("select", __nfds, __readfds, __writefds, __exceptfds, __timeout);
            }
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pselect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("pselect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static FunctionDescriptor pselect$descriptor() {
        return pselect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static MethodHandle pselect$handle() {
        return pselect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static MemorySegment pselect$address() {
        return pselect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pselect", __nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
            }
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __blksize_t blksize_t
     * }
     */
    public static final OfLong blksize_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __blkcnt_t blkcnt_t
     * }
     */
    public static final OfLong blkcnt_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fsblkcnt_t fsblkcnt_t
     * }
     */
    public static final OfLong fsblkcnt_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fsfilcnt_t fsfilcnt_t
     * }
     */
    public static final OfLong fsfilcnt_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __tss_t
     * }
     */
    public static final OfInt __tss_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __thrd_t
     * }
     */
    public static final OfLong __thrd_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long pthread_t
     * }
     */
    public static final OfLong pthread_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int pthread_key_t
     * }
     */
    public static final OfInt pthread_key_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int pthread_once_t
     * }
     */
    public static final OfInt pthread_once_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef volatile int pthread_spinlock_t
     * }
     */
    public static final OfInt pthread_spinlock_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __socklen_t socklen_t
     * }
     */
    public static final OfInt socklen_t = liburingtest.C_INT;
    private static final int SOCK_STREAM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_STREAM = 1
     * }
     */
    public static int SOCK_STREAM() {
        return SOCK_STREAM;
    }
    private static final int SOCK_DGRAM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_DGRAM = 2
     * }
     */
    public static int SOCK_DGRAM() {
        return SOCK_DGRAM;
    }
    private static final int SOCK_RAW = (int)3L;
    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_RAW = 3
     * }
     */
    public static int SOCK_RAW() {
        return SOCK_RAW;
    }
    private static final int SOCK_RDM = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_RDM = 4
     * }
     */
    public static int SOCK_RDM() {
        return SOCK_RDM;
    }
    private static final int SOCK_SEQPACKET = (int)5L;
    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_SEQPACKET = 5
     * }
     */
    public static int SOCK_SEQPACKET() {
        return SOCK_SEQPACKET;
    }
    private static final int SOCK_DCCP = (int)6L;
    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_DCCP = 6
     * }
     */
    public static int SOCK_DCCP() {
        return SOCK_DCCP;
    }
    private static final int SOCK_PACKET = (int)10L;
    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_PACKET = 10
     * }
     */
    public static int SOCK_PACKET() {
        return SOCK_PACKET;
    }
    private static final int SOCK_CLOEXEC = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_CLOEXEC = 524288
     * }
     */
    public static int SOCK_CLOEXEC() {
        return SOCK_CLOEXEC;
    }
    private static final int SOCK_NONBLOCK = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum __socket_type.SOCK_NONBLOCK = 2048
     * }
     */
    public static int SOCK_NONBLOCK() {
        return SOCK_NONBLOCK;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned short sa_family_t
     * }
     */
    public static final OfShort sa_family_t = liburingtest.C_SHORT;
    private static final int MSG_OOB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_OOB = 1
     * }
     */
    public static int MSG_OOB() {
        return MSG_OOB;
    }
    private static final int MSG_PEEK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_PEEK = 2
     * }
     */
    public static int MSG_PEEK() {
        return MSG_PEEK;
    }
    private static final int MSG_DONTROUTE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_DONTROUTE = 4
     * }
     */
    public static int MSG_DONTROUTE() {
        return MSG_DONTROUTE;
    }
    private static final int MSG_CTRUNC = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_CTRUNC = 8
     * }
     */
    public static int MSG_CTRUNC() {
        return MSG_CTRUNC;
    }
    private static final int MSG_PROXY = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_PROXY = 16
     * }
     */
    public static int MSG_PROXY() {
        return MSG_PROXY;
    }
    private static final int MSG_TRUNC = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_TRUNC = 32
     * }
     */
    public static int MSG_TRUNC() {
        return MSG_TRUNC;
    }
    private static final int MSG_DONTWAIT = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_DONTWAIT = 64
     * }
     */
    public static int MSG_DONTWAIT() {
        return MSG_DONTWAIT;
    }
    private static final int MSG_EOR = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_EOR = 128
     * }
     */
    public static int MSG_EOR() {
        return MSG_EOR;
    }
    private static final int MSG_WAITALL = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_WAITALL = 256
     * }
     */
    public static int MSG_WAITALL() {
        return MSG_WAITALL;
    }
    private static final int MSG_FIN = (int)512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_FIN = 512
     * }
     */
    public static int MSG_FIN() {
        return MSG_FIN;
    }
    private static final int MSG_SYN = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_SYN = 1024
     * }
     */
    public static int MSG_SYN() {
        return MSG_SYN;
    }
    private static final int MSG_CONFIRM = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_CONFIRM = 2048
     * }
     */
    public static int MSG_CONFIRM() {
        return MSG_CONFIRM;
    }
    private static final int MSG_RST = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_RST = 4096
     * }
     */
    public static int MSG_RST() {
        return MSG_RST;
    }
    private static final int MSG_ERRQUEUE = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_ERRQUEUE = 8192
     * }
     */
    public static int MSG_ERRQUEUE() {
        return MSG_ERRQUEUE;
    }
    private static final int MSG_NOSIGNAL = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_NOSIGNAL = 16384
     * }
     */
    public static int MSG_NOSIGNAL() {
        return MSG_NOSIGNAL;
    }
    private static final int MSG_MORE = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_MORE = 32768
     * }
     */
    public static int MSG_MORE() {
        return MSG_MORE;
    }
    private static final int MSG_WAITFORONE = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_WAITFORONE = 65536
     * }
     */
    public static int MSG_WAITFORONE() {
        return MSG_WAITFORONE;
    }
    private static final int MSG_BATCH = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_BATCH = 262144
     * }
     */
    public static int MSG_BATCH() {
        return MSG_BATCH;
    }
    private static final int MSG_ZEROCOPY = (int)67108864L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_ZEROCOPY = 67108864
     * }
     */
    public static int MSG_ZEROCOPY() {
        return MSG_ZEROCOPY;
    }
    private static final int MSG_FASTOPEN = (int)536870912L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_FASTOPEN = 536870912
     * }
     */
    public static int MSG_FASTOPEN() {
        return MSG_FASTOPEN;
    }
    private static final int MSG_CMSG_CLOEXEC = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MSG_CMSG_CLOEXEC = 1073741824
     * }
     */
    public static int MSG_CMSG_CLOEXEC() {
        return MSG_CMSG_CLOEXEC;
    }

    private static class __cmsg_nxthdr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_POINTER,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("__cmsg_nxthdr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct cmsghdr *__cmsg_nxthdr(struct msghdr *__mhdr, struct cmsghdr *__cmsg)
     * }
     */
    public static FunctionDescriptor __cmsg_nxthdr$descriptor() {
        return __cmsg_nxthdr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct cmsghdr *__cmsg_nxthdr(struct msghdr *__mhdr, struct cmsghdr *__cmsg)
     * }
     */
    public static MethodHandle __cmsg_nxthdr$handle() {
        return __cmsg_nxthdr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct cmsghdr *__cmsg_nxthdr(struct msghdr *__mhdr, struct cmsghdr *__cmsg)
     * }
     */
    public static MemorySegment __cmsg_nxthdr$address() {
        return __cmsg_nxthdr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct cmsghdr *__cmsg_nxthdr(struct msghdr *__mhdr, struct cmsghdr *__cmsg)
     * }
     */
    public static MemorySegment __cmsg_nxthdr(MemorySegment __mhdr, MemorySegment __cmsg) {
        var mh$ = __cmsg_nxthdr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__cmsg_nxthdr", __mhdr, __cmsg);
            }
            return (MemorySegment)mh$.invokeExact(__mhdr, __cmsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int SCM_RIGHTS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SCM_RIGHTS = 1
     * }
     */
    public static int SCM_RIGHTS() {
        return SCM_RIGHTS;
    }
    /**
     * {@snippet lang=c :
     * typedef int __kernel_key_t
     * }
     */
    public static final OfInt __kernel_key_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_mqd_t
     * }
     */
    public static final OfInt __kernel_mqd_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __kernel_old_uid_t
     * }
     */
    public static final OfShort __kernel_old_uid_t = liburingtest.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __kernel_old_gid_t
     * }
     */
    public static final OfShort __kernel_old_gid_t = liburingtest.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __kernel_old_dev_t
     * }
     */
    public static final OfLong __kernel_old_dev_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __kernel_long_t
     * }
     */
    public static final OfLong __kernel_long_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __kernel_ulong_t
     * }
     */
    public static final OfLong __kernel_ulong_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_ulong_t __kernel_ino_t
     * }
     */
    public static final OfLong __kernel_ino_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_mode_t
     * }
     */
    public static final OfInt __kernel_mode_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_pid_t
     * }
     */
    public static final OfInt __kernel_pid_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_ipc_pid_t
     * }
     */
    public static final OfInt __kernel_ipc_pid_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_uid_t
     * }
     */
    public static final OfInt __kernel_uid_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_gid_t
     * }
     */
    public static final OfInt __kernel_gid_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_suseconds_t
     * }
     */
    public static final OfLong __kernel_suseconds_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_daddr_t
     * }
     */
    public static final OfInt __kernel_daddr_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_uid32_t
     * }
     */
    public static final OfInt __kernel_uid32_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_gid32_t
     * }
     */
    public static final OfInt __kernel_gid32_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __kernel_ulong_t __kernel_size_t
     * }
     */
    public static final OfLong __kernel_size_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_ssize_t
     * }
     */
    public static final OfLong __kernel_ssize_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_ptrdiff_t
     * }
     */
    public static final OfLong __kernel_ptrdiff_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_off_t
     * }
     */
    public static final OfLong __kernel_off_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long __kernel_loff_t
     * }
     */
    public static final OfLong __kernel_loff_t = liburingtest.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_old_time_t
     * }
     */
    public static final OfLong __kernel_old_time_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_time_t
     * }
     */
    public static final OfLong __kernel_time_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long __kernel_time64_t
     * }
     */
    public static final OfLong __kernel_time64_t = liburingtest.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_clock_t
     * }
     */
    public static final OfLong __kernel_clock_t = liburingtest.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_timer_t
     * }
     */
    public static final OfInt __kernel_timer_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_clockid_t
     * }
     */
    public static final OfInt __kernel_clockid_t = liburingtest.C_INT;
    /**
     * {@snippet lang=c :
     * typedef char *__kernel_caddr_t
     * }
     */
    public static final AddressLayout __kernel_caddr_t = liburingtest.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __kernel_uid16_t
     * }
     */
    public static final OfShort __kernel_uid16_t = liburingtest.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __kernel_gid16_t
     * }
     */
    public static final OfShort __kernel_gid16_t = liburingtest.C_SHORT;
    private static final int SHUT_RD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SHUT_RD = 0
     * }
     */
    public static int SHUT_RD() {
        return SHUT_RD;
    }
    private static final int SHUT_WR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SHUT_WR = 1
     * }
     */
    public static int SHUT_WR() {
        return SHUT_WR;
    }
    private static final int SHUT_RDWR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SHUT_RDWR = 2
     * }
     */
    public static int SHUT_RDWR() {
        return SHUT_RDWR;
    }

    private static class socket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("socket");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int socket(int __domain, int __type, int __protocol)
     * }
     */
    public static FunctionDescriptor socket$descriptor() {
        return socket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int socket(int __domain, int __type, int __protocol)
     * }
     */
    public static MethodHandle socket$handle() {
        return socket.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int socket(int __domain, int __type, int __protocol)
     * }
     */
    public static MemorySegment socket$address() {
        return socket.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int socket(int __domain, int __type, int __protocol)
     * }
     */
    public static int socket(int __domain, int __type, int __protocol) {
        var mh$ = socket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("socket", __domain, __type, __protocol);
            }
            return (int)mh$.invokeExact(__domain, __type, __protocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class socketpair {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("socketpair");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int socketpair(int __domain, int __type, int __protocol, int __fds[2])
     * }
     */
    public static FunctionDescriptor socketpair$descriptor() {
        return socketpair.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int socketpair(int __domain, int __type, int __protocol, int __fds[2])
     * }
     */
    public static MethodHandle socketpair$handle() {
        return socketpair.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int socketpair(int __domain, int __type, int __protocol, int __fds[2])
     * }
     */
    public static MemorySegment socketpair$address() {
        return socketpair.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int socketpair(int __domain, int __type, int __protocol, int __fds[2])
     * }
     */
    public static int socketpair(int __domain, int __type, int __protocol, MemorySegment __fds) {
        var mh$ = socketpair.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("socketpair", __domain, __type, __protocol, __fds);
            }
            return (int)mh$.invokeExact(__domain, __type, __protocol, __fds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("bind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int bind(int __fd, const struct sockaddr *__addr, socklen_t __len)
     * }
     */
    public static FunctionDescriptor bind$descriptor() {
        return bind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int bind(int __fd, const struct sockaddr *__addr, socklen_t __len)
     * }
     */
    public static MethodHandle bind$handle() {
        return bind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int bind(int __fd, const struct sockaddr *__addr, socklen_t __len)
     * }
     */
    public static MemorySegment bind$address() {
        return bind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int bind(int __fd, const struct sockaddr *__addr, socklen_t __len)
     * }
     */
    public static int bind(int __fd, MemorySegment __addr, int __len) {
        var mh$ = bind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bind", __fd, __addr, __len);
            }
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getsockname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("getsockname");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getsockname(int __fd, struct sockaddr *restrict __addr, socklen_t *restrict __len)
     * }
     */
    public static FunctionDescriptor getsockname$descriptor() {
        return getsockname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getsockname(int __fd, struct sockaddr *restrict __addr, socklen_t *restrict __len)
     * }
     */
    public static MethodHandle getsockname$handle() {
        return getsockname.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getsockname(int __fd, struct sockaddr *restrict __addr, socklen_t *restrict __len)
     * }
     */
    public static MemorySegment getsockname$address() {
        return getsockname.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int getsockname(int __fd, struct sockaddr *restrict __addr, socklen_t *restrict __len)
     * }
     */
    public static int getsockname(int __fd, MemorySegment __addr, MemorySegment __len) {
        var mh$ = getsockname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getsockname", __fd, __addr, __len);
            }
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class connect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("connect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int connect(int __fd, const struct sockaddr *__addr, socklen_t __len)
     * }
     */
    public static FunctionDescriptor connect$descriptor() {
        return connect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int connect(int __fd, const struct sockaddr *__addr, socklen_t __len)
     * }
     */
    public static MethodHandle connect$handle() {
        return connect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int connect(int __fd, const struct sockaddr *__addr, socklen_t __len)
     * }
     */
    public static MemorySegment connect$address() {
        return connect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int connect(int __fd, const struct sockaddr *__addr, socklen_t __len)
     * }
     */
    public static int connect(int __fd, MemorySegment __addr, int __len) {
        var mh$ = connect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("connect", __fd, __addr, __len);
            }
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getpeername {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("getpeername");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getpeername(int __fd, struct sockaddr *restrict __addr, socklen_t *restrict __len)
     * }
     */
    public static FunctionDescriptor getpeername$descriptor() {
        return getpeername.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getpeername(int __fd, struct sockaddr *restrict __addr, socklen_t *restrict __len)
     * }
     */
    public static MethodHandle getpeername$handle() {
        return getpeername.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getpeername(int __fd, struct sockaddr *restrict __addr, socklen_t *restrict __len)
     * }
     */
    public static MemorySegment getpeername$address() {
        return getpeername.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int getpeername(int __fd, struct sockaddr *restrict __addr, socklen_t *restrict __len)
     * }
     */
    public static int getpeername(int __fd, MemorySegment __addr, MemorySegment __len) {
        var mh$ = getpeername.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getpeername", __fd, __addr, __len);
            }
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class send {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_LONG,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_LONG,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("send");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t send(int __fd, const void *__buf, size_t __n, int __flags)
     * }
     */
    public static FunctionDescriptor send$descriptor() {
        return send.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t send(int __fd, const void *__buf, size_t __n, int __flags)
     * }
     */
    public static MethodHandle send$handle() {
        return send.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ssize_t send(int __fd, const void *__buf, size_t __n, int __flags)
     * }
     */
    public static MemorySegment send$address() {
        return send.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ssize_t send(int __fd, const void *__buf, size_t __n, int __flags)
     * }
     */
    public static long send(int __fd, MemorySegment __buf, long __n, int __flags) {
        var mh$ = send.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("send", __fd, __buf, __n, __flags);
            }
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class recv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_LONG,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_LONG,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("recv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t recv(int __fd, void *__buf, size_t __n, int __flags)
     * }
     */
    public static FunctionDescriptor recv$descriptor() {
        return recv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t recv(int __fd, void *__buf, size_t __n, int __flags)
     * }
     */
    public static MethodHandle recv$handle() {
        return recv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ssize_t recv(int __fd, void *__buf, size_t __n, int __flags)
     * }
     */
    public static MemorySegment recv$address() {
        return recv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ssize_t recv(int __fd, void *__buf, size_t __n, int __flags)
     * }
     */
    public static long recv(int __fd, MemorySegment __buf, long __n, int __flags) {
        var mh$ = recv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("recv", __fd, __buf, __n, __flags);
            }
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sendto {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_LONG,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_LONG,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("sendto");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t sendto(int __fd, const void *__buf, size_t __n, int __flags, const struct sockaddr *__addr, socklen_t __addr_len)
     * }
     */
    public static FunctionDescriptor sendto$descriptor() {
        return sendto.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t sendto(int __fd, const void *__buf, size_t __n, int __flags, const struct sockaddr *__addr, socklen_t __addr_len)
     * }
     */
    public static MethodHandle sendto$handle() {
        return sendto.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ssize_t sendto(int __fd, const void *__buf, size_t __n, int __flags, const struct sockaddr *__addr, socklen_t __addr_len)
     * }
     */
    public static MemorySegment sendto$address() {
        return sendto.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ssize_t sendto(int __fd, const void *__buf, size_t __n, int __flags, const struct sockaddr *__addr, socklen_t __addr_len)
     * }
     */
    public static long sendto(int __fd, MemorySegment __buf, long __n, int __flags, MemorySegment __addr, int __addr_len) {
        var mh$ = sendto.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sendto", __fd, __buf, __n, __flags, __addr, __addr_len);
            }
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags, __addr, __addr_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class recvfrom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_LONG,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_LONG,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("recvfrom");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t recvfrom(int __fd, void *restrict __buf, size_t __n, int __flags, struct sockaddr *restrict __addr, socklen_t *restrict __addr_len)
     * }
     */
    public static FunctionDescriptor recvfrom$descriptor() {
        return recvfrom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t recvfrom(int __fd, void *restrict __buf, size_t __n, int __flags, struct sockaddr *restrict __addr, socklen_t *restrict __addr_len)
     * }
     */
    public static MethodHandle recvfrom$handle() {
        return recvfrom.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ssize_t recvfrom(int __fd, void *restrict __buf, size_t __n, int __flags, struct sockaddr *restrict __addr, socklen_t *restrict __addr_len)
     * }
     */
    public static MemorySegment recvfrom$address() {
        return recvfrom.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ssize_t recvfrom(int __fd, void *restrict __buf, size_t __n, int __flags, struct sockaddr *restrict __addr, socklen_t *restrict __addr_len)
     * }
     */
    public static long recvfrom(int __fd, MemorySegment __buf, long __n, int __flags, MemorySegment __addr, MemorySegment __addr_len) {
        var mh$ = recvfrom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("recvfrom", __fd, __buf, __n, __flags, __addr, __addr_len);
            }
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags, __addr, __addr_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sendmsg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_LONG,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("sendmsg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t sendmsg(int __fd, const struct msghdr *__message, int __flags)
     * }
     */
    public static FunctionDescriptor sendmsg$descriptor() {
        return sendmsg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t sendmsg(int __fd, const struct msghdr *__message, int __flags)
     * }
     */
    public static MethodHandle sendmsg$handle() {
        return sendmsg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ssize_t sendmsg(int __fd, const struct msghdr *__message, int __flags)
     * }
     */
    public static MemorySegment sendmsg$address() {
        return sendmsg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ssize_t sendmsg(int __fd, const struct msghdr *__message, int __flags)
     * }
     */
    public static long sendmsg(int __fd, MemorySegment __message, int __flags) {
        var mh$ = sendmsg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sendmsg", __fd, __message, __flags);
            }
            return (long)mh$.invokeExact(__fd, __message, __flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class recvmsg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_LONG,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("recvmsg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t recvmsg(int __fd, struct msghdr *__message, int __flags)
     * }
     */
    public static FunctionDescriptor recvmsg$descriptor() {
        return recvmsg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t recvmsg(int __fd, struct msghdr *__message, int __flags)
     * }
     */
    public static MethodHandle recvmsg$handle() {
        return recvmsg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ssize_t recvmsg(int __fd, struct msghdr *__message, int __flags)
     * }
     */
    public static MemorySegment recvmsg$address() {
        return recvmsg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ssize_t recvmsg(int __fd, struct msghdr *__message, int __flags)
     * }
     */
    public static long recvmsg(int __fd, MemorySegment __message, int __flags) {
        var mh$ = recvmsg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("recvmsg", __fd, __message, __flags);
            }
            return (long)mh$.invokeExact(__fd, __message, __flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getsockopt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("getsockopt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getsockopt(int __fd, int __level, int __optname, void *restrict __optval, socklen_t *restrict __optlen)
     * }
     */
    public static FunctionDescriptor getsockopt$descriptor() {
        return getsockopt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getsockopt(int __fd, int __level, int __optname, void *restrict __optval, socklen_t *restrict __optlen)
     * }
     */
    public static MethodHandle getsockopt$handle() {
        return getsockopt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getsockopt(int __fd, int __level, int __optname, void *restrict __optval, socklen_t *restrict __optlen)
     * }
     */
    public static MemorySegment getsockopt$address() {
        return getsockopt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int getsockopt(int __fd, int __level, int __optname, void *restrict __optval, socklen_t *restrict __optlen)
     * }
     */
    public static int getsockopt(int __fd, int __level, int __optname, MemorySegment __optval, MemorySegment __optlen) {
        var mh$ = getsockopt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getsockopt", __fd, __level, __optname, __optval, __optlen);
            }
            return (int)mh$.invokeExact(__fd, __level, __optname, __optval, __optlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setsockopt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("setsockopt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setsockopt(int __fd, int __level, int __optname, const void *__optval, socklen_t __optlen)
     * }
     */
    public static FunctionDescriptor setsockopt$descriptor() {
        return setsockopt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setsockopt(int __fd, int __level, int __optname, const void *__optval, socklen_t __optlen)
     * }
     */
    public static MethodHandle setsockopt$handle() {
        return setsockopt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int setsockopt(int __fd, int __level, int __optname, const void *__optval, socklen_t __optlen)
     * }
     */
    public static MemorySegment setsockopt$address() {
        return setsockopt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int setsockopt(int __fd, int __level, int __optname, const void *__optval, socklen_t __optlen)
     * }
     */
    public static int setsockopt(int __fd, int __level, int __optname, MemorySegment __optval, int __optlen) {
        var mh$ = setsockopt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setsockopt", __fd, __level, __optname, __optval, __optlen);
            }
            return (int)mh$.invokeExact(__fd, __level, __optname, __optval, __optlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class listen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("listen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int listen(int __fd, int __n)
     * }
     */
    public static FunctionDescriptor listen$descriptor() {
        return listen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int listen(int __fd, int __n)
     * }
     */
    public static MethodHandle listen$handle() {
        return listen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int listen(int __fd, int __n)
     * }
     */
    public static MemorySegment listen$address() {
        return listen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int listen(int __fd, int __n)
     * }
     */
    public static int listen(int __fd, int __n) {
        var mh$ = listen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("listen", __fd, __n);
            }
            return (int)mh$.invokeExact(__fd, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class accept {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("accept");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int accept(int __fd, struct sockaddr *restrict __addr, socklen_t *restrict __addr_len)
     * }
     */
    public static FunctionDescriptor accept$descriptor() {
        return accept.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int accept(int __fd, struct sockaddr *restrict __addr, socklen_t *restrict __addr_len)
     * }
     */
    public static MethodHandle accept$handle() {
        return accept.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int accept(int __fd, struct sockaddr *restrict __addr, socklen_t *restrict __addr_len)
     * }
     */
    public static MemorySegment accept$address() {
        return accept.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int accept(int __fd, struct sockaddr *restrict __addr, socklen_t *restrict __addr_len)
     * }
     */
    public static int accept(int __fd, MemorySegment __addr, MemorySegment __addr_len) {
        var mh$ = accept.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("accept", __fd, __addr, __addr_len);
            }
            return (int)mh$.invokeExact(__fd, __addr, __addr_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("shutdown");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int shutdown(int __fd, int __how)
     * }
     */
    public static FunctionDescriptor shutdown$descriptor() {
        return shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int shutdown(int __fd, int __how)
     * }
     */
    public static MethodHandle shutdown$handle() {
        return shutdown.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int shutdown(int __fd, int __how)
     * }
     */
    public static MemorySegment shutdown$address() {
        return shutdown.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int shutdown(int __fd, int __how)
     * }
     */
    public static int shutdown(int __fd, int __how) {
        var mh$ = shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shutdown", __fd, __how);
            }
            return (int)mh$.invokeExact(__fd, __how);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sockatmark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("sockatmark");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sockatmark(int __fd)
     * }
     */
    public static FunctionDescriptor sockatmark$descriptor() {
        return sockatmark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sockatmark(int __fd)
     * }
     */
    public static MethodHandle sockatmark$handle() {
        return sockatmark.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int sockatmark(int __fd)
     * }
     */
    public static MemorySegment sockatmark$address() {
        return sockatmark.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int sockatmark(int __fd)
     * }
     */
    public static int sockatmark(int __fd) {
        var mh$ = sockatmark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sockatmark", __fd);
            }
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class isfdtype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("isfdtype");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int isfdtype(int __fd, int __fdtype)
     * }
     */
    public static FunctionDescriptor isfdtype$descriptor() {
        return isfdtype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int isfdtype(int __fd, int __fdtype)
     * }
     */
    public static MethodHandle isfdtype$handle() {
        return isfdtype.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int isfdtype(int __fd, int __fdtype)
     * }
     */
    public static MemorySegment isfdtype$address() {
        return isfdtype.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int isfdtype(int __fd, int __fdtype)
     * }
     */
    public static int isfdtype(int __fd, int __fdtype) {
        var mh$ = isfdtype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("isfdtype", __fd, __fdtype);
            }
            return (int)mh$.invokeExact(__fd, __fdtype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class stat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("stat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int stat(const char *restrict __file, struct stat *restrict __buf)
     * }
     */
    public static FunctionDescriptor stat$descriptor() {
        return stat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int stat(const char *restrict __file, struct stat *restrict __buf)
     * }
     */
    public static MethodHandle stat$handle() {
        return stat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int stat(const char *restrict __file, struct stat *restrict __buf)
     * }
     */
    public static MemorySegment stat$address() {
        return stat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int stat(const char *restrict __file, struct stat *restrict __buf)
     * }
     */
    public static int stat(MemorySegment __file, MemorySegment __buf) {
        var mh$ = stat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("stat", __file, __buf);
            }
            return (int)mh$.invokeExact(__file, __buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fstat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("fstat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fstat(int __fd, struct stat *__buf)
     * }
     */
    public static FunctionDescriptor fstat$descriptor() {
        return fstat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fstat(int __fd, struct stat *__buf)
     * }
     */
    public static MethodHandle fstat$handle() {
        return fstat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fstat(int __fd, struct stat *__buf)
     * }
     */
    public static MemorySegment fstat$address() {
        return fstat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fstat(int __fd, struct stat *__buf)
     * }
     */
    public static int fstat(int __fd, MemorySegment __buf) {
        var mh$ = fstat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fstat", __fd, __buf);
            }
            return (int)mh$.invokeExact(__fd, __buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fstatat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("fstatat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fstatat(int __fd, const char *restrict __file, struct stat *restrict __buf, int __flag)
     * }
     */
    public static FunctionDescriptor fstatat$descriptor() {
        return fstatat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fstatat(int __fd, const char *restrict __file, struct stat *restrict __buf, int __flag)
     * }
     */
    public static MethodHandle fstatat$handle() {
        return fstatat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fstatat(int __fd, const char *restrict __file, struct stat *restrict __buf, int __flag)
     * }
     */
    public static MemorySegment fstatat$address() {
        return fstatat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fstatat(int __fd, const char *restrict __file, struct stat *restrict __buf, int __flag)
     * }
     */
    public static int fstatat(int __fd, MemorySegment __file, MemorySegment __buf, int __flag) {
        var mh$ = fstatat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fstatat", __fd, __file, __buf, __flag);
            }
            return (int)mh$.invokeExact(__fd, __file, __buf, __flag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lstat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("lstat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int lstat(const char *restrict __file, struct stat *restrict __buf)
     * }
     */
    public static FunctionDescriptor lstat$descriptor() {
        return lstat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int lstat(const char *restrict __file, struct stat *restrict __buf)
     * }
     */
    public static MethodHandle lstat$handle() {
        return lstat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int lstat(const char *restrict __file, struct stat *restrict __buf)
     * }
     */
    public static MemorySegment lstat$address() {
        return lstat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int lstat(const char *restrict __file, struct stat *restrict __buf)
     * }
     */
    public static int lstat(MemorySegment __file, MemorySegment __buf) {
        var mh$ = lstat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lstat", __file, __buf);
            }
            return (int)mh$.invokeExact(__file, __buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class chmod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("chmod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int chmod(const char *__file, __mode_t __mode)
     * }
     */
    public static FunctionDescriptor chmod$descriptor() {
        return chmod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int chmod(const char *__file, __mode_t __mode)
     * }
     */
    public static MethodHandle chmod$handle() {
        return chmod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int chmod(const char *__file, __mode_t __mode)
     * }
     */
    public static MemorySegment chmod$address() {
        return chmod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int chmod(const char *__file, __mode_t __mode)
     * }
     */
    public static int chmod(MemorySegment __file, int __mode) {
        var mh$ = chmod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("chmod", __file, __mode);
            }
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lchmod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("lchmod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int lchmod(const char *__file, __mode_t __mode)
     * }
     */
    public static FunctionDescriptor lchmod$descriptor() {
        return lchmod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int lchmod(const char *__file, __mode_t __mode)
     * }
     */
    public static MethodHandle lchmod$handle() {
        return lchmod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int lchmod(const char *__file, __mode_t __mode)
     * }
     */
    public static MemorySegment lchmod$address() {
        return lchmod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int lchmod(const char *__file, __mode_t __mode)
     * }
     */
    public static int lchmod(MemorySegment __file, int __mode) {
        var mh$ = lchmod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lchmod", __file, __mode);
            }
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fchmod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("fchmod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fchmod(int __fd, __mode_t __mode)
     * }
     */
    public static FunctionDescriptor fchmod$descriptor() {
        return fchmod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fchmod(int __fd, __mode_t __mode)
     * }
     */
    public static MethodHandle fchmod$handle() {
        return fchmod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fchmod(int __fd, __mode_t __mode)
     * }
     */
    public static MemorySegment fchmod$address() {
        return fchmod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fchmod(int __fd, __mode_t __mode)
     * }
     */
    public static int fchmod(int __fd, int __mode) {
        var mh$ = fchmod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fchmod", __fd, __mode);
            }
            return (int)mh$.invokeExact(__fd, __mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fchmodat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("fchmodat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fchmodat(int __fd, const char *__file, __mode_t __mode, int __flag)
     * }
     */
    public static FunctionDescriptor fchmodat$descriptor() {
        return fchmodat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fchmodat(int __fd, const char *__file, __mode_t __mode, int __flag)
     * }
     */
    public static MethodHandle fchmodat$handle() {
        return fchmodat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fchmodat(int __fd, const char *__file, __mode_t __mode, int __flag)
     * }
     */
    public static MemorySegment fchmodat$address() {
        return fchmodat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fchmodat(int __fd, const char *__file, __mode_t __mode, int __flag)
     * }
     */
    public static int fchmodat(int __fd, MemorySegment __file, int __mode, int __flag) {
        var mh$ = fchmodat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fchmodat", __fd, __file, __mode, __flag);
            }
            return (int)mh$.invokeExact(__fd, __file, __mode, __flag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class umask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("umask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __mode_t umask(__mode_t __mask)
     * }
     */
    public static FunctionDescriptor umask$descriptor() {
        return umask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __mode_t umask(__mode_t __mask)
     * }
     */
    public static MethodHandle umask$handle() {
        return umask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern __mode_t umask(__mode_t __mask)
     * }
     */
    public static MemorySegment umask$address() {
        return umask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern __mode_t umask(__mode_t __mask)
     * }
     */
    public static int umask(int __mask) {
        var mh$ = umask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("umask", __mask);
            }
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mkdir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("mkdir");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int mkdir(const char *__path, __mode_t __mode)
     * }
     */
    public static FunctionDescriptor mkdir$descriptor() {
        return mkdir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int mkdir(const char *__path, __mode_t __mode)
     * }
     */
    public static MethodHandle mkdir$handle() {
        return mkdir.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int mkdir(const char *__path, __mode_t __mode)
     * }
     */
    public static MemorySegment mkdir$address() {
        return mkdir.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int mkdir(const char *__path, __mode_t __mode)
     * }
     */
    public static int mkdir(MemorySegment __path, int __mode) {
        var mh$ = mkdir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mkdir", __path, __mode);
            }
            return (int)mh$.invokeExact(__path, __mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mkdirat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("mkdirat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int mkdirat(int __fd, const char *__path, __mode_t __mode)
     * }
     */
    public static FunctionDescriptor mkdirat$descriptor() {
        return mkdirat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int mkdirat(int __fd, const char *__path, __mode_t __mode)
     * }
     */
    public static MethodHandle mkdirat$handle() {
        return mkdirat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int mkdirat(int __fd, const char *__path, __mode_t __mode)
     * }
     */
    public static MemorySegment mkdirat$address() {
        return mkdirat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int mkdirat(int __fd, const char *__path, __mode_t __mode)
     * }
     */
    public static int mkdirat(int __fd, MemorySegment __path, int __mode) {
        var mh$ = mkdirat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mkdirat", __fd, __path, __mode);
            }
            return (int)mh$.invokeExact(__fd, __path, __mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mknod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT,
            liburingtest.C_LONG
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("mknod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int mknod(const char *__path, __mode_t __mode, __dev_t __dev)
     * }
     */
    public static FunctionDescriptor mknod$descriptor() {
        return mknod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int mknod(const char *__path, __mode_t __mode, __dev_t __dev)
     * }
     */
    public static MethodHandle mknod$handle() {
        return mknod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int mknod(const char *__path, __mode_t __mode, __dev_t __dev)
     * }
     */
    public static MemorySegment mknod$address() {
        return mknod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int mknod(const char *__path, __mode_t __mode, __dev_t __dev)
     * }
     */
    public static int mknod(MemorySegment __path, int __mode, long __dev) {
        var mh$ = mknod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mknod", __path, __mode, __dev);
            }
            return (int)mh$.invokeExact(__path, __mode, __dev);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mknodat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT,
            liburingtest.C_LONG
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("mknodat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int mknodat(int __fd, const char *__path, __mode_t __mode, __dev_t __dev)
     * }
     */
    public static FunctionDescriptor mknodat$descriptor() {
        return mknodat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int mknodat(int __fd, const char *__path, __mode_t __mode, __dev_t __dev)
     * }
     */
    public static MethodHandle mknodat$handle() {
        return mknodat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int mknodat(int __fd, const char *__path, __mode_t __mode, __dev_t __dev)
     * }
     */
    public static MemorySegment mknodat$address() {
        return mknodat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int mknodat(int __fd, const char *__path, __mode_t __mode, __dev_t __dev)
     * }
     */
    public static int mknodat(int __fd, MemorySegment __path, int __mode, long __dev) {
        var mh$ = mknodat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mknodat", __fd, __path, __mode, __dev);
            }
            return (int)mh$.invokeExact(__fd, __path, __mode, __dev);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mkfifo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("mkfifo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int mkfifo(const char *__path, __mode_t __mode)
     * }
     */
    public static FunctionDescriptor mkfifo$descriptor() {
        return mkfifo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int mkfifo(const char *__path, __mode_t __mode)
     * }
     */
    public static MethodHandle mkfifo$handle() {
        return mkfifo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int mkfifo(const char *__path, __mode_t __mode)
     * }
     */
    public static MemorySegment mkfifo$address() {
        return mkfifo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int mkfifo(const char *__path, __mode_t __mode)
     * }
     */
    public static int mkfifo(MemorySegment __path, int __mode) {
        var mh$ = mkfifo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mkfifo", __path, __mode);
            }
            return (int)mh$.invokeExact(__path, __mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mkfifoat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("mkfifoat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int mkfifoat(int __fd, const char *__path, __mode_t __mode)
     * }
     */
    public static FunctionDescriptor mkfifoat$descriptor() {
        return mkfifoat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int mkfifoat(int __fd, const char *__path, __mode_t __mode)
     * }
     */
    public static MethodHandle mkfifoat$handle() {
        return mkfifoat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int mkfifoat(int __fd, const char *__path, __mode_t __mode)
     * }
     */
    public static MemorySegment mkfifoat$address() {
        return mkfifoat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int mkfifoat(int __fd, const char *__path, __mode_t __mode)
     * }
     */
    public static int mkfifoat(int __fd, MemorySegment __path, int __mode) {
        var mh$ = mkfifoat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mkfifoat", __fd, __path, __mode);
            }
            return (int)mh$.invokeExact(__fd, __path, __mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class utimensat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_POINTER,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("utimensat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flags)
     * }
     */
    public static FunctionDescriptor utimensat$descriptor() {
        return utimensat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flags)
     * }
     */
    public static MethodHandle utimensat$handle() {
        return utimensat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flags)
     * }
     */
    public static MemorySegment utimensat$address() {
        return utimensat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flags)
     * }
     */
    public static int utimensat(int __fd, MemorySegment __path, MemorySegment __times, int __flags) {
        var mh$ = utimensat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("utimensat", __fd, __path, __times, __flags);
            }
            return (int)mh$.invokeExact(__fd, __path, __times, __flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class futimens {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_INT,
            liburingtest.C_INT,
            liburingtest.C_POINTER
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("futimens");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int futimens(int __fd, const struct timespec __times[2])
     * }
     */
    public static FunctionDescriptor futimens$descriptor() {
        return futimens.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int futimens(int __fd, const struct timespec __times[2])
     * }
     */
    public static MethodHandle futimens$handle() {
        return futimens.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int futimens(int __fd, const struct timespec __times[2])
     * }
     */
    public static MemorySegment futimens$address() {
        return futimens.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int futimens(int __fd, const struct timespec __times[2])
     * }
     */
    public static int futimens(int __fd, MemorySegment __times) {
        var mh$ = futimens.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("futimens", __fd, __times);
            }
            return (int)mh$.invokeExact(__fd, __times);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class readv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_LONG,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("readv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t readv(int __fd, const struct iovec *__iovec, int __count)
     * }
     */
    public static FunctionDescriptor readv$descriptor() {
        return readv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t readv(int __fd, const struct iovec *__iovec, int __count)
     * }
     */
    public static MethodHandle readv$handle() {
        return readv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ssize_t readv(int __fd, const struct iovec *__iovec, int __count)
     * }
     */
    public static MemorySegment readv$address() {
        return readv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ssize_t readv(int __fd, const struct iovec *__iovec, int __count)
     * }
     */
    public static long readv(int __fd, MemorySegment __iovec, int __count) {
        var mh$ = readv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("readv", __fd, __iovec, __count);
            }
            return (long)mh$.invokeExact(__fd, __iovec, __count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class writev {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_LONG,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("writev");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t writev(int __fd, const struct iovec *__iovec, int __count)
     * }
     */
    public static FunctionDescriptor writev$descriptor() {
        return writev.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t writev(int __fd, const struct iovec *__iovec, int __count)
     * }
     */
    public static MethodHandle writev$handle() {
        return writev.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ssize_t writev(int __fd, const struct iovec *__iovec, int __count)
     * }
     */
    public static MemorySegment writev$address() {
        return writev.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ssize_t writev(int __fd, const struct iovec *__iovec, int __count)
     * }
     */
    public static long writev(int __fd, MemorySegment __iovec, int __count) {
        var mh$ = writev.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("writev", __fd, __iovec, __count);
            }
            return (long)mh$.invokeExact(__fd, __iovec, __count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class preadv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_LONG,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT,
            liburingtest.C_LONG
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("preadv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t preadv(int __fd, const struct iovec *__iovec, int __count, __off_t __offset)
     * }
     */
    public static FunctionDescriptor preadv$descriptor() {
        return preadv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t preadv(int __fd, const struct iovec *__iovec, int __count, __off_t __offset)
     * }
     */
    public static MethodHandle preadv$handle() {
        return preadv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ssize_t preadv(int __fd, const struct iovec *__iovec, int __count, __off_t __offset)
     * }
     */
    public static MemorySegment preadv$address() {
        return preadv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ssize_t preadv(int __fd, const struct iovec *__iovec, int __count, __off_t __offset)
     * }
     */
    public static long preadv(int __fd, MemorySegment __iovec, int __count, long __offset) {
        var mh$ = preadv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("preadv", __fd, __iovec, __count, __offset);
            }
            return (long)mh$.invokeExact(__fd, __iovec, __count, __offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pwritev {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_LONG,
            liburingtest.C_INT,
            liburingtest.C_POINTER,
            liburingtest.C_INT,
            liburingtest.C_LONG
        );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("pwritev");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t pwritev(int __fd, const struct iovec *__iovec, int __count, __off_t __offset)
     * }
     */
    public static FunctionDescriptor pwritev$descriptor() {
        return pwritev.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t pwritev(int __fd, const struct iovec *__iovec, int __count, __off_t __offset)
     * }
     */
    public static MethodHandle pwritev$handle() {
        return pwritev.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ssize_t pwritev(int __fd, const struct iovec *__iovec, int __count, __off_t __offset)
     * }
     */
    public static MemorySegment pwritev$address() {
        return pwritev.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ssize_t pwritev(int __fd, const struct iovec *__iovec, int __count, __off_t __offset)
     * }
     */
    public static long pwritev(int __fd, MemorySegment __iovec, int __count, long __offset) {
        var mh$ = pwritev.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pwritev", __fd, __iovec, __count, __offset);
            }
            return (long)mh$.invokeExact(__fd, __iovec, __count, __offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __errno_location {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            liburingtest.C_POINTER    );

        public static final MemorySegment ADDR = liburingtest.findOrThrow("__errno_location");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int *__errno_location()
     * }
     */
    public static FunctionDescriptor __errno_location$descriptor() {
        return __errno_location.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int *__errno_location()
     * }
     */
    public static MethodHandle __errno_location$handle() {
        return __errno_location.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int *__errno_location()
     * }
     */
    public static MemorySegment __errno_location$address() {
        return __errno_location.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int *__errno_location()
     * }
     */
    public static MemorySegment __errno_location() {
        var mh$ = __errno_location.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__errno_location");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __sig_atomic_t sig_atomic_t
     * }
     */
    public static final OfInt sig_atomic_t = liburingtest.C_INT;
    private static final int SI_ASYNCNL = (int)-60L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_ASYNCNL = -60
     * }
     */
    public static int SI_ASYNCNL() {
        return SI_ASYNCNL;
    }
    private static final int SI_DETHREAD = (int)-7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_DETHREAD = -7
     * }
     */
    public static int SI_DETHREAD() {
        return SI_DETHREAD;
    }
    private static final int SI_TKILL = (int)-6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_TKILL = -6
     * }
     */
    public static int SI_TKILL() {
        return SI_TKILL;
    }
    private static final int SI_SIGIO = (int)-5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_SIGIO = -5
     * }
     */
    public static int SI_SIGIO() {
        return SI_SIGIO;
    }
    private static final int SI_ASYNCIO = (int)-4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_ASYNCIO = -4
     * }
     */
    public static int SI_ASYNCIO() {
        return SI_ASYNCIO;
    }
    private static final int SI_MESGQ = (int)-3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_MESGQ = -3
     * }
     */
    public static int SI_MESGQ() {
        return SI_MESGQ;
    }
    private static final int SI_TIMER = (int)-2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_TIMER = -2
     * }
     */
    public static int SI_TIMER() {
        return SI_TIMER;
    }
    private static final int SI_QUEUE = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_QUEUE = -1
     * }
     */
    public static int SI_QUEUE() {
        return SI_QUEUE;
    }
    private static final int SI_USER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_USER = 0
     * }
     */
    public static int SI_USER() {
        return SI_USER;
    }
    private static final int SI_KERNEL = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_KERNEL = 128
     * }
     */
    public static int SI_KERNEL() {
        return SI_KERNEL;
    }
    private static final int ILL_ILLOPC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_ILLOPC = 1
     * }
     */
    public static int ILL_ILLOPC() {
        return ILL_ILLOPC;
    }
    private static final int ILL_ILLOPN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_ILLOPN = 2
     * }
     */
    public static int ILL_ILLOPN() {
        return ILL_ILLOPN;
    }
    private static final int ILL_ILLADR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_ILLADR = 3
     * }
     */
    public static int ILL_ILLADR() {
        return ILL_ILLADR;
    }
    private static final int ILL_ILLTRP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_ILLTRP = 4
     * }
     */
    public static int ILL_ILLTRP() {
        return ILL_ILLTRP;
    }
    private static final int ILL_PRVOPC = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_PRVOPC = 5
     * }
     */
    public static int ILL_PRVOPC() {
        return ILL_PRVOPC;
    }
    private static final int ILL_PRVREG = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_PRVREG = 6
     * }
     */
    public static int ILL_PRVREG() {
        return ILL_PRVREG;
    }
    private static final int ILL_COPROC = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_COPROC = 7
     * }
     */
    public static int ILL_COPROC() {
        return ILL_COPROC;
    }
    private static final int ILL_BADSTK = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_BADSTK = 8
     * }
     */
    public static int ILL_BADSTK() {
        return ILL_BADSTK;
    }
    private static final int ILL_BADIADDR = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_BADIADDR = 9
     * }
     */
    public static int ILL_BADIADDR() {
        return ILL_BADIADDR;
    }
    private static final int FPE_INTDIV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FPE_INTDIV = 1
     * }
     */
    public static int FPE_INTDIV() {
        return FPE_INTDIV;
    }
}

