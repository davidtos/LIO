// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct fsxattr {
 *     __u32 fsx_xflags;
 *     __u32 fsx_extsize;
 *     __u32 fsx_nextents;
 *     __u32 fsx_projid;
 *     __u32 fsx_cowextsize;
 *     unsigned char fsx_pad[8];
 * }
 * }
 */
public class fsxattr {

    fsxattr() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_INT.withName("fsx_xflags"),
        liburingtest.C_INT.withName("fsx_extsize"),
        liburingtest.C_INT.withName("fsx_nextents"),
        liburingtest.C_INT.withName("fsx_projid"),
        liburingtest.C_INT.withName("fsx_cowextsize"),
        MemoryLayout.sequenceLayout(8, liburingtest.C_CHAR).withName("fsx_pad")
    ).withName("fsxattr");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt fsx_xflags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fsx_xflags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 fsx_xflags
     * }
     */
    public static final OfInt fsx_xflags$layout() {
        return fsx_xflags$LAYOUT;
    }

    private static final long fsx_xflags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 fsx_xflags
     * }
     */
    public static final long fsx_xflags$offset() {
        return fsx_xflags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 fsx_xflags
     * }
     */
    public static int fsx_xflags(MemorySegment struct) {
        return struct.get(fsx_xflags$LAYOUT, fsx_xflags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 fsx_xflags
     * }
     */
    public static void fsx_xflags(MemorySegment struct, int fieldValue) {
        struct.set(fsx_xflags$LAYOUT, fsx_xflags$OFFSET, fieldValue);
    }

    private static final OfInt fsx_extsize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fsx_extsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 fsx_extsize
     * }
     */
    public static final OfInt fsx_extsize$layout() {
        return fsx_extsize$LAYOUT;
    }

    private static final long fsx_extsize$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 fsx_extsize
     * }
     */
    public static final long fsx_extsize$offset() {
        return fsx_extsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 fsx_extsize
     * }
     */
    public static int fsx_extsize(MemorySegment struct) {
        return struct.get(fsx_extsize$LAYOUT, fsx_extsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 fsx_extsize
     * }
     */
    public static void fsx_extsize(MemorySegment struct, int fieldValue) {
        struct.set(fsx_extsize$LAYOUT, fsx_extsize$OFFSET, fieldValue);
    }

    private static final OfInt fsx_nextents$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fsx_nextents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 fsx_nextents
     * }
     */
    public static final OfInt fsx_nextents$layout() {
        return fsx_nextents$LAYOUT;
    }

    private static final long fsx_nextents$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 fsx_nextents
     * }
     */
    public static final long fsx_nextents$offset() {
        return fsx_nextents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 fsx_nextents
     * }
     */
    public static int fsx_nextents(MemorySegment struct) {
        return struct.get(fsx_nextents$LAYOUT, fsx_nextents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 fsx_nextents
     * }
     */
    public static void fsx_nextents(MemorySegment struct, int fieldValue) {
        struct.set(fsx_nextents$LAYOUT, fsx_nextents$OFFSET, fieldValue);
    }

    private static final OfInt fsx_projid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fsx_projid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 fsx_projid
     * }
     */
    public static final OfInt fsx_projid$layout() {
        return fsx_projid$LAYOUT;
    }

    private static final long fsx_projid$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 fsx_projid
     * }
     */
    public static final long fsx_projid$offset() {
        return fsx_projid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 fsx_projid
     * }
     */
    public static int fsx_projid(MemorySegment struct) {
        return struct.get(fsx_projid$LAYOUT, fsx_projid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 fsx_projid
     * }
     */
    public static void fsx_projid(MemorySegment struct, int fieldValue) {
        struct.set(fsx_projid$LAYOUT, fsx_projid$OFFSET, fieldValue);
    }

    private static final OfInt fsx_cowextsize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fsx_cowextsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 fsx_cowextsize
     * }
     */
    public static final OfInt fsx_cowextsize$layout() {
        return fsx_cowextsize$LAYOUT;
    }

    private static final long fsx_cowextsize$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 fsx_cowextsize
     * }
     */
    public static final long fsx_cowextsize$offset() {
        return fsx_cowextsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 fsx_cowextsize
     * }
     */
    public static int fsx_cowextsize(MemorySegment struct) {
        return struct.get(fsx_cowextsize$LAYOUT, fsx_cowextsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 fsx_cowextsize
     * }
     */
    public static void fsx_cowextsize(MemorySegment struct, int fieldValue) {
        struct.set(fsx_cowextsize$LAYOUT, fsx_cowextsize$OFFSET, fieldValue);
    }

    private static final SequenceLayout fsx_pad$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("fsx_pad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char fsx_pad[8]
     * }
     */
    public static final SequenceLayout fsx_pad$layout() {
        return fsx_pad$LAYOUT;
    }

    private static final long fsx_pad$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char fsx_pad[8]
     * }
     */
    public static final long fsx_pad$offset() {
        return fsx_pad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char fsx_pad[8]
     * }
     */
    public static MemorySegment fsx_pad(MemorySegment struct) {
        return struct.asSlice(fsx_pad$OFFSET, fsx_pad$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char fsx_pad[8]
     * }
     */
    public static void fsx_pad(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fsx_pad$OFFSET, fsx_pad$LAYOUT.byteSize());
    }

    private static long[] fsx_pad$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned char fsx_pad[8]
     * }
     */
    public static long[] fsx_pad$dimensions() {
        return fsx_pad$DIMS;
    }
    private static final VarHandle fsx_pad$ELEM_HANDLE = fsx_pad$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned char fsx_pad[8]
     * }
     */
    public static byte fsx_pad(MemorySegment struct, long index0) {
        return (byte)fsx_pad$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned char fsx_pad[8]
     * }
     */
    public static void fsx_pad(MemorySegment struct, long index0, byte fieldValue) {
        fsx_pad$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

