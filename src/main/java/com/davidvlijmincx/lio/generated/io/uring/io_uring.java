// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfByte;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct io_uring {
 *     struct io_uring_sq sq;
 *     struct io_uring_cq cq;
 *     unsigned int flags;
 *     int ring_fd;
 *     unsigned int features;
 *     int enter_ring_fd;
 *     __u8 int_flags;
 *     __u8 pad[3];
 *     unsigned int pad2;
 * }
 * }
 */
public class io_uring {

    io_uring() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        io_uring_sq.layout().withName("sq"),
        io_uring_cq.layout().withName("cq"),
        liburingtest.C_INT.withName("flags"),
        liburingtest.C_INT.withName("ring_fd"),
        liburingtest.C_INT.withName("features"),
        liburingtest.C_INT.withName("enter_ring_fd"),
        liburingtest.C_CHAR.withName("int_flags"),
        MemoryLayout.sequenceLayout(3, liburingtest.C_CHAR).withName("pad"),
        liburingtest.C_INT.withName("pad2")
    ).withName("io_uring");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout sq$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sq"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct io_uring_sq sq
     * }
     */
    public static final GroupLayout sq$layout() {
        return sq$LAYOUT;
    }

    private static final long sq$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct io_uring_sq sq
     * }
     */
    public static final long sq$offset() {
        return sq$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct io_uring_sq sq
     * }
     */
    public static MemorySegment sq(MemorySegment struct) {
        return struct.asSlice(sq$OFFSET, sq$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct io_uring_sq sq
     * }
     */
    public static void sq(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sq$OFFSET, sq$LAYOUT.byteSize());
    }

    private static final GroupLayout cq$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cq"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct io_uring_cq cq
     * }
     */
    public static final GroupLayout cq$layout() {
        return cq$LAYOUT;
    }

    private static final long cq$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct io_uring_cq cq
     * }
     */
    public static final long cq$offset() {
        return cq$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct io_uring_cq cq
     * }
     */
    public static MemorySegment cq(MemorySegment struct) {
        return struct.asSlice(cq$OFFSET, cq$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct io_uring_cq cq
     * }
     */
    public static void cq(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cq$OFFSET, cq$LAYOUT.byteSize());
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt ring_fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ring_fd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ring_fd
     * }
     */
    public static final OfInt ring_fd$layout() {
        return ring_fd$LAYOUT;
    }

    private static final long ring_fd$OFFSET = 196;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ring_fd
     * }
     */
    public static final long ring_fd$offset() {
        return ring_fd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ring_fd
     * }
     */
    public static int ring_fd(MemorySegment struct) {
        return struct.get(ring_fd$LAYOUT, ring_fd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ring_fd
     * }
     */
    public static void ring_fd(MemorySegment struct, int fieldValue) {
        struct.set(ring_fd$LAYOUT, ring_fd$OFFSET, fieldValue);
    }

    private static final OfInt features$LAYOUT = (OfInt)$LAYOUT.select(groupElement("features"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int features
     * }
     */
    public static final OfInt features$layout() {
        return features$LAYOUT;
    }

    private static final long features$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int features
     * }
     */
    public static final long features$offset() {
        return features$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int features
     * }
     */
    public static int features(MemorySegment struct) {
        return struct.get(features$LAYOUT, features$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int features
     * }
     */
    public static void features(MemorySegment struct, int fieldValue) {
        struct.set(features$LAYOUT, features$OFFSET, fieldValue);
    }

    private static final OfInt enter_ring_fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("enter_ring_fd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int enter_ring_fd
     * }
     */
    public static final OfInt enter_ring_fd$layout() {
        return enter_ring_fd$LAYOUT;
    }

    private static final long enter_ring_fd$OFFSET = 204;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int enter_ring_fd
     * }
     */
    public static final long enter_ring_fd$offset() {
        return enter_ring_fd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int enter_ring_fd
     * }
     */
    public static int enter_ring_fd(MemorySegment struct) {
        return struct.get(enter_ring_fd$LAYOUT, enter_ring_fd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int enter_ring_fd
     * }
     */
    public static void enter_ring_fd(MemorySegment struct, int fieldValue) {
        struct.set(enter_ring_fd$LAYOUT, enter_ring_fd$OFFSET, fieldValue);
    }

    private static final OfByte int_flags$LAYOUT = (OfByte)$LAYOUT.select(groupElement("int_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 int_flags
     * }
     */
    public static final OfByte int_flags$layout() {
        return int_flags$LAYOUT;
    }

    private static final long int_flags$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 int_flags
     * }
     */
    public static final long int_flags$offset() {
        return int_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 int_flags
     * }
     */
    public static byte int_flags(MemorySegment struct) {
        return struct.get(int_flags$LAYOUT, int_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 int_flags
     * }
     */
    public static void int_flags(MemorySegment struct, byte fieldValue) {
        struct.set(int_flags$LAYOUT, int_flags$OFFSET, fieldValue);
    }

    private static final SequenceLayout pad$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 pad[3]
     * }
     */
    public static final SequenceLayout pad$layout() {
        return pad$LAYOUT;
    }

    private static final long pad$OFFSET = 209;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 pad[3]
     * }
     */
    public static final long pad$offset() {
        return pad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 pad[3]
     * }
     */
    public static MemorySegment pad(MemorySegment struct) {
        return struct.asSlice(pad$OFFSET, pad$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 pad[3]
     * }
     */
    public static void pad(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pad$OFFSET, pad$LAYOUT.byteSize());
    }

    private static long[] pad$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u8 pad[3]
     * }
     */
    public static long[] pad$dimensions() {
        return pad$DIMS;
    }
    private static final VarHandle pad$ELEM_HANDLE = pad$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u8 pad[3]
     * }
     */
    public static byte pad(MemorySegment struct, long index0) {
        return (byte)pad$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u8 pad[3]
     * }
     */
    public static void pad(MemorySegment struct, long index0, byte fieldValue) {
        pad$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt pad2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pad2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int pad2
     * }
     */
    public static final OfInt pad2$layout() {
        return pad2$LAYOUT;
    }

    private static final long pad2$OFFSET = 212;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int pad2
     * }
     */
    public static final long pad2$offset() {
        return pad2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int pad2
     * }
     */
    public static int pad2(MemorySegment struct) {
        return struct.get(pad2$LAYOUT, pad2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int pad2
     * }
     */
    public static void pad2(MemorySegment struct, int fieldValue) {
        struct.set(pad2$LAYOUT, pad2$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

