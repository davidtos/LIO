// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang=c :
 * struct io_uring_sq {
 *     unsigned int *khead;
 *     unsigned int *ktail;
 *     unsigned int *kring_mask;
 *     unsigned int *kring_entries;
 *     unsigned int *kflags;
 *     unsigned int *kdropped;
 *     unsigned int *array;
 *     struct io_uring_sqe *sqes;
 *     unsigned int sqe_head;
 *     unsigned int sqe_tail;
 *     size_t ring_sz;
 *     void *ring_ptr;
 *     unsigned int ring_mask;
 *     unsigned int ring_entries;
 *     unsigned int pad[2];
 * }
 * }
 */
public class io_uring_sq {

    io_uring_sq() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_POINTER.withName("khead"),
        liburingtest.C_POINTER.withName("ktail"),
        liburingtest.C_POINTER.withName("kring_mask"),
        liburingtest.C_POINTER.withName("kring_entries"),
        liburingtest.C_POINTER.withName("kflags"),
        liburingtest.C_POINTER.withName("kdropped"),
        liburingtest.C_POINTER.withName("array"),
        liburingtest.C_POINTER.withName("sqes"),
        liburingtest.C_INT.withName("sqe_head"),
        liburingtest.C_INT.withName("sqe_tail"),
        liburingtest.C_LONG.withName("ring_sz"),
        liburingtest.C_POINTER.withName("ring_ptr"),
        liburingtest.C_INT.withName("ring_mask"),
        liburingtest.C_INT.withName("ring_entries"),
        MemoryLayout.sequenceLayout(2, liburingtest.C_INT).withName("pad")
    ).withName("io_uring_sq");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout khead$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("khead"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *khead
     * }
     */
    public static final AddressLayout khead$layout() {
        return khead$LAYOUT;
    }

    private static final long khead$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *khead
     * }
     */
    public static final long khead$offset() {
        return khead$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *khead
     * }
     */
    public static MemorySegment khead(MemorySegment struct) {
        return struct.get(khead$LAYOUT, khead$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *khead
     * }
     */
    public static void khead(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(khead$LAYOUT, khead$OFFSET, fieldValue);
    }

    private static final AddressLayout ktail$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ktail"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *ktail
     * }
     */
    public static final AddressLayout ktail$layout() {
        return ktail$LAYOUT;
    }

    private static final long ktail$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *ktail
     * }
     */
    public static final long ktail$offset() {
        return ktail$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *ktail
     * }
     */
    public static MemorySegment ktail(MemorySegment struct) {
        return struct.get(ktail$LAYOUT, ktail$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *ktail
     * }
     */
    public static void ktail(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ktail$LAYOUT, ktail$OFFSET, fieldValue);
    }

    private static final AddressLayout kring_mask$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("kring_mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *kring_mask
     * }
     */
    public static final AddressLayout kring_mask$layout() {
        return kring_mask$LAYOUT;
    }

    private static final long kring_mask$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *kring_mask
     * }
     */
    public static final long kring_mask$offset() {
        return kring_mask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *kring_mask
     * }
     */
    public static MemorySegment kring_mask(MemorySegment struct) {
        return struct.get(kring_mask$LAYOUT, kring_mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *kring_mask
     * }
     */
    public static void kring_mask(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(kring_mask$LAYOUT, kring_mask$OFFSET, fieldValue);
    }

    private static final AddressLayout kring_entries$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("kring_entries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *kring_entries
     * }
     */
    public static final AddressLayout kring_entries$layout() {
        return kring_entries$LAYOUT;
    }

    private static final long kring_entries$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *kring_entries
     * }
     */
    public static final long kring_entries$offset() {
        return kring_entries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *kring_entries
     * }
     */
    public static MemorySegment kring_entries(MemorySegment struct) {
        return struct.get(kring_entries$LAYOUT, kring_entries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *kring_entries
     * }
     */
    public static void kring_entries(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(kring_entries$LAYOUT, kring_entries$OFFSET, fieldValue);
    }

    private static final AddressLayout kflags$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("kflags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *kflags
     * }
     */
    public static final AddressLayout kflags$layout() {
        return kflags$LAYOUT;
    }

    private static final long kflags$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *kflags
     * }
     */
    public static final long kflags$offset() {
        return kflags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *kflags
     * }
     */
    public static MemorySegment kflags(MemorySegment struct) {
        return struct.get(kflags$LAYOUT, kflags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *kflags
     * }
     */
    public static void kflags(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(kflags$LAYOUT, kflags$OFFSET, fieldValue);
    }

    private static final AddressLayout kdropped$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("kdropped"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *kdropped
     * }
     */
    public static final AddressLayout kdropped$layout() {
        return kdropped$LAYOUT;
    }

    private static final long kdropped$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *kdropped
     * }
     */
    public static final long kdropped$offset() {
        return kdropped$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *kdropped
     * }
     */
    public static MemorySegment kdropped(MemorySegment struct) {
        return struct.get(kdropped$LAYOUT, kdropped$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *kdropped
     * }
     */
    public static void kdropped(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(kdropped$LAYOUT, kdropped$OFFSET, fieldValue);
    }

    private static final AddressLayout array$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("array"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *array
     * }
     */
    public static final AddressLayout array$layout() {
        return array$LAYOUT;
    }

    private static final long array$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *array
     * }
     */
    public static final long array$offset() {
        return array$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *array
     * }
     */
    public static MemorySegment array(MemorySegment struct) {
        return struct.get(array$LAYOUT, array$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *array
     * }
     */
    public static void array(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(array$LAYOUT, array$OFFSET, fieldValue);
    }

    private static final AddressLayout sqes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sqes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct io_uring_sqe *sqes
     * }
     */
    public static final AddressLayout sqes$layout() {
        return sqes$LAYOUT;
    }

    private static final long sqes$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct io_uring_sqe *sqes
     * }
     */
    public static final long sqes$offset() {
        return sqes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct io_uring_sqe *sqes
     * }
     */
    public static MemorySegment sqes(MemorySegment struct) {
        return struct.get(sqes$LAYOUT, sqes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct io_uring_sqe *sqes
     * }
     */
    public static void sqes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sqes$LAYOUT, sqes$OFFSET, fieldValue);
    }

    private static final OfInt sqe_head$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sqe_head"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int sqe_head
     * }
     */
    public static final OfInt sqe_head$layout() {
        return sqe_head$LAYOUT;
    }

    private static final long sqe_head$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int sqe_head
     * }
     */
    public static final long sqe_head$offset() {
        return sqe_head$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int sqe_head
     * }
     */
    public static int sqe_head(MemorySegment struct) {
        return struct.get(sqe_head$LAYOUT, sqe_head$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int sqe_head
     * }
     */
    public static void sqe_head(MemorySegment struct, int fieldValue) {
        struct.set(sqe_head$LAYOUT, sqe_head$OFFSET, fieldValue);
    }

    private static final OfInt sqe_tail$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sqe_tail"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int sqe_tail
     * }
     */
    public static final OfInt sqe_tail$layout() {
        return sqe_tail$LAYOUT;
    }

    private static final long sqe_tail$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int sqe_tail
     * }
     */
    public static final long sqe_tail$offset() {
        return sqe_tail$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int sqe_tail
     * }
     */
    public static int sqe_tail(MemorySegment struct) {
        return struct.get(sqe_tail$LAYOUT, sqe_tail$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int sqe_tail
     * }
     */
    public static void sqe_tail(MemorySegment struct, int fieldValue) {
        struct.set(sqe_tail$LAYOUT, sqe_tail$OFFSET, fieldValue);
    }

    private static final OfLong ring_sz$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ring_sz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t ring_sz
     * }
     */
    public static final OfLong ring_sz$layout() {
        return ring_sz$LAYOUT;
    }

    private static final long ring_sz$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t ring_sz
     * }
     */
    public static final long ring_sz$offset() {
        return ring_sz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t ring_sz
     * }
     */
    public static long ring_sz(MemorySegment struct) {
        return struct.get(ring_sz$LAYOUT, ring_sz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t ring_sz
     * }
     */
    public static void ring_sz(MemorySegment struct, long fieldValue) {
        struct.set(ring_sz$LAYOUT, ring_sz$OFFSET, fieldValue);
    }

    private static final AddressLayout ring_ptr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ring_ptr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ring_ptr
     * }
     */
    public static final AddressLayout ring_ptr$layout() {
        return ring_ptr$LAYOUT;
    }

    private static final long ring_ptr$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ring_ptr
     * }
     */
    public static final long ring_ptr$offset() {
        return ring_ptr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ring_ptr
     * }
     */
    public static MemorySegment ring_ptr(MemorySegment struct) {
        return struct.get(ring_ptr$LAYOUT, ring_ptr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ring_ptr
     * }
     */
    public static void ring_ptr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ring_ptr$LAYOUT, ring_ptr$OFFSET, fieldValue);
    }

    private static final OfInt ring_mask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ring_mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int ring_mask
     * }
     */
    public static final OfInt ring_mask$layout() {
        return ring_mask$LAYOUT;
    }

    private static final long ring_mask$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int ring_mask
     * }
     */
    public static final long ring_mask$offset() {
        return ring_mask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int ring_mask
     * }
     */
    public static int ring_mask(MemorySegment struct) {
        return struct.get(ring_mask$LAYOUT, ring_mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int ring_mask
     * }
     */
    public static void ring_mask(MemorySegment struct, int fieldValue) {
        struct.set(ring_mask$LAYOUT, ring_mask$OFFSET, fieldValue);
    }

    private static final OfInt ring_entries$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ring_entries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int ring_entries
     * }
     */
    public static final OfInt ring_entries$layout() {
        return ring_entries$LAYOUT;
    }

    private static final long ring_entries$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int ring_entries
     * }
     */
    public static final long ring_entries$offset() {
        return ring_entries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int ring_entries
     * }
     */
    public static int ring_entries(MemorySegment struct) {
        return struct.get(ring_entries$LAYOUT, ring_entries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int ring_entries
     * }
     */
    public static void ring_entries(MemorySegment struct, int fieldValue) {
        struct.set(ring_entries$LAYOUT, ring_entries$OFFSET, fieldValue);
    }

    private static final SequenceLayout pad$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int pad[2]
     * }
     */
    public static final SequenceLayout pad$layout() {
        return pad$LAYOUT;
    }

    private static final long pad$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int pad[2]
     * }
     */
    public static final long pad$offset() {
        return pad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int pad[2]
     * }
     */
    public static MemorySegment pad(MemorySegment struct) {
        return struct.asSlice(pad$OFFSET, pad$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int pad[2]
     * }
     */
    public static void pad(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pad$OFFSET, pad$LAYOUT.byteSize());
    }

    private static long[] pad$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned int pad[2]
     * }
     */
    public static long[] pad$dimensions() {
        return pad$DIMS;
    }
    private static final VarHandle pad$ELEM_HANDLE = pad$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned int pad[2]
     * }
     */
    public static int pad(MemorySegment struct, long index0) {
        return (int)pad$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned int pad[2]
     * }
     */
    public static void pad(MemorySegment struct, long index0, int fieldValue) {
        pad$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

