// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfByte;

/**
 * {@snippet lang=c :
 * struct fsuuid2 {
 *     __u8 len;
 *     __u8 uuid[16];
 * }
 * }
 */
public class fsuuid2 {

    fsuuid2() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_CHAR.withName("len"),
        MemoryLayout.sequenceLayout(16, liburingtest.C_CHAR).withName("uuid")
    ).withName("fsuuid2");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte len$LAYOUT = (OfByte)$LAYOUT.select(groupElement("len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 len
     * }
     */
    public static final OfByte len$layout() {
        return len$LAYOUT;
    }

    private static final long len$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 len
     * }
     */
    public static final long len$offset() {
        return len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 len
     * }
     */
    public static byte len(MemorySegment struct) {
        return struct.get(len$LAYOUT, len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 len
     * }
     */
    public static void len(MemorySegment struct, byte fieldValue) {
        struct.set(len$LAYOUT, len$OFFSET, fieldValue);
    }

    private static final SequenceLayout uuid$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("uuid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 uuid[16]
     * }
     */
    public static final SequenceLayout uuid$layout() {
        return uuid$LAYOUT;
    }

    private static final long uuid$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 uuid[16]
     * }
     */
    public static final long uuid$offset() {
        return uuid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 uuid[16]
     * }
     */
    public static MemorySegment uuid(MemorySegment struct) {
        return struct.asSlice(uuid$OFFSET, uuid$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 uuid[16]
     * }
     */
    public static void uuid(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, uuid$OFFSET, uuid$LAYOUT.byteSize());
    }

    private static long[] uuid$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u8 uuid[16]
     * }
     */
    public static long[] uuid$dimensions() {
        return uuid$DIMS;
    }
    private static final VarHandle uuid$ELEM_HANDLE = uuid$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u8 uuid[16]
     * }
     */
    public static byte uuid(MemorySegment struct, long index0) {
        return (byte)uuid$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u8 uuid[16]
     * }
     */
    public static void uuid(MemorySegment struct, long index0, byte fieldValue) {
        uuid$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

