// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang=c :
 * struct statmount {
 *     __u32 size;
 *     __u32 __spare1;
 *     __u64 mask;
 *     __u32 sb_dev_major;
 *     __u32 sb_dev_minor;
 *     __u64 sb_magic;
 *     __u32 sb_flags;
 *     __u32 fs_type;
 *     __u64 mnt_id;
 *     __u64 mnt_parent_id;
 *     __u32 mnt_id_old;
 *     __u32 mnt_parent_id_old;
 *     __u64 mnt_attr;
 *     __u64 mnt_propagation;
 *     __u64 mnt_peer_group;
 *     __u64 mnt_master;
 *     __u64 propagate_from;
 *     __u32 mnt_root;
 *     __u32 mnt_point;
 *     __u64 __spare2[50];
 *     char str[];
 * }
 * }
 */
public class statmount {

    statmount() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_INT.withName("size"),
        liburingtest.C_INT.withName("__spare1"),
        liburingtest.C_LONG_LONG.withName("mask"),
        liburingtest.C_INT.withName("sb_dev_major"),
        liburingtest.C_INT.withName("sb_dev_minor"),
        liburingtest.C_LONG_LONG.withName("sb_magic"),
        liburingtest.C_INT.withName("sb_flags"),
        liburingtest.C_INT.withName("fs_type"),
        liburingtest.C_LONG_LONG.withName("mnt_id"),
        liburingtest.C_LONG_LONG.withName("mnt_parent_id"),
        liburingtest.C_INT.withName("mnt_id_old"),
        liburingtest.C_INT.withName("mnt_parent_id_old"),
        liburingtest.C_LONG_LONG.withName("mnt_attr"),
        liburingtest.C_LONG_LONG.withName("mnt_propagation"),
        liburingtest.C_LONG_LONG.withName("mnt_peer_group"),
        liburingtest.C_LONG_LONG.withName("mnt_master"),
        liburingtest.C_LONG_LONG.withName("propagate_from"),
        liburingtest.C_INT.withName("mnt_root"),
        liburingtest.C_INT.withName("mnt_point"),
        MemoryLayout.sequenceLayout(50, liburingtest.C_LONG_LONG).withName("__spare2"),
        MemoryLayout.sequenceLayout(0, liburingtest.C_CHAR).withName("str")
    ).withName("statmount");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 size
     * }
     */
    public static final OfInt size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 size
     * }
     */
    public static int size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 size
     * }
     */
    public static void size(MemorySegment struct, int fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final OfInt __spare1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("__spare1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 __spare1
     * }
     */
    public static final OfInt __spare1$layout() {
        return __spare1$LAYOUT;
    }

    private static final long __spare1$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 __spare1
     * }
     */
    public static final long __spare1$offset() {
        return __spare1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 __spare1
     * }
     */
    public static int __spare1(MemorySegment struct) {
        return struct.get(__spare1$LAYOUT, __spare1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 __spare1
     * }
     */
    public static void __spare1(MemorySegment struct, int fieldValue) {
        struct.set(__spare1$LAYOUT, __spare1$OFFSET, fieldValue);
    }

    private static final OfLong mask$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 mask
     * }
     */
    public static final OfLong mask$layout() {
        return mask$LAYOUT;
    }

    private static final long mask$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 mask
     * }
     */
    public static final long mask$offset() {
        return mask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 mask
     * }
     */
    public static long mask(MemorySegment struct) {
        return struct.get(mask$LAYOUT, mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 mask
     * }
     */
    public static void mask(MemorySegment struct, long fieldValue) {
        struct.set(mask$LAYOUT, mask$OFFSET, fieldValue);
    }

    private static final OfInt sb_dev_major$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sb_dev_major"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 sb_dev_major
     * }
     */
    public static final OfInt sb_dev_major$layout() {
        return sb_dev_major$LAYOUT;
    }

    private static final long sb_dev_major$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 sb_dev_major
     * }
     */
    public static final long sb_dev_major$offset() {
        return sb_dev_major$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 sb_dev_major
     * }
     */
    public static int sb_dev_major(MemorySegment struct) {
        return struct.get(sb_dev_major$LAYOUT, sb_dev_major$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 sb_dev_major
     * }
     */
    public static void sb_dev_major(MemorySegment struct, int fieldValue) {
        struct.set(sb_dev_major$LAYOUT, sb_dev_major$OFFSET, fieldValue);
    }

    private static final OfInt sb_dev_minor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sb_dev_minor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 sb_dev_minor
     * }
     */
    public static final OfInt sb_dev_minor$layout() {
        return sb_dev_minor$LAYOUT;
    }

    private static final long sb_dev_minor$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 sb_dev_minor
     * }
     */
    public static final long sb_dev_minor$offset() {
        return sb_dev_minor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 sb_dev_minor
     * }
     */
    public static int sb_dev_minor(MemorySegment struct) {
        return struct.get(sb_dev_minor$LAYOUT, sb_dev_minor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 sb_dev_minor
     * }
     */
    public static void sb_dev_minor(MemorySegment struct, int fieldValue) {
        struct.set(sb_dev_minor$LAYOUT, sb_dev_minor$OFFSET, fieldValue);
    }

    private static final OfLong sb_magic$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sb_magic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 sb_magic
     * }
     */
    public static final OfLong sb_magic$layout() {
        return sb_magic$LAYOUT;
    }

    private static final long sb_magic$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 sb_magic
     * }
     */
    public static final long sb_magic$offset() {
        return sb_magic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 sb_magic
     * }
     */
    public static long sb_magic(MemorySegment struct) {
        return struct.get(sb_magic$LAYOUT, sb_magic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 sb_magic
     * }
     */
    public static void sb_magic(MemorySegment struct, long fieldValue) {
        struct.set(sb_magic$LAYOUT, sb_magic$OFFSET, fieldValue);
    }

    private static final OfInt sb_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sb_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 sb_flags
     * }
     */
    public static final OfInt sb_flags$layout() {
        return sb_flags$LAYOUT;
    }

    private static final long sb_flags$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 sb_flags
     * }
     */
    public static final long sb_flags$offset() {
        return sb_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 sb_flags
     * }
     */
    public static int sb_flags(MemorySegment struct) {
        return struct.get(sb_flags$LAYOUT, sb_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 sb_flags
     * }
     */
    public static void sb_flags(MemorySegment struct, int fieldValue) {
        struct.set(sb_flags$LAYOUT, sb_flags$OFFSET, fieldValue);
    }

    private static final OfInt fs_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fs_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 fs_type
     * }
     */
    public static final OfInt fs_type$layout() {
        return fs_type$LAYOUT;
    }

    private static final long fs_type$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 fs_type
     * }
     */
    public static final long fs_type$offset() {
        return fs_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 fs_type
     * }
     */
    public static int fs_type(MemorySegment struct) {
        return struct.get(fs_type$LAYOUT, fs_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 fs_type
     * }
     */
    public static void fs_type(MemorySegment struct, int fieldValue) {
        struct.set(fs_type$LAYOUT, fs_type$OFFSET, fieldValue);
    }

    private static final OfLong mnt_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mnt_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 mnt_id
     * }
     */
    public static final OfLong mnt_id$layout() {
        return mnt_id$LAYOUT;
    }

    private static final long mnt_id$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 mnt_id
     * }
     */
    public static final long mnt_id$offset() {
        return mnt_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 mnt_id
     * }
     */
    public static long mnt_id(MemorySegment struct) {
        return struct.get(mnt_id$LAYOUT, mnt_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 mnt_id
     * }
     */
    public static void mnt_id(MemorySegment struct, long fieldValue) {
        struct.set(mnt_id$LAYOUT, mnt_id$OFFSET, fieldValue);
    }

    private static final OfLong mnt_parent_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mnt_parent_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 mnt_parent_id
     * }
     */
    public static final OfLong mnt_parent_id$layout() {
        return mnt_parent_id$LAYOUT;
    }

    private static final long mnt_parent_id$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 mnt_parent_id
     * }
     */
    public static final long mnt_parent_id$offset() {
        return mnt_parent_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 mnt_parent_id
     * }
     */
    public static long mnt_parent_id(MemorySegment struct) {
        return struct.get(mnt_parent_id$LAYOUT, mnt_parent_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 mnt_parent_id
     * }
     */
    public static void mnt_parent_id(MemorySegment struct, long fieldValue) {
        struct.set(mnt_parent_id$LAYOUT, mnt_parent_id$OFFSET, fieldValue);
    }

    private static final OfInt mnt_id_old$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mnt_id_old"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 mnt_id_old
     * }
     */
    public static final OfInt mnt_id_old$layout() {
        return mnt_id_old$LAYOUT;
    }

    private static final long mnt_id_old$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 mnt_id_old
     * }
     */
    public static final long mnt_id_old$offset() {
        return mnt_id_old$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 mnt_id_old
     * }
     */
    public static int mnt_id_old(MemorySegment struct) {
        return struct.get(mnt_id_old$LAYOUT, mnt_id_old$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 mnt_id_old
     * }
     */
    public static void mnt_id_old(MemorySegment struct, int fieldValue) {
        struct.set(mnt_id_old$LAYOUT, mnt_id_old$OFFSET, fieldValue);
    }

    private static final OfInt mnt_parent_id_old$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mnt_parent_id_old"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 mnt_parent_id_old
     * }
     */
    public static final OfInt mnt_parent_id_old$layout() {
        return mnt_parent_id_old$LAYOUT;
    }

    private static final long mnt_parent_id_old$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 mnt_parent_id_old
     * }
     */
    public static final long mnt_parent_id_old$offset() {
        return mnt_parent_id_old$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 mnt_parent_id_old
     * }
     */
    public static int mnt_parent_id_old(MemorySegment struct) {
        return struct.get(mnt_parent_id_old$LAYOUT, mnt_parent_id_old$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 mnt_parent_id_old
     * }
     */
    public static void mnt_parent_id_old(MemorySegment struct, int fieldValue) {
        struct.set(mnt_parent_id_old$LAYOUT, mnt_parent_id_old$OFFSET, fieldValue);
    }

    private static final OfLong mnt_attr$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mnt_attr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 mnt_attr
     * }
     */
    public static final OfLong mnt_attr$layout() {
        return mnt_attr$LAYOUT;
    }

    private static final long mnt_attr$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 mnt_attr
     * }
     */
    public static final long mnt_attr$offset() {
        return mnt_attr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 mnt_attr
     * }
     */
    public static long mnt_attr(MemorySegment struct) {
        return struct.get(mnt_attr$LAYOUT, mnt_attr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 mnt_attr
     * }
     */
    public static void mnt_attr(MemorySegment struct, long fieldValue) {
        struct.set(mnt_attr$LAYOUT, mnt_attr$OFFSET, fieldValue);
    }

    private static final OfLong mnt_propagation$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mnt_propagation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 mnt_propagation
     * }
     */
    public static final OfLong mnt_propagation$layout() {
        return mnt_propagation$LAYOUT;
    }

    private static final long mnt_propagation$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 mnt_propagation
     * }
     */
    public static final long mnt_propagation$offset() {
        return mnt_propagation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 mnt_propagation
     * }
     */
    public static long mnt_propagation(MemorySegment struct) {
        return struct.get(mnt_propagation$LAYOUT, mnt_propagation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 mnt_propagation
     * }
     */
    public static void mnt_propagation(MemorySegment struct, long fieldValue) {
        struct.set(mnt_propagation$LAYOUT, mnt_propagation$OFFSET, fieldValue);
    }

    private static final OfLong mnt_peer_group$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mnt_peer_group"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 mnt_peer_group
     * }
     */
    public static final OfLong mnt_peer_group$layout() {
        return mnt_peer_group$LAYOUT;
    }

    private static final long mnt_peer_group$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 mnt_peer_group
     * }
     */
    public static final long mnt_peer_group$offset() {
        return mnt_peer_group$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 mnt_peer_group
     * }
     */
    public static long mnt_peer_group(MemorySegment struct) {
        return struct.get(mnt_peer_group$LAYOUT, mnt_peer_group$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 mnt_peer_group
     * }
     */
    public static void mnt_peer_group(MemorySegment struct, long fieldValue) {
        struct.set(mnt_peer_group$LAYOUT, mnt_peer_group$OFFSET, fieldValue);
    }

    private static final OfLong mnt_master$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mnt_master"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 mnt_master
     * }
     */
    public static final OfLong mnt_master$layout() {
        return mnt_master$LAYOUT;
    }

    private static final long mnt_master$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 mnt_master
     * }
     */
    public static final long mnt_master$offset() {
        return mnt_master$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 mnt_master
     * }
     */
    public static long mnt_master(MemorySegment struct) {
        return struct.get(mnt_master$LAYOUT, mnt_master$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 mnt_master
     * }
     */
    public static void mnt_master(MemorySegment struct, long fieldValue) {
        struct.set(mnt_master$LAYOUT, mnt_master$OFFSET, fieldValue);
    }

    private static final OfLong propagate_from$LAYOUT = (OfLong)$LAYOUT.select(groupElement("propagate_from"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 propagate_from
     * }
     */
    public static final OfLong propagate_from$layout() {
        return propagate_from$LAYOUT;
    }

    private static final long propagate_from$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 propagate_from
     * }
     */
    public static final long propagate_from$offset() {
        return propagate_from$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 propagate_from
     * }
     */
    public static long propagate_from(MemorySegment struct) {
        return struct.get(propagate_from$LAYOUT, propagate_from$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 propagate_from
     * }
     */
    public static void propagate_from(MemorySegment struct, long fieldValue) {
        struct.set(propagate_from$LAYOUT, propagate_from$OFFSET, fieldValue);
    }

    private static final OfInt mnt_root$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mnt_root"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 mnt_root
     * }
     */
    public static final OfInt mnt_root$layout() {
        return mnt_root$LAYOUT;
    }

    private static final long mnt_root$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 mnt_root
     * }
     */
    public static final long mnt_root$offset() {
        return mnt_root$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 mnt_root
     * }
     */
    public static int mnt_root(MemorySegment struct) {
        return struct.get(mnt_root$LAYOUT, mnt_root$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 mnt_root
     * }
     */
    public static void mnt_root(MemorySegment struct, int fieldValue) {
        struct.set(mnt_root$LAYOUT, mnt_root$OFFSET, fieldValue);
    }

    private static final OfInt mnt_point$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mnt_point"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 mnt_point
     * }
     */
    public static final OfInt mnt_point$layout() {
        return mnt_point$LAYOUT;
    }

    private static final long mnt_point$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 mnt_point
     * }
     */
    public static final long mnt_point$offset() {
        return mnt_point$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 mnt_point
     * }
     */
    public static int mnt_point(MemorySegment struct) {
        return struct.get(mnt_point$LAYOUT, mnt_point$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 mnt_point
     * }
     */
    public static void mnt_point(MemorySegment struct, int fieldValue) {
        struct.set(mnt_point$LAYOUT, mnt_point$OFFSET, fieldValue);
    }

    private static final SequenceLayout __spare2$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__spare2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 __spare2[50]
     * }
     */
    public static final SequenceLayout __spare2$layout() {
        return __spare2$LAYOUT;
    }

    private static final long __spare2$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 __spare2[50]
     * }
     */
    public static final long __spare2$offset() {
        return __spare2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 __spare2[50]
     * }
     */
    public static MemorySegment __spare2(MemorySegment struct) {
        return struct.asSlice(__spare2$OFFSET, __spare2$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 __spare2[50]
     * }
     */
    public static void __spare2(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __spare2$OFFSET, __spare2$LAYOUT.byteSize());
    }

    private static long[] __spare2$DIMS = { 50 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u64 __spare2[50]
     * }
     */
    public static long[] __spare2$dimensions() {
        return __spare2$DIMS;
    }
    private static final VarHandle __spare2$ELEM_HANDLE = __spare2$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u64 __spare2[50]
     * }
     */
    public static long __spare2(MemorySegment struct, long index0) {
        return (long)__spare2$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u64 __spare2[50]
     * }
     */
    public static void __spare2(MemorySegment struct, long index0, long fieldValue) {
        __spare2$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout str$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("str"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char str[]
     * }
     */
    public static final SequenceLayout str$layout() {
        return str$LAYOUT;
    }

    private static final long str$OFFSET = 512;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char str[]
     * }
     */
    public static final long str$offset() {
        return str$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char str[]
     * }
     */
    public static MemorySegment str(MemorySegment struct) {
        return struct.asSlice(str$OFFSET, str$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char str[]
     * }
     */
    public static void str(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, str$OFFSET, str$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

