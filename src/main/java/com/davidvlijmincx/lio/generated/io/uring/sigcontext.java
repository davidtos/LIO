// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfLong;
import static java.lang.foreign.ValueLayout.OfShort;

/**
 * {@snippet lang=c :
 * struct sigcontext {
 *     __uint64_t r8;
 *     __uint64_t r9;
 *     __uint64_t r10;
 *     __uint64_t r11;
 *     __uint64_t r12;
 *     __uint64_t r13;
 *     __uint64_t r14;
 *     __uint64_t r15;
 *     __uint64_t rdi;
 *     __uint64_t rsi;
 *     __uint64_t rbp;
 *     __uint64_t rbx;
 *     __uint64_t rdx;
 *     __uint64_t rax;
 *     __uint64_t rcx;
 *     __uint64_t rsp;
 *     __uint64_t rip;
 *     __uint64_t eflags;
 *     unsigned short cs;
 *     unsigned short gs;
 *     unsigned short fs;
 *     unsigned short __pad0;
 *     __uint64_t err;
 *     __uint64_t trapno;
 *     __uint64_t oldmask;
 *     __uint64_t cr2;
 *     union {
 *         struct _fpstate *fpstate;
 *         __uint64_t __fpstate_word;
 *     };
 *     __uint64_t __reserved1[8];
 * }
 * }
 */
public class sigcontext {

    sigcontext() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_LONG.withName("r8"),
        liburingtest.C_LONG.withName("r9"),
        liburingtest.C_LONG.withName("r10"),
        liburingtest.C_LONG.withName("r11"),
        liburingtest.C_LONG.withName("r12"),
        liburingtest.C_LONG.withName("r13"),
        liburingtest.C_LONG.withName("r14"),
        liburingtest.C_LONG.withName("r15"),
        liburingtest.C_LONG.withName("rdi"),
        liburingtest.C_LONG.withName("rsi"),
        liburingtest.C_LONG.withName("rbp"),
        liburingtest.C_LONG.withName("rbx"),
        liburingtest.C_LONG.withName("rdx"),
        liburingtest.C_LONG.withName("rax"),
        liburingtest.C_LONG.withName("rcx"),
        liburingtest.C_LONG.withName("rsp"),
        liburingtest.C_LONG.withName("rip"),
        liburingtest.C_LONG.withName("eflags"),
        liburingtest.C_SHORT.withName("cs"),
        liburingtest.C_SHORT.withName("gs"),
        liburingtest.C_SHORT.withName("fs"),
        liburingtest.C_SHORT.withName("__pad0"),
        liburingtest.C_LONG.withName("err"),
        liburingtest.C_LONG.withName("trapno"),
        liburingtest.C_LONG.withName("oldmask"),
        liburingtest.C_LONG.withName("cr2"),
        MemoryLayout.unionLayout(
            liburingtest.C_POINTER.withName("fpstate"),
            liburingtest.C_LONG.withName("__fpstate_word")
        ).withName("$anon$167:17"),
        MemoryLayout.sequenceLayout(8, liburingtest.C_LONG).withName("__reserved1")
    ).withName("sigcontext");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong r8$LAYOUT = (OfLong)$LAYOUT.select(groupElement("r8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t r8
     * }
     */
    public static final OfLong r8$layout() {
        return r8$LAYOUT;
    }

    private static final long r8$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t r8
     * }
     */
    public static final long r8$offset() {
        return r8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t r8
     * }
     */
    public static long r8(MemorySegment struct) {
        return struct.get(r8$LAYOUT, r8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t r8
     * }
     */
    public static void r8(MemorySegment struct, long fieldValue) {
        struct.set(r8$LAYOUT, r8$OFFSET, fieldValue);
    }

    private static final OfLong r9$LAYOUT = (OfLong)$LAYOUT.select(groupElement("r9"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t r9
     * }
     */
    public static final OfLong r9$layout() {
        return r9$LAYOUT;
    }

    private static final long r9$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t r9
     * }
     */
    public static final long r9$offset() {
        return r9$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t r9
     * }
     */
    public static long r9(MemorySegment struct) {
        return struct.get(r9$LAYOUT, r9$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t r9
     * }
     */
    public static void r9(MemorySegment struct, long fieldValue) {
        struct.set(r9$LAYOUT, r9$OFFSET, fieldValue);
    }

    private static final OfLong r10$LAYOUT = (OfLong)$LAYOUT.select(groupElement("r10"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t r10
     * }
     */
    public static final OfLong r10$layout() {
        return r10$LAYOUT;
    }

    private static final long r10$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t r10
     * }
     */
    public static final long r10$offset() {
        return r10$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t r10
     * }
     */
    public static long r10(MemorySegment struct) {
        return struct.get(r10$LAYOUT, r10$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t r10
     * }
     */
    public static void r10(MemorySegment struct, long fieldValue) {
        struct.set(r10$LAYOUT, r10$OFFSET, fieldValue);
    }

    private static final OfLong r11$LAYOUT = (OfLong)$LAYOUT.select(groupElement("r11"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t r11
     * }
     */
    public static final OfLong r11$layout() {
        return r11$LAYOUT;
    }

    private static final long r11$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t r11
     * }
     */
    public static final long r11$offset() {
        return r11$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t r11
     * }
     */
    public static long r11(MemorySegment struct) {
        return struct.get(r11$LAYOUT, r11$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t r11
     * }
     */
    public static void r11(MemorySegment struct, long fieldValue) {
        struct.set(r11$LAYOUT, r11$OFFSET, fieldValue);
    }

    private static final OfLong r12$LAYOUT = (OfLong)$LAYOUT.select(groupElement("r12"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t r12
     * }
     */
    public static final OfLong r12$layout() {
        return r12$LAYOUT;
    }

    private static final long r12$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t r12
     * }
     */
    public static final long r12$offset() {
        return r12$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t r12
     * }
     */
    public static long r12(MemorySegment struct) {
        return struct.get(r12$LAYOUT, r12$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t r12
     * }
     */
    public static void r12(MemorySegment struct, long fieldValue) {
        struct.set(r12$LAYOUT, r12$OFFSET, fieldValue);
    }

    private static final OfLong r13$LAYOUT = (OfLong)$LAYOUT.select(groupElement("r13"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t r13
     * }
     */
    public static final OfLong r13$layout() {
        return r13$LAYOUT;
    }

    private static final long r13$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t r13
     * }
     */
    public static final long r13$offset() {
        return r13$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t r13
     * }
     */
    public static long r13(MemorySegment struct) {
        return struct.get(r13$LAYOUT, r13$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t r13
     * }
     */
    public static void r13(MemorySegment struct, long fieldValue) {
        struct.set(r13$LAYOUT, r13$OFFSET, fieldValue);
    }

    private static final OfLong r14$LAYOUT = (OfLong)$LAYOUT.select(groupElement("r14"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t r14
     * }
     */
    public static final OfLong r14$layout() {
        return r14$LAYOUT;
    }

    private static final long r14$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t r14
     * }
     */
    public static final long r14$offset() {
        return r14$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t r14
     * }
     */
    public static long r14(MemorySegment struct) {
        return struct.get(r14$LAYOUT, r14$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t r14
     * }
     */
    public static void r14(MemorySegment struct, long fieldValue) {
        struct.set(r14$LAYOUT, r14$OFFSET, fieldValue);
    }

    private static final OfLong r15$LAYOUT = (OfLong)$LAYOUT.select(groupElement("r15"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t r15
     * }
     */
    public static final OfLong r15$layout() {
        return r15$LAYOUT;
    }

    private static final long r15$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t r15
     * }
     */
    public static final long r15$offset() {
        return r15$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t r15
     * }
     */
    public static long r15(MemorySegment struct) {
        return struct.get(r15$LAYOUT, r15$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t r15
     * }
     */
    public static void r15(MemorySegment struct, long fieldValue) {
        struct.set(r15$LAYOUT, r15$OFFSET, fieldValue);
    }

    private static final OfLong rdi$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rdi"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t rdi
     * }
     */
    public static final OfLong rdi$layout() {
        return rdi$LAYOUT;
    }

    private static final long rdi$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t rdi
     * }
     */
    public static final long rdi$offset() {
        return rdi$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t rdi
     * }
     */
    public static long rdi(MemorySegment struct) {
        return struct.get(rdi$LAYOUT, rdi$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t rdi
     * }
     */
    public static void rdi(MemorySegment struct, long fieldValue) {
        struct.set(rdi$LAYOUT, rdi$OFFSET, fieldValue);
    }

    private static final OfLong rsi$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rsi"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t rsi
     * }
     */
    public static final OfLong rsi$layout() {
        return rsi$LAYOUT;
    }

    private static final long rsi$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t rsi
     * }
     */
    public static final long rsi$offset() {
        return rsi$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t rsi
     * }
     */
    public static long rsi(MemorySegment struct) {
        return struct.get(rsi$LAYOUT, rsi$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t rsi
     * }
     */
    public static void rsi(MemorySegment struct, long fieldValue) {
        struct.set(rsi$LAYOUT, rsi$OFFSET, fieldValue);
    }

    private static final OfLong rbp$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rbp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t rbp
     * }
     */
    public static final OfLong rbp$layout() {
        return rbp$LAYOUT;
    }

    private static final long rbp$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t rbp
     * }
     */
    public static final long rbp$offset() {
        return rbp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t rbp
     * }
     */
    public static long rbp(MemorySegment struct) {
        return struct.get(rbp$LAYOUT, rbp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t rbp
     * }
     */
    public static void rbp(MemorySegment struct, long fieldValue) {
        struct.set(rbp$LAYOUT, rbp$OFFSET, fieldValue);
    }

    private static final OfLong rbx$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rbx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t rbx
     * }
     */
    public static final OfLong rbx$layout() {
        return rbx$LAYOUT;
    }

    private static final long rbx$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t rbx
     * }
     */
    public static final long rbx$offset() {
        return rbx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t rbx
     * }
     */
    public static long rbx(MemorySegment struct) {
        return struct.get(rbx$LAYOUT, rbx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t rbx
     * }
     */
    public static void rbx(MemorySegment struct, long fieldValue) {
        struct.set(rbx$LAYOUT, rbx$OFFSET, fieldValue);
    }

    private static final OfLong rdx$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rdx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t rdx
     * }
     */
    public static final OfLong rdx$layout() {
        return rdx$LAYOUT;
    }

    private static final long rdx$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t rdx
     * }
     */
    public static final long rdx$offset() {
        return rdx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t rdx
     * }
     */
    public static long rdx(MemorySegment struct) {
        return struct.get(rdx$LAYOUT, rdx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t rdx
     * }
     */
    public static void rdx(MemorySegment struct, long fieldValue) {
        struct.set(rdx$LAYOUT, rdx$OFFSET, fieldValue);
    }

    private static final OfLong rax$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t rax
     * }
     */
    public static final OfLong rax$layout() {
        return rax$LAYOUT;
    }

    private static final long rax$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t rax
     * }
     */
    public static final long rax$offset() {
        return rax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t rax
     * }
     */
    public static long rax(MemorySegment struct) {
        return struct.get(rax$LAYOUT, rax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t rax
     * }
     */
    public static void rax(MemorySegment struct, long fieldValue) {
        struct.set(rax$LAYOUT, rax$OFFSET, fieldValue);
    }

    private static final OfLong rcx$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rcx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t rcx
     * }
     */
    public static final OfLong rcx$layout() {
        return rcx$LAYOUT;
    }

    private static final long rcx$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t rcx
     * }
     */
    public static final long rcx$offset() {
        return rcx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t rcx
     * }
     */
    public static long rcx(MemorySegment struct) {
        return struct.get(rcx$LAYOUT, rcx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t rcx
     * }
     */
    public static void rcx(MemorySegment struct, long fieldValue) {
        struct.set(rcx$LAYOUT, rcx$OFFSET, fieldValue);
    }

    private static final OfLong rsp$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rsp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t rsp
     * }
     */
    public static final OfLong rsp$layout() {
        return rsp$LAYOUT;
    }

    private static final long rsp$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t rsp
     * }
     */
    public static final long rsp$offset() {
        return rsp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t rsp
     * }
     */
    public static long rsp(MemorySegment struct) {
        return struct.get(rsp$LAYOUT, rsp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t rsp
     * }
     */
    public static void rsp(MemorySegment struct, long fieldValue) {
        struct.set(rsp$LAYOUT, rsp$OFFSET, fieldValue);
    }

    private static final OfLong rip$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rip"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t rip
     * }
     */
    public static final OfLong rip$layout() {
        return rip$LAYOUT;
    }

    private static final long rip$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t rip
     * }
     */
    public static final long rip$offset() {
        return rip$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t rip
     * }
     */
    public static long rip(MemorySegment struct) {
        return struct.get(rip$LAYOUT, rip$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t rip
     * }
     */
    public static void rip(MemorySegment struct, long fieldValue) {
        struct.set(rip$LAYOUT, rip$OFFSET, fieldValue);
    }

    private static final OfLong eflags$LAYOUT = (OfLong)$LAYOUT.select(groupElement("eflags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t eflags
     * }
     */
    public static final OfLong eflags$layout() {
        return eflags$LAYOUT;
    }

    private static final long eflags$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t eflags
     * }
     */
    public static final long eflags$offset() {
        return eflags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t eflags
     * }
     */
    public static long eflags(MemorySegment struct) {
        return struct.get(eflags$LAYOUT, eflags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t eflags
     * }
     */
    public static void eflags(MemorySegment struct, long fieldValue) {
        struct.set(eflags$LAYOUT, eflags$OFFSET, fieldValue);
    }

    private static final OfShort cs$LAYOUT = (OfShort)$LAYOUT.select(groupElement("cs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short cs
     * }
     */
    public static final OfShort cs$layout() {
        return cs$LAYOUT;
    }

    private static final long cs$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short cs
     * }
     */
    public static final long cs$offset() {
        return cs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short cs
     * }
     */
    public static short cs(MemorySegment struct) {
        return struct.get(cs$LAYOUT, cs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short cs
     * }
     */
    public static void cs(MemorySegment struct, short fieldValue) {
        struct.set(cs$LAYOUT, cs$OFFSET, fieldValue);
    }

    private static final OfShort gs$LAYOUT = (OfShort)$LAYOUT.select(groupElement("gs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short gs
     * }
     */
    public static final OfShort gs$layout() {
        return gs$LAYOUT;
    }

    private static final long gs$OFFSET = 146;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short gs
     * }
     */
    public static final long gs$offset() {
        return gs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short gs
     * }
     */
    public static short gs(MemorySegment struct) {
        return struct.get(gs$LAYOUT, gs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short gs
     * }
     */
    public static void gs(MemorySegment struct, short fieldValue) {
        struct.set(gs$LAYOUT, gs$OFFSET, fieldValue);
    }

    private static final OfShort fs$LAYOUT = (OfShort)$LAYOUT.select(groupElement("fs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short fs
     * }
     */
    public static final OfShort fs$layout() {
        return fs$LAYOUT;
    }

    private static final long fs$OFFSET = 148;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short fs
     * }
     */
    public static final long fs$offset() {
        return fs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short fs
     * }
     */
    public static short fs(MemorySegment struct) {
        return struct.get(fs$LAYOUT, fs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short fs
     * }
     */
    public static void fs(MemorySegment struct, short fieldValue) {
        struct.set(fs$LAYOUT, fs$OFFSET, fieldValue);
    }

    private static final OfShort __pad0$LAYOUT = (OfShort)$LAYOUT.select(groupElement("__pad0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short __pad0
     * }
     */
    public static final OfShort __pad0$layout() {
        return __pad0$LAYOUT;
    }

    private static final long __pad0$OFFSET = 150;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short __pad0
     * }
     */
    public static final long __pad0$offset() {
        return __pad0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short __pad0
     * }
     */
    public static short __pad0(MemorySegment struct) {
        return struct.get(__pad0$LAYOUT, __pad0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short __pad0
     * }
     */
    public static void __pad0(MemorySegment struct, short fieldValue) {
        struct.set(__pad0$LAYOUT, __pad0$OFFSET, fieldValue);
    }

    private static final OfLong err$LAYOUT = (OfLong)$LAYOUT.select(groupElement("err"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t err
     * }
     */
    public static final OfLong err$layout() {
        return err$LAYOUT;
    }

    private static final long err$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t err
     * }
     */
    public static final long err$offset() {
        return err$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t err
     * }
     */
    public static long err(MemorySegment struct) {
        return struct.get(err$LAYOUT, err$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t err
     * }
     */
    public static void err(MemorySegment struct, long fieldValue) {
        struct.set(err$LAYOUT, err$OFFSET, fieldValue);
    }

    private static final OfLong trapno$LAYOUT = (OfLong)$LAYOUT.select(groupElement("trapno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t trapno
     * }
     */
    public static final OfLong trapno$layout() {
        return trapno$LAYOUT;
    }

    private static final long trapno$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t trapno
     * }
     */
    public static final long trapno$offset() {
        return trapno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t trapno
     * }
     */
    public static long trapno(MemorySegment struct) {
        return struct.get(trapno$LAYOUT, trapno$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t trapno
     * }
     */
    public static void trapno(MemorySegment struct, long fieldValue) {
        struct.set(trapno$LAYOUT, trapno$OFFSET, fieldValue);
    }

    private static final OfLong oldmask$LAYOUT = (OfLong)$LAYOUT.select(groupElement("oldmask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t oldmask
     * }
     */
    public static final OfLong oldmask$layout() {
        return oldmask$LAYOUT;
    }

    private static final long oldmask$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t oldmask
     * }
     */
    public static final long oldmask$offset() {
        return oldmask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t oldmask
     * }
     */
    public static long oldmask(MemorySegment struct) {
        return struct.get(oldmask$LAYOUT, oldmask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t oldmask
     * }
     */
    public static void oldmask(MemorySegment struct, long fieldValue) {
        struct.set(oldmask$LAYOUT, oldmask$OFFSET, fieldValue);
    }

    private static final OfLong cr2$LAYOUT = (OfLong)$LAYOUT.select(groupElement("cr2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t cr2
     * }
     */
    public static final OfLong cr2$layout() {
        return cr2$LAYOUT;
    }

    private static final long cr2$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t cr2
     * }
     */
    public static final long cr2$offset() {
        return cr2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t cr2
     * }
     */
    public static long cr2(MemorySegment struct) {
        return struct.get(cr2$LAYOUT, cr2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t cr2
     * }
     */
    public static void cr2(MemorySegment struct, long fieldValue) {
        struct.set(cr2$LAYOUT, cr2$OFFSET, fieldValue);
    }

    private static final AddressLayout fpstate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$167:17"), groupElement("fpstate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _fpstate *fpstate
     * }
     */
    public static final AddressLayout fpstate$layout() {
        return fpstate$LAYOUT;
    }

    private static final long fpstate$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _fpstate *fpstate
     * }
     */
    public static final long fpstate$offset() {
        return fpstate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _fpstate *fpstate
     * }
     */
    public static MemorySegment fpstate(MemorySegment struct) {
        return struct.get(fpstate$LAYOUT, fpstate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _fpstate *fpstate
     * }
     */
    public static void fpstate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fpstate$LAYOUT, fpstate$OFFSET, fieldValue);
    }

    private static final OfLong __fpstate_word$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$167:17"), groupElement("__fpstate_word"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t __fpstate_word
     * }
     */
    public static final OfLong __fpstate_word$layout() {
        return __fpstate_word$LAYOUT;
    }

    private static final long __fpstate_word$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t __fpstate_word
     * }
     */
    public static final long __fpstate_word$offset() {
        return __fpstate_word$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t __fpstate_word
     * }
     */
    public static long __fpstate_word(MemorySegment struct) {
        return struct.get(__fpstate_word$LAYOUT, __fpstate_word$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t __fpstate_word
     * }
     */
    public static void __fpstate_word(MemorySegment struct, long fieldValue) {
        struct.set(__fpstate_word$LAYOUT, __fpstate_word$OFFSET, fieldValue);
    }

    private static final SequenceLayout __reserved1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t __reserved1[8]
     * }
     */
    public static final SequenceLayout __reserved1$layout() {
        return __reserved1$LAYOUT;
    }

    private static final long __reserved1$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t __reserved1[8]
     * }
     */
    public static final long __reserved1$offset() {
        return __reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t __reserved1[8]
     * }
     */
    public static MemorySegment __reserved1(MemorySegment struct) {
        return struct.asSlice(__reserved1$OFFSET, __reserved1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t __reserved1[8]
     * }
     */
    public static void __reserved1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __reserved1$OFFSET, __reserved1$LAYOUT.byteSize());
    }

    private static long[] __reserved1$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __uint64_t __reserved1[8]
     * }
     */
    public static long[] __reserved1$dimensions() {
        return __reserved1$DIMS;
    }
    private static final VarHandle __reserved1$ELEM_HANDLE = __reserved1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __uint64_t __reserved1[8]
     * }
     */
    public static long __reserved1(MemorySegment struct, long index0) {
        return (long)__reserved1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __uint64_t __reserved1[8]
     * }
     */
    public static void __reserved1(MemorySegment struct, long index0, long fieldValue) {
        __reserved1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

