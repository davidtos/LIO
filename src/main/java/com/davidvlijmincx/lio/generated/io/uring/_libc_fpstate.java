// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.*;

/**
 * {@snippet lang=c :
 * struct _libc_fpstate {
 *     __uint16_t cwd;
 *     __uint16_t swd;
 *     __uint16_t ftw;
 *     __uint16_t fop;
 *     __uint64_t rip;
 *     __uint64_t rdp;
 *     __uint32_t mxcsr;
 *     __uint32_t mxcr_mask;
 *     struct _libc_fpxreg _st[8];
 *     struct _libc_xmmreg _xmm[16];
 *     __uint32_t __glibc_reserved1[24];
 * }
 * }
 */
public class _libc_fpstate {

    _libc_fpstate() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_SHORT.withName("cwd"),
        liburingtest.C_SHORT.withName("swd"),
        liburingtest.C_SHORT.withName("ftw"),
        liburingtest.C_SHORT.withName("fop"),
        liburingtest.C_LONG.withName("rip"),
        liburingtest.C_LONG.withName("rdp"),
        liburingtest.C_INT.withName("mxcsr"),
        liburingtest.C_INT.withName("mxcr_mask"),
        MemoryLayout.sequenceLayout(8, _libc_fpxreg.layout()).withName("_st"),
        MemoryLayout.sequenceLayout(16, _libc_xmmreg.layout()).withName("_xmm"),
        MemoryLayout.sequenceLayout(24, liburingtest.C_INT).withName("__glibc_reserved1")
    ).withName("_libc_fpstate");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort cwd$LAYOUT = (OfShort)$LAYOUT.select(groupElement("cwd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint16_t cwd
     * }
     */
    public static final OfShort cwd$layout() {
        return cwd$LAYOUT;
    }

    private static final long cwd$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint16_t cwd
     * }
     */
    public static final long cwd$offset() {
        return cwd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint16_t cwd
     * }
     */
    public static short cwd(MemorySegment struct) {
        return struct.get(cwd$LAYOUT, cwd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint16_t cwd
     * }
     */
    public static void cwd(MemorySegment struct, short fieldValue) {
        struct.set(cwd$LAYOUT, cwd$OFFSET, fieldValue);
    }

    private static final OfShort swd$LAYOUT = (OfShort)$LAYOUT.select(groupElement("swd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint16_t swd
     * }
     */
    public static final OfShort swd$layout() {
        return swd$LAYOUT;
    }

    private static final long swd$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint16_t swd
     * }
     */
    public static final long swd$offset() {
        return swd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint16_t swd
     * }
     */
    public static short swd(MemorySegment struct) {
        return struct.get(swd$LAYOUT, swd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint16_t swd
     * }
     */
    public static void swd(MemorySegment struct, short fieldValue) {
        struct.set(swd$LAYOUT, swd$OFFSET, fieldValue);
    }

    private static final OfShort ftw$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ftw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint16_t ftw
     * }
     */
    public static final OfShort ftw$layout() {
        return ftw$LAYOUT;
    }

    private static final long ftw$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint16_t ftw
     * }
     */
    public static final long ftw$offset() {
        return ftw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint16_t ftw
     * }
     */
    public static short ftw(MemorySegment struct) {
        return struct.get(ftw$LAYOUT, ftw$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint16_t ftw
     * }
     */
    public static void ftw(MemorySegment struct, short fieldValue) {
        struct.set(ftw$LAYOUT, ftw$OFFSET, fieldValue);
    }

    private static final OfShort fop$LAYOUT = (OfShort)$LAYOUT.select(groupElement("fop"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint16_t fop
     * }
     */
    public static final OfShort fop$layout() {
        return fop$LAYOUT;
    }

    private static final long fop$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint16_t fop
     * }
     */
    public static final long fop$offset() {
        return fop$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint16_t fop
     * }
     */
    public static short fop(MemorySegment struct) {
        return struct.get(fop$LAYOUT, fop$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint16_t fop
     * }
     */
    public static void fop(MemorySegment struct, short fieldValue) {
        struct.set(fop$LAYOUT, fop$OFFSET, fieldValue);
    }

    private static final OfLong rip$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rip"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t rip
     * }
     */
    public static final OfLong rip$layout() {
        return rip$LAYOUT;
    }

    private static final long rip$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t rip
     * }
     */
    public static final long rip$offset() {
        return rip$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t rip
     * }
     */
    public static long rip(MemorySegment struct) {
        return struct.get(rip$LAYOUT, rip$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t rip
     * }
     */
    public static void rip(MemorySegment struct, long fieldValue) {
        struct.set(rip$LAYOUT, rip$OFFSET, fieldValue);
    }

    private static final OfLong rdp$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rdp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint64_t rdp
     * }
     */
    public static final OfLong rdp$layout() {
        return rdp$LAYOUT;
    }

    private static final long rdp$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint64_t rdp
     * }
     */
    public static final long rdp$offset() {
        return rdp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint64_t rdp
     * }
     */
    public static long rdp(MemorySegment struct) {
        return struct.get(rdp$LAYOUT, rdp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint64_t rdp
     * }
     */
    public static void rdp(MemorySegment struct, long fieldValue) {
        struct.set(rdp$LAYOUT, rdp$OFFSET, fieldValue);
    }

    private static final OfInt mxcsr$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mxcsr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint32_t mxcsr
     * }
     */
    public static final OfInt mxcsr$layout() {
        return mxcsr$LAYOUT;
    }

    private static final long mxcsr$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint32_t mxcsr
     * }
     */
    public static final long mxcsr$offset() {
        return mxcsr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint32_t mxcsr
     * }
     */
    public static int mxcsr(MemorySegment struct) {
        return struct.get(mxcsr$LAYOUT, mxcsr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint32_t mxcsr
     * }
     */
    public static void mxcsr(MemorySegment struct, int fieldValue) {
        struct.set(mxcsr$LAYOUT, mxcsr$OFFSET, fieldValue);
    }

    private static final OfInt mxcr_mask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mxcr_mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint32_t mxcr_mask
     * }
     */
    public static final OfInt mxcr_mask$layout() {
        return mxcr_mask$LAYOUT;
    }

    private static final long mxcr_mask$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint32_t mxcr_mask
     * }
     */
    public static final long mxcr_mask$offset() {
        return mxcr_mask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint32_t mxcr_mask
     * }
     */
    public static int mxcr_mask(MemorySegment struct) {
        return struct.get(mxcr_mask$LAYOUT, mxcr_mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint32_t mxcr_mask
     * }
     */
    public static void mxcr_mask(MemorySegment struct, int fieldValue) {
        struct.set(mxcr_mask$LAYOUT, mxcr_mask$OFFSET, fieldValue);
    }

    private static final SequenceLayout _st$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("_st"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _libc_fpxreg _st[8]
     * }
     */
    public static final SequenceLayout _st$layout() {
        return _st$LAYOUT;
    }

    private static final long _st$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _libc_fpxreg _st[8]
     * }
     */
    public static final long _st$offset() {
        return _st$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _libc_fpxreg _st[8]
     * }
     */
    public static MemorySegment _st(MemorySegment struct) {
        return struct.asSlice(_st$OFFSET, _st$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _libc_fpxreg _st[8]
     * }
     */
    public static void _st(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _st$OFFSET, _st$LAYOUT.byteSize());
    }

    private static long[] _st$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * struct _libc_fpxreg _st[8]
     * }
     */
    public static long[] _st$dimensions() {
        return _st$DIMS;
    }
    private static final MethodHandle _st$ELEM_HANDLE = _st$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * struct _libc_fpxreg _st[8]
     * }
     */
    public static MemorySegment _st(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)_st$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * struct _libc_fpxreg _st[8]
     * }
     */
    public static void _st(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, _st(struct, index0), 0L, _libc_fpxreg.layout().byteSize());
    }

    private static final SequenceLayout _xmm$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("_xmm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _libc_xmmreg _xmm[16]
     * }
     */
    public static final SequenceLayout _xmm$layout() {
        return _xmm$LAYOUT;
    }

    private static final long _xmm$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _libc_xmmreg _xmm[16]
     * }
     */
    public static final long _xmm$offset() {
        return _xmm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _libc_xmmreg _xmm[16]
     * }
     */
    public static MemorySegment _xmm(MemorySegment struct) {
        return struct.asSlice(_xmm$OFFSET, _xmm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _libc_xmmreg _xmm[16]
     * }
     */
    public static void _xmm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _xmm$OFFSET, _xmm$LAYOUT.byteSize());
    }

    private static long[] _xmm$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * struct _libc_xmmreg _xmm[16]
     * }
     */
    public static long[] _xmm$dimensions() {
        return _xmm$DIMS;
    }
    private static final MethodHandle _xmm$ELEM_HANDLE = _xmm$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * struct _libc_xmmreg _xmm[16]
     * }
     */
    public static MemorySegment _xmm(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)_xmm$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * struct _libc_xmmreg _xmm[16]
     * }
     */
    public static void _xmm(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, _xmm(struct, index0), 0L, _libc_xmmreg.layout().byteSize());
    }

    private static final SequenceLayout __glibc_reserved1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__glibc_reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint32_t __glibc_reserved1[24]
     * }
     */
    public static final SequenceLayout __glibc_reserved1$layout() {
        return __glibc_reserved1$LAYOUT;
    }

    private static final long __glibc_reserved1$OFFSET = 416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint32_t __glibc_reserved1[24]
     * }
     */
    public static final long __glibc_reserved1$offset() {
        return __glibc_reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint32_t __glibc_reserved1[24]
     * }
     */
    public static MemorySegment __glibc_reserved1(MemorySegment struct) {
        return struct.asSlice(__glibc_reserved1$OFFSET, __glibc_reserved1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint32_t __glibc_reserved1[24]
     * }
     */
    public static void __glibc_reserved1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __glibc_reserved1$OFFSET, __glibc_reserved1$LAYOUT.byteSize());
    }

    private static long[] __glibc_reserved1$DIMS = { 24 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __uint32_t __glibc_reserved1[24]
     * }
     */
    public static long[] __glibc_reserved1$dimensions() {
        return __glibc_reserved1$DIMS;
    }
    private static final VarHandle __glibc_reserved1$ELEM_HANDLE = __glibc_reserved1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __uint32_t __glibc_reserved1[24]
     * }
     */
    public static int __glibc_reserved1(MemorySegment struct, long index0) {
        return (int)__glibc_reserved1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __uint32_t __glibc_reserved1[24]
     * }
     */
    public static void __glibc_reserved1(MemorySegment struct, long index0, int fieldValue) {
        __glibc_reserved1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

