// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct io_uring_params {
 *     __u32 sq_entries;
 *     __u32 cq_entries;
 *     __u32 flags;
 *     __u32 sq_thread_cpu;
 *     __u32 sq_thread_idle;
 *     __u32 features;
 *     __u32 wq_fd;
 *     __u32 resv[3];
 *     struct io_sqring_offsets sq_off;
 *     struct io_cqring_offsets cq_off;
 * }
 * }
 */
public class io_uring_params {

    io_uring_params() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_INT.withName("sq_entries"),
        liburingtest.C_INT.withName("cq_entries"),
        liburingtest.C_INT.withName("flags"),
        liburingtest.C_INT.withName("sq_thread_cpu"),
        liburingtest.C_INT.withName("sq_thread_idle"),
        liburingtest.C_INT.withName("features"),
        liburingtest.C_INT.withName("wq_fd"),
        MemoryLayout.sequenceLayout(3, liburingtest.C_INT).withName("resv"),
        io_sqring_offsets.layout().withName("sq_off"),
        io_cqring_offsets.layout().withName("cq_off")
    ).withName("io_uring_params");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sq_entries$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sq_entries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 sq_entries
     * }
     */
    public static final OfInt sq_entries$layout() {
        return sq_entries$LAYOUT;
    }

    private static final long sq_entries$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 sq_entries
     * }
     */
    public static final long sq_entries$offset() {
        return sq_entries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 sq_entries
     * }
     */
    public static int sq_entries(MemorySegment struct) {
        return struct.get(sq_entries$LAYOUT, sq_entries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 sq_entries
     * }
     */
    public static void sq_entries(MemorySegment struct, int fieldValue) {
        struct.set(sq_entries$LAYOUT, sq_entries$OFFSET, fieldValue);
    }

    private static final OfInt cq_entries$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cq_entries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 cq_entries
     * }
     */
    public static final OfInt cq_entries$layout() {
        return cq_entries$LAYOUT;
    }

    private static final long cq_entries$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 cq_entries
     * }
     */
    public static final long cq_entries$offset() {
        return cq_entries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 cq_entries
     * }
     */
    public static int cq_entries(MemorySegment struct) {
        return struct.get(cq_entries$LAYOUT, cq_entries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 cq_entries
     * }
     */
    public static void cq_entries(MemorySegment struct, int fieldValue) {
        struct.set(cq_entries$LAYOUT, cq_entries$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt sq_thread_cpu$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sq_thread_cpu"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 sq_thread_cpu
     * }
     */
    public static final OfInt sq_thread_cpu$layout() {
        return sq_thread_cpu$LAYOUT;
    }

    private static final long sq_thread_cpu$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 sq_thread_cpu
     * }
     */
    public static final long sq_thread_cpu$offset() {
        return sq_thread_cpu$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 sq_thread_cpu
     * }
     */
    public static int sq_thread_cpu(MemorySegment struct) {
        return struct.get(sq_thread_cpu$LAYOUT, sq_thread_cpu$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 sq_thread_cpu
     * }
     */
    public static void sq_thread_cpu(MemorySegment struct, int fieldValue) {
        struct.set(sq_thread_cpu$LAYOUT, sq_thread_cpu$OFFSET, fieldValue);
    }

    private static final OfInt sq_thread_idle$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sq_thread_idle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 sq_thread_idle
     * }
     */
    public static final OfInt sq_thread_idle$layout() {
        return sq_thread_idle$LAYOUT;
    }

    private static final long sq_thread_idle$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 sq_thread_idle
     * }
     */
    public static final long sq_thread_idle$offset() {
        return sq_thread_idle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 sq_thread_idle
     * }
     */
    public static int sq_thread_idle(MemorySegment struct) {
        return struct.get(sq_thread_idle$LAYOUT, sq_thread_idle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 sq_thread_idle
     * }
     */
    public static void sq_thread_idle(MemorySegment struct, int fieldValue) {
        struct.set(sq_thread_idle$LAYOUT, sq_thread_idle$OFFSET, fieldValue);
    }

    private static final OfInt features$LAYOUT = (OfInt)$LAYOUT.select(groupElement("features"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 features
     * }
     */
    public static final OfInt features$layout() {
        return features$LAYOUT;
    }

    private static final long features$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 features
     * }
     */
    public static final long features$offset() {
        return features$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 features
     * }
     */
    public static int features(MemorySegment struct) {
        return struct.get(features$LAYOUT, features$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 features
     * }
     */
    public static void features(MemorySegment struct, int fieldValue) {
        struct.set(features$LAYOUT, features$OFFSET, fieldValue);
    }

    private static final OfInt wq_fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("wq_fd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 wq_fd
     * }
     */
    public static final OfInt wq_fd$layout() {
        return wq_fd$LAYOUT;
    }

    private static final long wq_fd$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 wq_fd
     * }
     */
    public static final long wq_fd$offset() {
        return wq_fd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 wq_fd
     * }
     */
    public static int wq_fd(MemorySegment struct) {
        return struct.get(wq_fd$LAYOUT, wq_fd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 wq_fd
     * }
     */
    public static void wq_fd(MemorySegment struct, int fieldValue) {
        struct.set(wq_fd$LAYOUT, wq_fd$OFFSET, fieldValue);
    }

    private static final SequenceLayout resv$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("resv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 resv[3]
     * }
     */
    public static final SequenceLayout resv$layout() {
        return resv$LAYOUT;
    }

    private static final long resv$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 resv[3]
     * }
     */
    public static final long resv$offset() {
        return resv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 resv[3]
     * }
     */
    public static MemorySegment resv(MemorySegment struct) {
        return struct.asSlice(resv$OFFSET, resv$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 resv[3]
     * }
     */
    public static void resv(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, resv$OFFSET, resv$LAYOUT.byteSize());
    }

    private static long[] resv$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u32 resv[3]
     * }
     */
    public static long[] resv$dimensions() {
        return resv$DIMS;
    }
    private static final VarHandle resv$ELEM_HANDLE = resv$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u32 resv[3]
     * }
     */
    public static int resv(MemorySegment struct, long index0) {
        return (int)resv$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u32 resv[3]
     * }
     */
    public static void resv(MemorySegment struct, long index0, int fieldValue) {
        resv$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout sq_off$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sq_off"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct io_sqring_offsets sq_off
     * }
     */
    public static final GroupLayout sq_off$layout() {
        return sq_off$LAYOUT;
    }

    private static final long sq_off$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct io_sqring_offsets sq_off
     * }
     */
    public static final long sq_off$offset() {
        return sq_off$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct io_sqring_offsets sq_off
     * }
     */
    public static MemorySegment sq_off(MemorySegment struct) {
        return struct.asSlice(sq_off$OFFSET, sq_off$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct io_sqring_offsets sq_off
     * }
     */
    public static void sq_off(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sq_off$OFFSET, sq_off$LAYOUT.byteSize());
    }

    private static final GroupLayout cq_off$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cq_off"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct io_cqring_offsets cq_off
     * }
     */
    public static final GroupLayout cq_off$layout() {
        return cq_off$LAYOUT;
    }

    private static final long cq_off$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct io_cqring_offsets cq_off
     * }
     */
    public static final long cq_off$offset() {
        return cq_off$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct io_cqring_offsets cq_off
     * }
     */
    public static MemorySegment cq_off(MemorySegment struct) {
        return struct.asSlice(cq_off$OFFSET, cq_off$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct io_cqring_offsets cq_off
     * }
     */
    public static void cq_off(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cq_off$OFFSET, cq_off$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

