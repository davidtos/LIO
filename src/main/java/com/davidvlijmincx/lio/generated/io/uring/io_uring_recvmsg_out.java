// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct io_uring_recvmsg_out {
 *     __u32 namelen;
 *     __u32 controllen;
 *     __u32 payloadlen;
 *     __u32 flags;
 * }
 * }
 */
public class io_uring_recvmsg_out {

    io_uring_recvmsg_out() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_INT.withName("namelen"),
        liburingtest.C_INT.withName("controllen"),
        liburingtest.C_INT.withName("payloadlen"),
        liburingtest.C_INT.withName("flags")
    ).withName("io_uring_recvmsg_out");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt namelen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("namelen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 namelen
     * }
     */
    public static final OfInt namelen$layout() {
        return namelen$LAYOUT;
    }

    private static final long namelen$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 namelen
     * }
     */
    public static final long namelen$offset() {
        return namelen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 namelen
     * }
     */
    public static int namelen(MemorySegment struct) {
        return struct.get(namelen$LAYOUT, namelen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 namelen
     * }
     */
    public static void namelen(MemorySegment struct, int fieldValue) {
        struct.set(namelen$LAYOUT, namelen$OFFSET, fieldValue);
    }

    private static final OfInt controllen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("controllen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 controllen
     * }
     */
    public static final OfInt controllen$layout() {
        return controllen$LAYOUT;
    }

    private static final long controllen$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 controllen
     * }
     */
    public static final long controllen$offset() {
        return controllen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 controllen
     * }
     */
    public static int controllen(MemorySegment struct) {
        return struct.get(controllen$LAYOUT, controllen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 controllen
     * }
     */
    public static void controllen(MemorySegment struct, int fieldValue) {
        struct.set(controllen$LAYOUT, controllen$OFFSET, fieldValue);
    }

    private static final OfInt payloadlen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("payloadlen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 payloadlen
     * }
     */
    public static final OfInt payloadlen$layout() {
        return payloadlen$LAYOUT;
    }

    private static final long payloadlen$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 payloadlen
     * }
     */
    public static final long payloadlen$offset() {
        return payloadlen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 payloadlen
     * }
     */
    public static int payloadlen(MemorySegment struct) {
        return struct.get(payloadlen$LAYOUT, payloadlen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 payloadlen
     * }
     */
    public static void payloadlen(MemorySegment struct, int fieldValue) {
        struct.set(payloadlen$LAYOUT, payloadlen$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

