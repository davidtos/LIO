// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.*;

/**
 * {@snippet lang=c :
 * struct io_uring_buf {
 *     __u64 addr;
 *     __u32 len;
 *     __u16 bid;
 *     __u16 resv;
 * }
 * }
 */
public class io_uring_buf {

    io_uring_buf() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_LONG_LONG.withName("addr"),
        liburingtest.C_INT.withName("len"),
        liburingtest.C_SHORT.withName("bid"),
        liburingtest.C_SHORT.withName("resv")
    ).withName("io_uring_buf");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong addr$LAYOUT = (OfLong)$LAYOUT.select(groupElement("addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 addr
     * }
     */
    public static final OfLong addr$layout() {
        return addr$LAYOUT;
    }

    private static final long addr$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 addr
     * }
     */
    public static final long addr$offset() {
        return addr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 addr
     * }
     */
    public static long addr(MemorySegment struct) {
        return struct.get(addr$LAYOUT, addr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 addr
     * }
     */
    public static void addr(MemorySegment struct, long fieldValue) {
        struct.set(addr$LAYOUT, addr$OFFSET, fieldValue);
    }

    private static final OfInt len$LAYOUT = (OfInt)$LAYOUT.select(groupElement("len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 len
     * }
     */
    public static final OfInt len$layout() {
        return len$LAYOUT;
    }

    private static final long len$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 len
     * }
     */
    public static final long len$offset() {
        return len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 len
     * }
     */
    public static int len(MemorySegment struct) {
        return struct.get(len$LAYOUT, len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 len
     * }
     */
    public static void len(MemorySegment struct, int fieldValue) {
        struct.set(len$LAYOUT, len$OFFSET, fieldValue);
    }

    private static final OfShort bid$LAYOUT = (OfShort)$LAYOUT.select(groupElement("bid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u16 bid
     * }
     */
    public static final OfShort bid$layout() {
        return bid$LAYOUT;
    }

    private static final long bid$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u16 bid
     * }
     */
    public static final long bid$offset() {
        return bid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 bid
     * }
     */
    public static short bid(MemorySegment struct) {
        return struct.get(bid$LAYOUT, bid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 bid
     * }
     */
    public static void bid(MemorySegment struct, short fieldValue) {
        struct.set(bid$LAYOUT, bid$OFFSET, fieldValue);
    }

    private static final OfShort resv$LAYOUT = (OfShort)$LAYOUT.select(groupElement("resv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u16 resv
     * }
     */
    public static final OfShort resv$layout() {
        return resv$LAYOUT;
    }

    private static final long resv$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u16 resv
     * }
     */
    public static final long resv$offset() {
        return resv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 resv
     * }
     */
    public static short resv(MemorySegment struct) {
        return struct.get(resv$LAYOUT, resv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 resv
     * }
     */
    public static void resv(MemorySegment struct, short fieldValue) {
        struct.set(resv$LAYOUT, resv$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

