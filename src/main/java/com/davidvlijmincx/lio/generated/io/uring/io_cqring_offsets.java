// Generated by jextract

package com.davidvlijmincx.lio.generated.io.uring;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang=c :
 * struct io_cqring_offsets {
 *     __u32 head;
 *     __u32 tail;
 *     __u32 ring_mask;
 *     __u32 ring_entries;
 *     __u32 overflow;
 *     __u32 cqes;
 *     __u32 flags;
 *     __u32 resv1;
 *     __u64 user_addr;
 * }
 * }
 */
public class io_cqring_offsets {

    io_cqring_offsets() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        liburingtest.C_INT.withName("head"),
        liburingtest.C_INT.withName("tail"),
        liburingtest.C_INT.withName("ring_mask"),
        liburingtest.C_INT.withName("ring_entries"),
        liburingtest.C_INT.withName("overflow"),
        liburingtest.C_INT.withName("cqes"),
        liburingtest.C_INT.withName("flags"),
        liburingtest.C_INT.withName("resv1"),
        liburingtest.C_LONG_LONG.withName("user_addr")
    ).withName("io_cqring_offsets");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt head$LAYOUT = (OfInt)$LAYOUT.select(groupElement("head"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 head
     * }
     */
    public static final OfInt head$layout() {
        return head$LAYOUT;
    }

    private static final long head$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 head
     * }
     */
    public static final long head$offset() {
        return head$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 head
     * }
     */
    public static int head(MemorySegment struct) {
        return struct.get(head$LAYOUT, head$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 head
     * }
     */
    public static void head(MemorySegment struct, int fieldValue) {
        struct.set(head$LAYOUT, head$OFFSET, fieldValue);
    }

    private static final OfInt tail$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tail"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 tail
     * }
     */
    public static final OfInt tail$layout() {
        return tail$LAYOUT;
    }

    private static final long tail$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 tail
     * }
     */
    public static final long tail$offset() {
        return tail$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 tail
     * }
     */
    public static int tail(MemorySegment struct) {
        return struct.get(tail$LAYOUT, tail$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 tail
     * }
     */
    public static void tail(MemorySegment struct, int fieldValue) {
        struct.set(tail$LAYOUT, tail$OFFSET, fieldValue);
    }

    private static final OfInt ring_mask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ring_mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 ring_mask
     * }
     */
    public static final OfInt ring_mask$layout() {
        return ring_mask$LAYOUT;
    }

    private static final long ring_mask$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 ring_mask
     * }
     */
    public static final long ring_mask$offset() {
        return ring_mask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 ring_mask
     * }
     */
    public static int ring_mask(MemorySegment struct) {
        return struct.get(ring_mask$LAYOUT, ring_mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 ring_mask
     * }
     */
    public static void ring_mask(MemorySegment struct, int fieldValue) {
        struct.set(ring_mask$LAYOUT, ring_mask$OFFSET, fieldValue);
    }

    private static final OfInt ring_entries$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ring_entries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 ring_entries
     * }
     */
    public static final OfInt ring_entries$layout() {
        return ring_entries$LAYOUT;
    }

    private static final long ring_entries$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 ring_entries
     * }
     */
    public static final long ring_entries$offset() {
        return ring_entries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 ring_entries
     * }
     */
    public static int ring_entries(MemorySegment struct) {
        return struct.get(ring_entries$LAYOUT, ring_entries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 ring_entries
     * }
     */
    public static void ring_entries(MemorySegment struct, int fieldValue) {
        struct.set(ring_entries$LAYOUT, ring_entries$OFFSET, fieldValue);
    }

    private static final OfInt overflow$LAYOUT = (OfInt)$LAYOUT.select(groupElement("overflow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 overflow
     * }
     */
    public static final OfInt overflow$layout() {
        return overflow$LAYOUT;
    }

    private static final long overflow$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 overflow
     * }
     */
    public static final long overflow$offset() {
        return overflow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 overflow
     * }
     */
    public static int overflow(MemorySegment struct) {
        return struct.get(overflow$LAYOUT, overflow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 overflow
     * }
     */
    public static void overflow(MemorySegment struct, int fieldValue) {
        struct.set(overflow$LAYOUT, overflow$OFFSET, fieldValue);
    }

    private static final OfInt cqes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cqes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 cqes
     * }
     */
    public static final OfInt cqes$layout() {
        return cqes$LAYOUT;
    }

    private static final long cqes$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 cqes
     * }
     */
    public static final long cqes$offset() {
        return cqes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 cqes
     * }
     */
    public static int cqes(MemorySegment struct) {
        return struct.get(cqes$LAYOUT, cqes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 cqes
     * }
     */
    public static void cqes(MemorySegment struct, int fieldValue) {
        struct.set(cqes$LAYOUT, cqes$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt resv1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("resv1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 resv1
     * }
     */
    public static final OfInt resv1$layout() {
        return resv1$LAYOUT;
    }

    private static final long resv1$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 resv1
     * }
     */
    public static final long resv1$offset() {
        return resv1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 resv1
     * }
     */
    public static int resv1(MemorySegment struct) {
        return struct.get(resv1$LAYOUT, resv1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 resv1
     * }
     */
    public static void resv1(MemorySegment struct, int fieldValue) {
        struct.set(resv1$LAYOUT, resv1$OFFSET, fieldValue);
    }

    private static final OfLong user_addr$LAYOUT = (OfLong)$LAYOUT.select(groupElement("user_addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u64 user_addr
     * }
     */
    public static final OfLong user_addr$layout() {
        return user_addr$LAYOUT;
    }

    private static final long user_addr$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u64 user_addr
     * }
     */
    public static final long user_addr$offset() {
        return user_addr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u64 user_addr
     * }
     */
    public static long user_addr(MemorySegment struct) {
        return struct.get(user_addr$LAYOUT, user_addr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u64 user_addr
     * }
     */
    public static void user_addr(MemorySegment struct, long fieldValue) {
        struct.set(user_addr$LAYOUT, user_addr$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

