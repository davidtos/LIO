// Generated by jextract

package com.davidvlijmincx.lio.generated.fcntl;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.util.Arrays;
import java.util.stream.Collectors;

import static java.lang.foreign.ValueLayout.*;

public class fcntl_h {

    fcntl_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final OfInt C_INT = ValueLayout.JAVA_INT;
    public static final OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE));
    public static final OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int _FCNTL_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _FCNTL_H 1
     * }
     */
    public static int _FCNTL_H() {
        return _FCNTL_H;
    }
    private static final int _FEATURES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return _FEATURES_H;
    }
    private static final int _DEFAULT_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return _DEFAULT_SOURCE;
    }
    private static final int __GLIBC_USE_ISOC2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return __GLIBC_USE_ISOC2X;
    }
    private static final int __USE_ISOC11 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return __USE_ISOC11;
    }
    private static final int __USE_ISOC99 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return __USE_ISOC99;
    }
    private static final int __USE_ISOC95 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return __USE_ISOC95;
    }
    private static final int __USE_POSIX_IMPLICITLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return __USE_POSIX_IMPLICITLY;
    }
    private static final int _POSIX_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return _POSIX_SOURCE;
    }
    private static final int __USE_POSIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return __USE_POSIX;
    }
    private static final int __USE_POSIX2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return __USE_POSIX2;
    }
    private static final int __USE_POSIX199309 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return __USE_POSIX199309;
    }
    private static final int __USE_POSIX199506 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return __USE_POSIX199506;
    }
    private static final int __USE_XOPEN2K = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return __USE_XOPEN2K;
    }
    private static final int __USE_XOPEN2K8 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return __USE_XOPEN2K8;
    }
    private static final int _ATFILE_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return _ATFILE_SOURCE;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __WORDSIZE_TIME64_COMPAT32 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return __WORDSIZE_TIME64_COMPAT32;
    }
    private static final int __SYSCALL_WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return __SYSCALL_WORDSIZE;
    }
    private static final int __USE_MISC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return __USE_MISC;
    }
    private static final int __USE_ATFILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return __USE_ATFILE;
    }
    private static final int __USE_FORTIFY_LEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return __USE_FORTIFY_LEVEL;
    }
    private static final int __GLIBC_USE_DEPRECATED_GETS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return __GLIBC_USE_DEPRECATED_GETS;
    }
    private static final int __GLIBC_USE_DEPRECATED_SCANF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return __GLIBC_USE_DEPRECATED_SCANF;
    }
    private static final int _STDC_PREDEF_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return _STDC_PREDEF_H;
    }
    private static final int __STDC_IEC_559__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return __STDC_IEC_559__;
    }
    private static final int __STDC_IEC_559_COMPLEX__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return __STDC_IEC_559_COMPLEX__;
    }
    private static final int __GNU_LIBRARY__ = (int)6L;
    /**
     * {@snippet lang=c :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return __GNU_LIBRARY__;
    }
    private static final int __GLIBC__ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return __GLIBC__;
    }
    private static final int __GLIBC_MINOR__ = (int)35L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_MINOR__ 35
     * }
     */
    public static int __GLIBC_MINOR__() {
        return __GLIBC_MINOR__;
    }
    private static final int _SYS_CDEFS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return _SYS_CDEFS_H;
    }
    private static final int __glibc_c99_flexarr_available = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return __glibc_c99_flexarr_available;
    }
    private static final int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI;
    }
    private static final int __HAVE_GENERIC_SELECTION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return __HAVE_GENERIC_SELECTION;
    }
    private static final int _BITS_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return _BITS_TYPES_H;
    }
    private static final int _BITS_TYPESIZES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return _BITS_TYPESIZES_H;
    }
    private static final int __OFF_T_MATCHES_OFF64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return __OFF_T_MATCHES_OFF64_T;
    }
    private static final int __INO_T_MATCHES_INO64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return __INO_T_MATCHES_INO64_T;
    }
    private static final int __RLIM_T_MATCHES_RLIM64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return __RLIM_T_MATCHES_RLIM64_T;
    }
    private static final int __STATFS_MATCHES_STATFS64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return __STATFS_MATCHES_STATFS64;
    }
    private static final int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64;
    }
    private static final int __FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return __FD_SETSIZE;
    }
    private static final int _BITS_TIME64_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return _BITS_TIME64_H;
    }
    private static final int __O_LARGEFILE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __O_LARGEFILE 0
     * }
     */
    public static int __O_LARGEFILE() {
        return __O_LARGEFILE;
    }
    private static final int F_GETLK64 = (int)5L;
    /**
     * {@snippet lang=c :
     * #define F_GETLK64 5
     * }
     */
    public static int F_GETLK64() {
        return F_GETLK64;
    }
    private static final int F_SETLK64 = (int)6L;
    /**
     * {@snippet lang=c :
     * #define F_SETLK64 6
     * }
     */
    public static int F_SETLK64() {
        return F_SETLK64;
    }
    private static final int F_SETLKW64 = (int)7L;
    /**
     * {@snippet lang=c :
     * #define F_SETLKW64 7
     * }
     */
    public static int F_SETLKW64() {
        return F_SETLKW64;
    }
    private static final int O_ACCMODE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define O_ACCMODE 3
     * }
     */
    public static int O_ACCMODE() {
        return O_ACCMODE;
    }
    private static final int O_RDONLY = (int)0L;
    /**
     * {@snippet lang=c :
     * #define O_RDONLY 0
     * }
     */
    public static int O_RDONLY() {
        return O_RDONLY;
    }
    private static final int O_WRONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define O_WRONLY 1
     * }
     */
    public static int O_WRONLY() {
        return O_WRONLY;
    }
    private static final int O_RDWR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define O_RDWR 2
     * }
     */
    public static int O_RDWR() {
        return O_RDWR;
    }
    private static final int O_CREAT = (int)64L;
    /**
     * {@snippet lang=c :
     * #define O_CREAT 64
     * }
     */
    public static int O_CREAT() {
        return O_CREAT;
    }
    private static final int O_EXCL = (int)128L;
    /**
     * {@snippet lang=c :
     * #define O_EXCL 128
     * }
     */
    public static int O_EXCL() {
        return O_EXCL;
    }
    private static final int O_NOCTTY = (int)256L;
    /**
     * {@snippet lang=c :
     * #define O_NOCTTY 256
     * }
     */
    public static int O_NOCTTY() {
        return O_NOCTTY;
    }
    private static final int O_TRUNC = (int)512L;
    /**
     * {@snippet lang=c :
     * #define O_TRUNC 512
     * }
     */
    public static int O_TRUNC() {
        return O_TRUNC;
    }
    private static final int O_APPEND = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define O_APPEND 1024
     * }
     */
    public static int O_APPEND() {
        return O_APPEND;
    }
    private static final int O_NONBLOCK = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define O_NONBLOCK 2048
     * }
     */
    public static int O_NONBLOCK() {
        return O_NONBLOCK;
    }
    private static final int O_SYNC = (int)1052672L;
    /**
     * {@snippet lang=c :
     * #define O_SYNC 1052672
     * }
     */
    public static int O_SYNC() {
        return O_SYNC;
    }
    private static final int O_ASYNC = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define O_ASYNC 8192
     * }
     */
    public static int O_ASYNC() {
        return O_ASYNC;
    }
    private static final int __O_DIRECTORY = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define __O_DIRECTORY 65536
     * }
     */
    public static int __O_DIRECTORY() {
        return __O_DIRECTORY;
    }
    private static final int __O_NOFOLLOW = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define __O_NOFOLLOW 131072
     * }
     */
    public static int __O_NOFOLLOW() {
        return __O_NOFOLLOW;
    }
    private static final int __O_CLOEXEC = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define __O_CLOEXEC 524288
     * }
     */
    public static int __O_CLOEXEC() {
        return __O_CLOEXEC;
    }
    private static final int __O_DIRECT = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define __O_DIRECT 16384
     * }
     */
    public static int __O_DIRECT() {
        return __O_DIRECT;
    }
    private static final int __O_NOATIME = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define __O_NOATIME 262144
     * }
     */
    public static int __O_NOATIME() {
        return __O_NOATIME;
    }
    private static final int __O_PATH = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define __O_PATH 2097152
     * }
     */
    public static int __O_PATH() {
        return __O_PATH;
    }
    private static final int __O_DSYNC = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define __O_DSYNC 4096
     * }
     */
    public static int __O_DSYNC() {
        return __O_DSYNC;
    }
    private static final int F_GETLK = (int)5L;
    /**
     * {@snippet lang=c :
     * #define F_GETLK 5
     * }
     */
    public static int F_GETLK() {
        return F_GETLK;
    }
    private static final int F_SETLK = (int)6L;
    /**
     * {@snippet lang=c :
     * #define F_SETLK 6
     * }
     */
    public static int F_SETLK() {
        return F_SETLK;
    }
    private static final int F_SETLKW = (int)7L;
    /**
     * {@snippet lang=c :
     * #define F_SETLKW 7
     * }
     */
    public static int F_SETLKW() {
        return F_SETLKW;
    }
    private static final int F_DUPFD = (int)0L;
    /**
     * {@snippet lang=c :
     * #define F_DUPFD 0
     * }
     */
    public static int F_DUPFD() {
        return F_DUPFD;
    }
    private static final int F_GETFD = (int)1L;
    /**
     * {@snippet lang=c :
     * #define F_GETFD 1
     * }
     */
    public static int F_GETFD() {
        return F_GETFD;
    }
    private static final int F_SETFD = (int)2L;
    /**
     * {@snippet lang=c :
     * #define F_SETFD 2
     * }
     */
    public static int F_SETFD() {
        return F_SETFD;
    }
    private static final int F_GETFL = (int)3L;
    /**
     * {@snippet lang=c :
     * #define F_GETFL 3
     * }
     */
    public static int F_GETFL() {
        return F_GETFL;
    }
    private static final int F_SETFL = (int)4L;
    /**
     * {@snippet lang=c :
     * #define F_SETFL 4
     * }
     */
    public static int F_SETFL() {
        return F_SETFL;
    }
    private static final int __F_SETOWN = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __F_SETOWN 8
     * }
     */
    public static int __F_SETOWN() {
        return __F_SETOWN;
    }
    private static final int __F_GETOWN = (int)9L;
    /**
     * {@snippet lang=c :
     * #define __F_GETOWN 9
     * }
     */
    public static int __F_GETOWN() {
        return __F_GETOWN;
    }
    private static final int __F_SETSIG = (int)10L;
    /**
     * {@snippet lang=c :
     * #define __F_SETSIG 10
     * }
     */
    public static int __F_SETSIG() {
        return __F_SETSIG;
    }
    private static final int __F_GETSIG = (int)11L;
    /**
     * {@snippet lang=c :
     * #define __F_GETSIG 11
     * }
     */
    public static int __F_GETSIG() {
        return __F_GETSIG;
    }
    private static final int __F_SETOWN_EX = (int)15L;
    /**
     * {@snippet lang=c :
     * #define __F_SETOWN_EX 15
     * }
     */
    public static int __F_SETOWN_EX() {
        return __F_SETOWN_EX;
    }
    private static final int __F_GETOWN_EX = (int)16L;
    /**
     * {@snippet lang=c :
     * #define __F_GETOWN_EX 16
     * }
     */
    public static int __F_GETOWN_EX() {
        return __F_GETOWN_EX;
    }
    private static final int F_DUPFD_CLOEXEC = (int)1030L;
    /**
     * {@snippet lang=c :
     * #define F_DUPFD_CLOEXEC 1030
     * }
     */
    public static int F_DUPFD_CLOEXEC() {
        return F_DUPFD_CLOEXEC;
    }
    private static final int FD_CLOEXEC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FD_CLOEXEC 1
     * }
     */
    public static int FD_CLOEXEC() {
        return FD_CLOEXEC;
    }
    private static final int F_RDLCK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define F_RDLCK 0
     * }
     */
    public static int F_RDLCK() {
        return F_RDLCK;
    }
    private static final int F_WRLCK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define F_WRLCK 1
     * }
     */
    public static int F_WRLCK() {
        return F_WRLCK;
    }
    private static final int F_UNLCK = (int)2L;
    /**
     * {@snippet lang=c :
     * #define F_UNLCK 2
     * }
     */
    public static int F_UNLCK() {
        return F_UNLCK;
    }
    private static final int F_EXLCK = (int)4L;
    /**
     * {@snippet lang=c :
     * #define F_EXLCK 4
     * }
     */
    public static int F_EXLCK() {
        return F_EXLCK;
    }
    private static final int F_SHLCK = (int)8L;
    /**
     * {@snippet lang=c :
     * #define F_SHLCK 8
     * }
     */
    public static int F_SHLCK() {
        return F_SHLCK;
    }
    private static final int LOCK_SH = (int)1L;
    /**
     * {@snippet lang=c :
     * #define LOCK_SH 1
     * }
     */
    public static int LOCK_SH() {
        return LOCK_SH;
    }
    private static final int LOCK_EX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define LOCK_EX 2
     * }
     */
    public static int LOCK_EX() {
        return LOCK_EX;
    }
    private static final int LOCK_NB = (int)4L;
    /**
     * {@snippet lang=c :
     * #define LOCK_NB 4
     * }
     */
    public static int LOCK_NB() {
        return LOCK_NB;
    }
    private static final int LOCK_UN = (int)8L;
    /**
     * {@snippet lang=c :
     * #define LOCK_UN 8
     * }
     */
    public static int LOCK_UN() {
        return LOCK_UN;
    }
    private static final int __POSIX_FADV_DONTNEED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define __POSIX_FADV_DONTNEED 4
     * }
     */
    public static int __POSIX_FADV_DONTNEED() {
        return __POSIX_FADV_DONTNEED;
    }
    private static final int __POSIX_FADV_NOREUSE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define __POSIX_FADV_NOREUSE 5
     * }
     */
    public static int __POSIX_FADV_NOREUSE() {
        return __POSIX_FADV_NOREUSE;
    }
    private static final int POSIX_FADV_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define POSIX_FADV_NORMAL 0
     * }
     */
    public static int POSIX_FADV_NORMAL() {
        return POSIX_FADV_NORMAL;
    }
    private static final int POSIX_FADV_RANDOM = (int)1L;
    /**
     * {@snippet lang=c :
     * #define POSIX_FADV_RANDOM 1
     * }
     */
    public static int POSIX_FADV_RANDOM() {
        return POSIX_FADV_RANDOM;
    }
    private static final int POSIX_FADV_SEQUENTIAL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define POSIX_FADV_SEQUENTIAL 2
     * }
     */
    public static int POSIX_FADV_SEQUENTIAL() {
        return POSIX_FADV_SEQUENTIAL;
    }
    private static final int POSIX_FADV_WILLNEED = (int)3L;
    /**
     * {@snippet lang=c :
     * #define POSIX_FADV_WILLNEED 3
     * }
     */
    public static int POSIX_FADV_WILLNEED() {
        return POSIX_FADV_WILLNEED;
    }
    private static final int AT_SYMLINK_NOFOLLOW = (int)256L;
    /**
     * {@snippet lang=c :
     * #define AT_SYMLINK_NOFOLLOW 256
     * }
     */
    public static int AT_SYMLINK_NOFOLLOW() {
        return AT_SYMLINK_NOFOLLOW;
    }
    private static final int AT_REMOVEDIR = (int)512L;
    /**
     * {@snippet lang=c :
     * #define AT_REMOVEDIR 512
     * }
     */
    public static int AT_REMOVEDIR() {
        return AT_REMOVEDIR;
    }
    private static final int AT_SYMLINK_FOLLOW = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define AT_SYMLINK_FOLLOW 1024
     * }
     */
    public static int AT_SYMLINK_FOLLOW() {
        return AT_SYMLINK_FOLLOW;
    }
    private static final int AT_EACCESS = (int)512L;
    /**
     * {@snippet lang=c :
     * #define AT_EACCESS 512
     * }
     */
    public static int AT_EACCESS() {
        return AT_EACCESS;
    }
    private static final int _STRUCT_TIMESPEC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STRUCT_TIMESPEC 1
     * }
     */
    public static int _STRUCT_TIMESPEC() {
        return _STRUCT_TIMESPEC;
    }
    private static final int _BITS_ENDIAN_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_ENDIAN_H 1
     * }
     */
    public static int _BITS_ENDIAN_H() {
        return _BITS_ENDIAN_H;
    }
    private static final int __LITTLE_ENDIAN = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __LITTLE_ENDIAN 1234
     * }
     */
    public static int __LITTLE_ENDIAN() {
        return __LITTLE_ENDIAN;
    }
    private static final int __BIG_ENDIAN = (int)4321L;
    /**
     * {@snippet lang=c :
     * #define __BIG_ENDIAN 4321
     * }
     */
    public static int __BIG_ENDIAN() {
        return __BIG_ENDIAN;
    }
    private static final int __PDP_ENDIAN = (int)3412L;
    /**
     * {@snippet lang=c :
     * #define __PDP_ENDIAN 3412
     * }
     */
    public static int __PDP_ENDIAN() {
        return __PDP_ENDIAN;
    }
    private static final int _BITS_ENDIANNESS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_ENDIANNESS_H 1
     * }
     */
    public static int _BITS_ENDIANNESS_H() {
        return _BITS_ENDIANNESS_H;
    }
    private static final int __time_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __time_t_defined 1
     * }
     */
    public static int __time_t_defined() {
        return __time_t_defined;
    }
    private static final int _BITS_STAT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STAT_H 1
     * }
     */
    public static int _BITS_STAT_H() {
        return _BITS_STAT_H;
    }
    private static final int _BITS_STRUCT_STAT_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STRUCT_STAT_H 1
     * }
     */
    public static int _BITS_STRUCT_STAT_H() {
        return _BITS_STRUCT_STAT_H;
    }
    private static final int __S_IFMT = (int)61440L;
    /**
     * {@snippet lang=c :
     * #define __S_IFMT 61440
     * }
     */
    public static int __S_IFMT() {
        return __S_IFMT;
    }
    private static final int __S_IFDIR = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define __S_IFDIR 16384
     * }
     */
    public static int __S_IFDIR() {
        return __S_IFDIR;
    }
    private static final int __S_IFCHR = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define __S_IFCHR 8192
     * }
     */
    public static int __S_IFCHR() {
        return __S_IFCHR;
    }
    private static final int __S_IFBLK = (int)24576L;
    /**
     * {@snippet lang=c :
     * #define __S_IFBLK 24576
     * }
     */
    public static int __S_IFBLK() {
        return __S_IFBLK;
    }
    private static final int __S_IFREG = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define __S_IFREG 32768
     * }
     */
    public static int __S_IFREG() {
        return __S_IFREG;
    }
    private static final int __S_IFIFO = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define __S_IFIFO 4096
     * }
     */
    public static int __S_IFIFO() {
        return __S_IFIFO;
    }
    private static final int __S_IFLNK = (int)40960L;
    /**
     * {@snippet lang=c :
     * #define __S_IFLNK 40960
     * }
     */
    public static int __S_IFLNK() {
        return __S_IFLNK;
    }
    private static final int __S_IFSOCK = (int)49152L;
    /**
     * {@snippet lang=c :
     * #define __S_IFSOCK 49152
     * }
     */
    public static int __S_IFSOCK() {
        return __S_IFSOCK;
    }
    private static final int __S_ISUID = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define __S_ISUID 2048
     * }
     */
    public static int __S_ISUID() {
        return __S_ISUID;
    }
    private static final int __S_ISGID = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __S_ISGID 1024
     * }
     */
    public static int __S_ISGID() {
        return __S_ISGID;
    }
    private static final int __S_ISVTX = (int)512L;
    /**
     * {@snippet lang=c :
     * #define __S_ISVTX 512
     * }
     */
    public static int __S_ISVTX() {
        return __S_ISVTX;
    }
    private static final int __S_IREAD = (int)256L;
    /**
     * {@snippet lang=c :
     * #define __S_IREAD 256
     * }
     */
    public static int __S_IREAD() {
        return __S_IREAD;
    }
    private static final int __S_IWRITE = (int)128L;
    /**
     * {@snippet lang=c :
     * #define __S_IWRITE 128
     * }
     */
    public static int __S_IWRITE() {
        return __S_IWRITE;
    }
    private static final int __S_IEXEC = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __S_IEXEC 64
     * }
     */
    public static int __S_IEXEC() {
        return __S_IEXEC;
    }
    private static final int R_OK = (int)4L;
    /**
     * {@snippet lang=c :
     * #define R_OK 4
     * }
     */
    public static int R_OK() {
        return R_OK;
    }
    private static final int W_OK = (int)2L;
    /**
     * {@snippet lang=c :
     * #define W_OK 2
     * }
     */
    public static int W_OK() {
        return W_OK;
    }
    private static final int X_OK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define X_OK 1
     * }
     */
    public static int X_OK() {
        return X_OK;
    }
    private static final int F_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define F_OK 0
     * }
     */
    public static int F_OK() {
        return F_OK;
    }
    private static final int SEEK_SET = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return SEEK_SET;
    }
    private static final int SEEK_CUR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return SEEK_CUR;
    }
    private static final int SEEK_END = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return SEEK_END;
    }
    private static final int F_ULOCK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define F_ULOCK 0
     * }
     */
    public static int F_ULOCK() {
        return F_ULOCK;
    }
    private static final int F_LOCK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define F_LOCK 1
     * }
     */
    public static int F_LOCK() {
        return F_LOCK;
    }
    private static final int F_TLOCK = (int)2L;
    /**
     * {@snippet lang=c :
     * #define F_TLOCK 2
     * }
     */
    public static int F_TLOCK() {
        return F_TLOCK;
    }
    private static final int F_TEST = (int)3L;
    /**
     * {@snippet lang=c :
     * #define F_TEST 3
     * }
     */
    public static int F_TEST() {
        return F_TEST;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = fcntl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = fcntl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = fcntl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = fcntl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = fcntl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = fcntl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = fcntl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = fcntl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = fcntl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = fcntl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __nlink_t
     * }
     */
    public static final OfLong __nlink_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds64_t
     * }
     */
    public static final OfLong __suseconds64_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = fcntl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __blksize_t
     * }
     */
    public static final OfLong __blksize_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = fcntl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __mode_t mode_t
     * }
     */
    public static final OfInt mode_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __off_t off_t
     * }
     */
    public static final OfLong off_t = fcntl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __pid_t pid_t
     * }
     */
    public static final OfInt pid_t = fcntl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __time_t time_t
     * }
     */
    public static final OfLong time_t = fcntl_h.C_LONG;

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int fcntl(int __fd, int __cmd, ...)
     * }
     */
    public static class fcntl {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                fcntl_h.C_INT,
                fcntl_h.C_INT,
                fcntl_h.C_INT
            );
        private static final MemorySegment ADDR = fcntl_h.findOrThrow("fcntl");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fcntl(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int fcntl(int __fd, int __cmd, ...)
         * }
         */
        public static fcntl makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new fcntl(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(int __fd, int __cmd, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fcntl", __fd, __cmd, x2);
                }
                return (int)spreader.invokeExact(__fd, __cmd, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int open(const char *__file, int __oflag, ...)
     * }
     */
    public static class open {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                fcntl_h.C_INT,
                fcntl_h.C_POINTER,
                fcntl_h.C_INT
            );
        private static final MemorySegment ADDR = fcntl_h.findOrThrow("open");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private open(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int open(const char *__file, int __oflag, ...)
         * }
         */
        public static open makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new open(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __file, int __oflag, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("open", __file, __oflag, x2);
                }
                return (int)spreader.invokeExact(__file, __oflag, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int openat(int __fd, const char *__file, int __oflag, ...)
     * }
     */
    public static class openat {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                fcntl_h.C_INT,
                fcntl_h.C_INT,
                fcntl_h.C_POINTER,
                fcntl_h.C_INT
            );
        private static final MemorySegment ADDR = fcntl_h.findOrThrow("openat");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private openat(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int openat(int __fd, const char *__file, int __oflag, ...)
         * }
         */
        public static openat makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new openat(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(int __fd, MemorySegment __file, int __oflag, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("openat", __fd, __file, __oflag, x3);
                }
                return (int)spreader.invokeExact(__fd, __file, __oflag, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class creat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fcntl_h.C_INT,
            fcntl_h.C_POINTER,
            fcntl_h.C_INT
        );

        public static final MemorySegment ADDR = fcntl_h.findOrThrow("creat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int creat(const char *__file, mode_t __mode)
     * }
     */
    public static FunctionDescriptor creat$descriptor() {
        return creat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int creat(const char *__file, mode_t __mode)
     * }
     */
    public static MethodHandle creat$handle() {
        return creat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int creat(const char *__file, mode_t __mode)
     * }
     */
    public static MemorySegment creat$address() {
        return creat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int creat(const char *__file, mode_t __mode)
     * }
     */
    public static int creat(MemorySegment __file, int __mode) {
        var mh$ = creat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("creat", __file, __mode);
            }
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lockf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fcntl_h.C_INT,
            fcntl_h.C_INT,
            fcntl_h.C_INT,
            fcntl_h.C_LONG
        );

        public static final MemorySegment ADDR = fcntl_h.findOrThrow("lockf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int lockf(int __fd, int __cmd, off_t __len)
     * }
     */
    public static FunctionDescriptor lockf$descriptor() {
        return lockf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int lockf(int __fd, int __cmd, off_t __len)
     * }
     */
    public static MethodHandle lockf$handle() {
        return lockf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int lockf(int __fd, int __cmd, off_t __len)
     * }
     */
    public static MemorySegment lockf$address() {
        return lockf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int lockf(int __fd, int __cmd, off_t __len)
     * }
     */
    public static int lockf(int __fd, int __cmd, long __len) {
        var mh$ = lockf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lockf", __fd, __cmd, __len);
            }
            return (int)mh$.invokeExact(__fd, __cmd, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class posix_fadvise {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fcntl_h.C_INT,
            fcntl_h.C_INT,
            fcntl_h.C_LONG,
            fcntl_h.C_LONG,
            fcntl_h.C_INT
        );

        public static final MemorySegment ADDR = fcntl_h.findOrThrow("posix_fadvise");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int posix_fadvise(int __fd, off_t __offset, off_t __len, int __advise)
     * }
     */
    public static FunctionDescriptor posix_fadvise$descriptor() {
        return posix_fadvise.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int posix_fadvise(int __fd, off_t __offset, off_t __len, int __advise)
     * }
     */
    public static MethodHandle posix_fadvise$handle() {
        return posix_fadvise.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int posix_fadvise(int __fd, off_t __offset, off_t __len, int __advise)
     * }
     */
    public static MemorySegment posix_fadvise$address() {
        return posix_fadvise.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int posix_fadvise(int __fd, off_t __offset, off_t __len, int __advise)
     * }
     */
    public static int posix_fadvise(int __fd, long __offset, long __len, int __advise) {
        var mh$ = posix_fadvise.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("posix_fadvise", __fd, __offset, __len, __advise);
            }
            return (int)mh$.invokeExact(__fd, __offset, __len, __advise);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class posix_fallocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fcntl_h.C_INT,
            fcntl_h.C_INT,
            fcntl_h.C_LONG,
            fcntl_h.C_LONG
        );

        public static final MemorySegment ADDR = fcntl_h.findOrThrow("posix_fallocate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int posix_fallocate(int __fd, off_t __offset, off_t __len)
     * }
     */
    public static FunctionDescriptor posix_fallocate$descriptor() {
        return posix_fallocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int posix_fallocate(int __fd, off_t __offset, off_t __len)
     * }
     */
    public static MethodHandle posix_fallocate$handle() {
        return posix_fallocate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int posix_fallocate(int __fd, off_t __offset, off_t __len)
     * }
     */
    public static MemorySegment posix_fallocate$address() {
        return posix_fallocate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int posix_fallocate(int __fd, off_t __offset, off_t __len)
     * }
     */
    public static int posix_fallocate(int __fd, long __offset, long __len) {
        var mh$ = posix_fallocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("posix_fallocate", __fd, __offset, __len);
            }
            return (int)mh$.invokeExact(__fd, __offset, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final int O_NDELAY = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define O_NDELAY 2048
     * }
     */
    public static int O_NDELAY() {
        return O_NDELAY;
    }
    private static final int O_FSYNC = (int)1052672L;
    /**
     * {@snippet lang=c :
     * #define O_FSYNC 1052672
     * }
     */
    public static int O_FSYNC() {
        return O_FSYNC;
    }
    private static final int __O_TMPFILE = (int)4259840L;
    /**
     * {@snippet lang=c :
     * #define __O_TMPFILE 4259840
     * }
     */
    public static int __O_TMPFILE() {
        return __O_TMPFILE;
    }
    private static final int O_DIRECTORY = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define O_DIRECTORY 65536
     * }
     */
    public static int O_DIRECTORY() {
        return O_DIRECTORY;
    }
    private static final int O_NOFOLLOW = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define O_NOFOLLOW 131072
     * }
     */
    public static int O_NOFOLLOW() {
        return O_NOFOLLOW;
    }
    private static final int O_CLOEXEC = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define O_CLOEXEC 524288
     * }
     */
    public static int O_CLOEXEC() {
        return O_CLOEXEC;
    }
    private static final int O_DSYNC = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define O_DSYNC 4096
     * }
     */
    public static int O_DSYNC() {
        return O_DSYNC;
    }
    private static final int O_RSYNC = (int)1052672L;
    /**
     * {@snippet lang=c :
     * #define O_RSYNC 1052672
     * }
     */
    public static int O_RSYNC() {
        return O_RSYNC;
    }
    private static final int F_SETOWN = (int)8L;
    /**
     * {@snippet lang=c :
     * #define F_SETOWN 8
     * }
     */
    public static int F_SETOWN() {
        return F_SETOWN;
    }
    private static final int F_GETOWN = (int)9L;
    /**
     * {@snippet lang=c :
     * #define F_GETOWN 9
     * }
     */
    public static int F_GETOWN() {
        return F_GETOWN;
    }
    private static final int FAPPEND = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FAPPEND 1024
     * }
     */
    public static int FAPPEND() {
        return FAPPEND;
    }
    private static final int FFSYNC = (int)1052672L;
    /**
     * {@snippet lang=c :
     * #define FFSYNC 1052672
     * }
     */
    public static int FFSYNC() {
        return FFSYNC;
    }
    private static final int FASYNC = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define FASYNC 8192
     * }
     */
    public static int FASYNC() {
        return FASYNC;
    }
    private static final int FNONBLOCK = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define FNONBLOCK 2048
     * }
     */
    public static int FNONBLOCK() {
        return FNONBLOCK;
    }
    private static final int FNDELAY = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define FNDELAY 2048
     * }
     */
    public static int FNDELAY() {
        return FNDELAY;
    }
    private static final int POSIX_FADV_DONTNEED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define POSIX_FADV_DONTNEED 4
     * }
     */
    public static int POSIX_FADV_DONTNEED() {
        return POSIX_FADV_DONTNEED;
    }
    private static final int POSIX_FADV_NOREUSE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define POSIX_FADV_NOREUSE 5
     * }
     */
    public static int POSIX_FADV_NOREUSE() {
        return POSIX_FADV_NOREUSE;
    }
    private static final int AT_FDCWD = (int)-100L;
    /**
     * {@snippet lang=c :
     * #define AT_FDCWD -100
     * }
     */
    public static int AT_FDCWD() {
        return AT_FDCWD;
    }
    private static final int __BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return __BYTE_ORDER;
    }
    private static final int __FLOAT_WORD_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return __FLOAT_WORD_ORDER;
    }
    private static final long UTIME_NOW = 1073741823L;
    /**
     * {@snippet lang=c :
     * #define UTIME_NOW 1073741823
     * }
     */
    public static long UTIME_NOW() {
        return UTIME_NOW;
    }
    private static final long UTIME_OMIT = 1073741822L;
    /**
     * {@snippet lang=c :
     * #define UTIME_OMIT 1073741822
     * }
     */
    public static long UTIME_OMIT() {
        return UTIME_OMIT;
    }
    private static final int S_IFMT = (int)61440L;
    /**
     * {@snippet lang=c :
     * #define S_IFMT 61440
     * }
     */
    public static int S_IFMT() {
        return S_IFMT;
    }
    private static final int S_IFDIR = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define S_IFDIR 16384
     * }
     */
    public static int S_IFDIR() {
        return S_IFDIR;
    }
    private static final int S_IFCHR = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define S_IFCHR 8192
     * }
     */
    public static int S_IFCHR() {
        return S_IFCHR;
    }
    private static final int S_IFBLK = (int)24576L;
    /**
     * {@snippet lang=c :
     * #define S_IFBLK 24576
     * }
     */
    public static int S_IFBLK() {
        return S_IFBLK;
    }
    private static final int S_IFREG = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define S_IFREG 32768
     * }
     */
    public static int S_IFREG() {
        return S_IFREG;
    }
    private static final int S_IFIFO = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define S_IFIFO 4096
     * }
     */
    public static int S_IFIFO() {
        return S_IFIFO;
    }
    private static final int S_IFLNK = (int)40960L;
    /**
     * {@snippet lang=c :
     * #define S_IFLNK 40960
     * }
     */
    public static int S_IFLNK() {
        return S_IFLNK;
    }
    private static final int S_IFSOCK = (int)49152L;
    /**
     * {@snippet lang=c :
     * #define S_IFSOCK 49152
     * }
     */
    public static int S_IFSOCK() {
        return S_IFSOCK;
    }
    private static final int S_ISUID = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define S_ISUID 2048
     * }
     */
    public static int S_ISUID() {
        return S_ISUID;
    }
    private static final int S_ISGID = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define S_ISGID 1024
     * }
     */
    public static int S_ISGID() {
        return S_ISGID;
    }
    private static final int S_ISVTX = (int)512L;
    /**
     * {@snippet lang=c :
     * #define S_ISVTX 512
     * }
     */
    public static int S_ISVTX() {
        return S_ISVTX;
    }
    private static final int S_IRUSR = (int)256L;
    /**
     * {@snippet lang=c :
     * #define S_IRUSR 256
     * }
     */
    public static int S_IRUSR() {
        return S_IRUSR;
    }
    private static final int S_IWUSR = (int)128L;
    /**
     * {@snippet lang=c :
     * #define S_IWUSR 128
     * }
     */
    public static int S_IWUSR() {
        return S_IWUSR;
    }
    private static final int S_IXUSR = (int)64L;
    /**
     * {@snippet lang=c :
     * #define S_IXUSR 64
     * }
     */
    public static int S_IXUSR() {
        return S_IXUSR;
    }
    private static final int S_IRWXU = (int)448L;
    /**
     * {@snippet lang=c :
     * #define S_IRWXU 448
     * }
     */
    public static int S_IRWXU() {
        return S_IRWXU;
    }
    private static final int S_IRGRP = (int)32L;
    /**
     * {@snippet lang=c :
     * #define S_IRGRP 32
     * }
     */
    public static int S_IRGRP() {
        return S_IRGRP;
    }
    private static final int S_IWGRP = (int)16L;
    /**
     * {@snippet lang=c :
     * #define S_IWGRP 16
     * }
     */
    public static int S_IWGRP() {
        return S_IWGRP;
    }
    private static final int S_IXGRP = (int)8L;
    /**
     * {@snippet lang=c :
     * #define S_IXGRP 8
     * }
     */
    public static int S_IXGRP() {
        return S_IXGRP;
    }
    private static final int S_IRWXG = (int)56L;
    /**
     * {@snippet lang=c :
     * #define S_IRWXG 56
     * }
     */
    public static int S_IRWXG() {
        return S_IRWXG;
    }
    private static final int S_IROTH = (int)4L;
    /**
     * {@snippet lang=c :
     * #define S_IROTH 4
     * }
     */
    public static int S_IROTH() {
        return S_IROTH;
    }
    private static final int S_IWOTH = (int)2L;
    /**
     * {@snippet lang=c :
     * #define S_IWOTH 2
     * }
     */
    public static int S_IWOTH() {
        return S_IWOTH;
    }
    private static final int S_IXOTH = (int)1L;
    /**
     * {@snippet lang=c :
     * #define S_IXOTH 1
     * }
     */
    public static int S_IXOTH() {
        return S_IXOTH;
    }
    private static final int S_IRWXO = (int)7L;
    /**
     * {@snippet lang=c :
     * #define S_IRWXO 7
     * }
     */
    public static int S_IRWXO() {
        return S_IRWXO;
    }
}

